;/*******************************************************
;This program was created by the
;CodeWizardAVR V2.60 Evaluation
;Automatic Program Generator
;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2012-07-29
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdio.h>
;
;// Declare your global variables here
;
;#define BIT_SET(ADDRESS,BIT)    (ADDRESS |= (1<<BIT))
;#define BIT_CLR(ADDRESS,BIT)    (ADDRESS &= ~(1<<BIT))
;
;unsigned int adc[1];
;
;unsigned char LData;
;unsigned char DisCnt;
;
;
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D unsigned int adc_data;
; 0000 002E // Read the AD conversion result
; 0000 002F adc_data=ADCW;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	adc_data -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0030 // Place your code here
; 0000 0031 
; 0000 0032 adc[0] = adc_data;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0033 
; 0000 0034 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;
;
;void putch(char data)
; 0000 0039 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A     while(!(UCSR0A & 0x20));
;PCODE: $0000001B VOL: 0
;	data -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003B     UDR0 = data;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003C }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;char getch(void)
; 0000 003F {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0040     while(!(UCSR0A & 0x80));
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0041     return UDR0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0042 }
;PCODE: $00000031 VOL: 0
;
;
;void Hex(unsigned char Val)
; 0000 0046 {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0047     unsigned char Data;
; 0000 0048     Data = Val;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;	Val -> Y+1
;	Data -> R17
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0049     LData = Data;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004A     Data = (Data>>4) &0x0f;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004B     if(Data>9) {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004C         Data += 0x37;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004D     }
; 0000 004E     else {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004F         Data += 0x30;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0050     }
;PCODE: $00000046 VOL: 0
; 0000 0051     putch(Data);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0052     Data = LData & 0x0f;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0053     if(Data>9) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0054         Data += 0x37;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0055     }
; 0000 0056     else {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0057         Data += 0x30;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0058     }
;PCODE: $00000055 VOL: 0
; 0000 0059     putch(Data);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005A }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;
;void MUX_input()
; 0000 005E {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005F     ADMUX &= 0xe0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0060     ADMUX = 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0061     ADCSRA |= 0x40;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0062 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;void Action()
; 0000 0065 {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0066   unsigned char FirstData;
; 0000 0067   //putch(adc[0]);
; 0000 0068   FirstData = adc[0];
;PCODE: $0000006A VOL: 0
;	FirstData -> R17
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0069   delay_ms(30);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 006A   Hex(adc[0]);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 006B   putch(0x20);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006C   DisCnt++;
;PCODE: $00000074 VOL: 0
; 0000 006D   if(DisCnt==16) {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006E     putch(0x0d);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006F     putch(0x0a);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0070     DisCnt=0;
;PCODE: $0000007C VOL: 0
; 0000 0071   }
; 0000 0072 
; 0000 0073 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;
;
;void main(void)
; 0000 0078 {
;PCODE: $00000081 VOL: 0
; 0000 0079 // Declare your local variables here
; 0000 007A     //  char data = 0;
; 0000 007B       UCSR0A = 0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007C       UCSR0B = 0x18;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007D       UCSR0C = 0x06;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 007E       UBRR0H = 0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 007F       UBRR0L = 0x67;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0080 
; 0000 0081 
; 0000 0082 
; 0000 0083 // Input/Output Ports initialization
; 0000 0084 // Port A initialization
; 0000 0085 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0086 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0087 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0088 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0089 
; 0000 008A // Port B initialization
; 0000 008B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008C DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 008E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008F 
; 0000 0090 // Port C initialization
; 0000 0091 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0092 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0093 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0094 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0095 
; 0000 0096 // Port D initialization
; 0000 0097 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0098 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0099 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 009A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 009B 
; 0000 009C // Port E initialization
; 0000 009D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 009E DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A0 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A1 
; 0000 00A2 // Port F initialization
; 0000 00A3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A4 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A6 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00A7 
; 0000 00A8 // Port G initialization
; 0000 00A9 // Function: Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00AA DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00AB // State: Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00AC PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AD 
; 0000 00AE // Timer/Counter 0 initialization
; 0000 00AF // Clock source: System Clock
; 0000 00B0 // Clock value: Timer 0 Stopped
; 0000 00B1 // Mode: Normal top=0xFF
; 0000 00B2 // OC0 output: Disconnected
; 0000 00B3 ASSR=0<<AS0;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B4 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00B5 TCNT0=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B6 OCR0=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B7 
; 0000 00B8 // Timer/Counter 1 initialization
; 0000 00B9 // Clock source: System Clock
; 0000 00BA // Clock value: Timer1 Stopped
; 0000 00BB // Mode: Normal top=0xFFFF
; 0000 00BC // OC1A output: Disconnected
; 0000 00BD // OC1B output: Disconnected
; 0000 00BE // OC1C output: Disconnected
; 0000 00BF // Noise Canceler: Off
; 0000 00C0 // Input Capture on Falling Edge
; 0000 00C1 // Timer1 Overflow Interrupt: Off
; 0000 00C2 // Input Capture Interrupt: Off
; 0000 00C3 // Compare A Match Interrupt: Off
; 0000 00C4 // Compare B Match Interrupt: Off
; 0000 00C5 // Compare C Match Interrupt: Off
; 0000 00C6 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00C7 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00C8 TCNT1H=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00C9 TCNT1L=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00CA ICR1H=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00CB ICR1L=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00CC OCR1AH=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CD OCR1AL=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CE OCR1BH=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CF OCR1BL=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D0 OCR1CH=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D1 OCR1CL=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D2 
; 0000 00D3 // Timer/Counter 2 initialization
; 0000 00D4 // Clock source: System Clock
; 0000 00D5 // Clock value: Timer2 Stopped
; 0000 00D6 // Mode: Normal top=0xFF
; 0000 00D7 // OC2 output: Disconnected
; 0000 00D8 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D9 TCNT2=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00DA OCR2=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00DB 
; 0000 00DC // Timer/Counter 3 initialization
; 0000 00DD // Clock source: System Clock
; 0000 00DE // Clock value: Timer3 Stopped
; 0000 00DF // Mode: Normal top=0xFFFF
; 0000 00E0 // OC3A output: Disconnected
; 0000 00E1 // OC3B output: Disconnected
; 0000 00E2 // OC3C output: Disconnected
; 0000 00E3 // Noise Canceler: Off
; 0000 00E4 // Input Capture on Falling Edge
; 0000 00E5 // Timer3 Overflow Interrupt: Off
; 0000 00E6 // Input Capture Interrupt: Off
; 0000 00E7 // Compare A Match Interrupt: Off
; 0000 00E8 // Compare B Match Interrupt: Off
; 0000 00E9 // Compare C Match Interrupt: Off
; 0000 00EA TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00EB TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00EC TCNT3H=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00ED TCNT3L=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00EE ICR3H=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00EF ICR3L=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F0 OCR3AH=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F1 OCR3AL=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F2 OCR3BH=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F3 OCR3BL=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F4 OCR3CH=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00F5 OCR3CL=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F6 
; 0000 00F7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F8 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00F9 
; 0000 00FA ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00FB 
; 0000 00FC // External Interrupt(s) initialization
; 0000 00FD // INT0: Off
; 0000 00FE // INT1: Off
; 0000 00FF // INT2: Off
; 0000 0100 // INT3: Off
; 0000 0101 // INT4: Off
; 0000 0102 // INT5: Off
; 0000 0103 // INT6: Off
; 0000 0104 // INT7: Off
; 0000 0105 EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0106 EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0107 EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0108 
; 0000 0109 // USART0 initialization
; 0000 010A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 010B // USART0 Receiver: On
; 0000 010C // USART0 Transmitter: On
; 0000 010D // USART0 Mode: Asynchronous
; 0000 010E // USART0 Baud Rate: 9600
; 0000 010F UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0110 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0111 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0112 UBRR0H=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0113 UBRR0L=0x67;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0114 
; 0000 0115 // USART1 initialization
; 0000 0116 // USART1 disabled
; 0000 0117 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0118 
; 0000 0119 // Analog Comparator initialization
; 0000 011A // Analog Comparator: Off
; 0000 011B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 011C 
; 0000 011D // ADC initialization
; 0000 011E // ADC Clock frequency: 125.000 kHz
; 0000 011F // ADC Voltage Reference: AREF pin
; 0000 0120 ADMUX=ADC_VREF_TYPE;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0121 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0122 //SFIOR=;
; 0000 0123 
; 0000 0124 // SPI initialization
; 0000 0125 // SPI disabled
; 0000 0126 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0127 
; 0000 0128 // TWI initialization
; 0000 0129 // TWI disabled
; 0000 012A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 012B 
; 0000 012C // Global enable interrupts
; 0000 012D #asm("sei")
;PCODE: $00000106 VOL: 0
	sei
;PCODE: $00000107 VOL: 0
; 0000 012E 
; 0000 012F PORTC = 0xff;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0130 
; 0000 0131 while (1)
;PCODE: $0000010A VOL: 0
; 0000 0132       {
; 0000 0133       // Place your code here
; 0000 0134 
; 0000 0135         MUX_input();
;PCODE: $0000010B VOL: 0
; 0000 0136         Action();
;PCODE: $0000010C VOL: 0
; 0000 0137         delay_ms(30);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0138 
; 0000 0139       }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 013A }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0

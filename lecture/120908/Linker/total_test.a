;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 2012-09-08
;Author  : jung wook, shin
;Company : dnpsys
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;//------------------------------------------------------
;// LED Control¿ª ¿ß«— LED Pattern Table
;//
;//------------------------------------------------------
;unsigned char pattern_table[] = {
;0x7F, /* 01111111 */
;0x3F, /* 00111111 */
;0x1F, /* 00011111 */
;0x8F, /* 10001111 */
;0xC7, /* 11000111 */
;0xE3, /* 11100011 */
;0xF1, /* 11110001 */
;0xF8, /* 11111000 */
;0xFC, /* 11111100 */
;0xFE, /* 11111110 */
;0xFC, /* 11111100 */
;0xF8, /* 11111000 */
;0xF1, /* 11110001 */
;0xE3, /* 11100011 */
;0xC7, /* 11000111 */
;0x8F, /* 10001111 */
;0x1F, /* 00011111 */
;0x3F, /* 00111111 */
;255};

	.DSEG
;
;unsigned char delay_table[] = {
;90,
;70,
;50,
;40,
;40,
;40,
;40,
;50,
;70,
;90,
;70,
;50,
;40,
;40,
;40,
;40,
;50,
;70,
;0};
;
;unsigned char LedCnt=0;
;
;//------------------ 7-Segment Definition
;unsigned char FndDef[10] = { 0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f };
;
;unsigned int Cnt;
;
;unsigned char TotalFlag;
;
;unsigned int AdcVal;
;
;#define BIT_SET(ADDRESS,BIT)    (ADDRESS |= (1<<BIT))
;#define BIT_CLR(ADDRESS,BIT)    (ADDRESS &= ~(1<<BIT))
;
;unsigned int adc[1];
;
;
;int TimerCnt=0;
;unsigned char RDPortVal;
;
;unsigned char RDPortVal2;
;
;unsigned char ComVal;
;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0065 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0066 // Place your code here
; 0000 0067 	TotalFlag = 0;
;PCODE: $0000000F VOL: 0
; 0000 0068 
; 0000 0069 
; 0000 006A }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 006E {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 006F // Place your code here
; 0000 0070 	TotalFlag = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0071 
; 0000 0072 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 00A5 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 00A6 char status,data;
; 0000 00A7 status=UCSR0A;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 00A8 data=UDR0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 00A9 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 00AA    {
; 0000 00AB    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 00AC #if RX_BUFFER_SIZE0 == 256
; 0000 00AD    // special case for receiver buffer size=256
; 0000 00AE    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 00AF #else
; 0000 00B0    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 00B1    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 00B2       {
; 0000 00B3       rx_counter0=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 00B4       rx_buffer_overflow0=1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00B5       }
; 0000 00B6 #endif
; 0000 00B7    }
;PCODE: $0000003C VOL: 0
; 0000 00B8 
; 0000 00B9    ComVal = data;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00BA }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00C1 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00C2 char data;
; 0000 00C3 while (rx_counter0==0);
;PCODE: $00000046 VOL: 0
;	data -> R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00C4 data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00C5 #if RX_BUFFER_SIZE0 != 256
; 0000 00C6 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00C7 #endif
; 0000 00C8 #asm("cli")
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
	cli
;PCODE: $0000005B VOL: 0
; 0000 00C9 --rx_counter0;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00CA #asm("sei")
;PCODE: $0000005F VOL: 0
	sei
;PCODE: $00000060 VOL: 0
; 0000 00CB return data;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00CC }
;PCODE: $00000064 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 00DC {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00DD if (tx_counter0)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00DE    {
; 0000 00DF    --tx_counter0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00E0    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00E1 #if TX_BUFFER_SIZE0 != 256
; 0000 00E2    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00E3 #endif
; 0000 00E4    }
;PCODE: $0000007A VOL: 0
; 0000 00E5 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00EC {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00ED while (tx_counter0 == TX_BUFFER_SIZE0);
;PCODE: $00000081 VOL: 0
;	c -> Y+0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00EE #asm("cli")
;PCODE: $00000088 VOL: 0
	cli
;PCODE: $00000089 VOL: 0
; 0000 00EF if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00F0    {
; 0000 00F1    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00F2 #if TX_BUFFER_SIZE0 != 256
; 0000 00F3    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00F4 #endif
; 0000 00F5    ++tx_counter0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00F6    }
; 0000 00F7 else
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00F8    UDR0=c;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00F9 #asm("sei")
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
	sei
;PCODE: $000000A9 VOL: 0
; 0000 00FA }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0105 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0106 // Place your code here
; 0000 0107 //	 if(TotalFlag == 0) {
; 0000 0108 
; 0000 0109 //	 	TCNT1 = 49911;
; 0000 010A //   	PORTA = ~FndDef[Cnt++];
; 0000 010B //   	if(Cnt==10) Cnt=0;
; 0000 010C //   }
; 0000 010D   RDPortVal = (PINB & 0xfd) | (PING & 0x02);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 010E   RDPortVal2 = (PINE & 0xf0);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 010F   TCNT1 = 63536;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0110   if(++TimerCnt>=1000) {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0111     PORTA = ~FndDef[Cnt++];
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0112     if(Cnt==10) Cnt = 0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0113     TimerCnt = 0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0114   }
; 0000 0115 
; 0000 0116 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;
;#define ADC_VREF_TYPE 0x00
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 011C {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 011D unsigned int adc_data;
; 0000 011E // Read the AD conversion result
; 0000 011F adc_data=ADCW;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;	adc_data -> R16,R17
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0120 // Place your code here
; 0000 0121 adc[0] = adc_data;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0122 
; 0000 0123 
; 0000 0124 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;
;void MUX_input()
; 0000 0127 {
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0128     ADMUX &= 0xe0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0129     ADMUX = 1;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 012A     ADCSRA |= 0x40;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 012B }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;
;void Action()
; 0000 012E {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 012F   unsigned char FirstData;
; 0000 0130   //putch(adc[0]);
; 0000 0131   FirstData = adc[0];
;PCODE: $000000EB VOL: 0
;	FirstData -> R17
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0132   delay_ms(30);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0133   AdcVal = adc[0];
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0134 
; 0000 0135 
; 0000 0136 }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 013B {
;PCODE: $000000F6 VOL: 0
; 0000 013C // Declare your local variables here
; 0000 013D 
; 0000 013E // Input/Output Ports initialization
; 0000 013F // Port A initialization
; 0000 0140 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0141 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0142 PORTA=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0143 DDRA=0xFF;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0144 
; 0000 0145 // Port B initialization
; 0000 0146 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0147 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0148 PORTB=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0149 DDRB=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 014A 
; 0000 014B // Port C initialization
; 0000 014C // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 014D // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 014E PORTC=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 014F DDRC=0xFF;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0150 
; 0000 0151 // Port D initialization
; 0000 0152 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0153 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0154 PORTD=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0155 DDRD=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0156 
; 0000 0157 // Port E initialization
; 0000 0158 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0159 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 015A PORTE=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 015B DDRE=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 015C 
; 0000 015D // Port F initialization
; 0000 015E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 015F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0160 PORTF=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0161 DDRF=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0162 
; 0000 0163 // Port G initialization
; 0000 0164 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0165 // State4=T State3=T State2=T State1=T State0=T
; 0000 0166 PORTG=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0167 DDRG=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0168 
; 0000 0169 // Timer/Counter 0 initialization
; 0000 016A // Clock source: System Clock
; 0000 016B // Clock value: Timer 0 Stopped
; 0000 016C // Mode: Normal top=0xFF
; 0000 016D // OC0 output: Disconnected
; 0000 016E ASSR=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 016F TCCR0=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0170 TCNT0=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0171 OCR0=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0172 
; 0000 0173 // Timer/Counter 1 initialization
; 0000 0174 // Clock source: System Clock
; 0000 0175 // Clock value: 15.625 kHz
; 0000 0176 // Mode: Normal top=0xFFFF
; 0000 0177 // OC1A output: Discon.
; 0000 0178 // OC1B output: Discon.
; 0000 0179 // OC1C output: Discon.
; 0000 017A // Noise Canceler: Off
; 0000 017B // Input Capture on Falling Edge
; 0000 017C // Timer1 Overflow Interrupt: On
; 0000 017D // Input Capture Interrupt: Off
; 0000 017E // Compare A Match Interrupt: Off
; 0000 017F // Compare B Match Interrupt: Off
; 0000 0180 // Compare C Match Interrupt: Off
; 0000 0181 TCCR1A=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0182 //TCCR1B=0x05;
; 0000 0183 
; 0000 0184 TCCR1B = 2;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0185 TIMSK = 4;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0186 
; 0000 0187 TCNT1H=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0188 TCNT1L=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0189 ICR1H=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 018A ICR1L=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 018B OCR1AH=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 018C OCR1AL=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 018D OCR1BH=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 018E OCR1BL=0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 018F OCR1CH=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0190 OCR1CL=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0191 
; 0000 0192 // Timer/Counter 2 initialization
; 0000 0193 // Clock source: System Clock
; 0000 0194 // Clock value: Timer2 Stopped
; 0000 0195 // Mode: Normal top=0xFF
; 0000 0196 // OC2 output: Disconnected
; 0000 0197 TCCR2=0x00;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0198 TCNT2=0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0199 OCR2=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 019A 
; 0000 019B // Timer/Counter 3 initialization
; 0000 019C // Clock source: System Clock
; 0000 019D // Clock value: Timer3 Stopped
; 0000 019E // Mode: Normal top=0xFFFF
; 0000 019F // OC3A output: Discon.
; 0000 01A0 // OC3B output: Discon.
; 0000 01A1 // OC3C output: Discon.
; 0000 01A2 // Noise Canceler: Off
; 0000 01A3 // Input Capture on Falling Edge
; 0000 01A4 // Timer3 Overflow Interrupt: Off
; 0000 01A5 // Input Capture Interrupt: Off
; 0000 01A6 // Compare A Match Interrupt: Off
; 0000 01A7 // Compare B Match Interrupt: Off
; 0000 01A8 // Compare C Match Interrupt: Off
; 0000 01A9 TCCR3A=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 01AA TCCR3B=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 01AB TCNT3H=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 01AC TCNT3L=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 01AD ICR3H=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 01AE ICR3L=0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 01AF OCR3AH=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 01B0 OCR3AL=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 01B1 OCR3BH=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 01B2 OCR3BL=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 01B3 OCR3CH=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 01B4 OCR3CL=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 01B5 
; 0000 01B6 // External Interrupt(s) initialization
; 0000 01B7 // INT0: On
; 0000 01B8 // INT0 Mode: Falling Edge
; 0000 01B9 // INT1: On
; 0000 01BA // INT1 Mode: Falling Edge
; 0000 01BB // INT2: Off
; 0000 01BC // INT3: Off
; 0000 01BD // INT4: Off
; 0000 01BE // INT5: Off
; 0000 01BF // INT6: Off
; 0000 01C0 // INT7: Off
; 0000 01C1 EICRA=0x0A;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 01C2 EICRB=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 01C3 EIMSK=0x03;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 01C4 EIFR=0x03;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 01C5 
; 0000 01C6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01C7 TIMSK=0x04;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 01C8 
; 0000 01C9 ETIMSK=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 01CA 
; 0000 01CB // USART0 initialization
; 0000 01CC // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01CD // USART0 Receiver: On
; 0000 01CE // USART0 Transmitter: On
; 0000 01CF // USART0 Mode: Asynchronous
; 0000 01D0 // USART0 Baud Rate: 9600
; 0000 01D1 UCSR0A=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 01D2 UCSR0B=0xD8;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 01D3 UCSR0C=0x06;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 01D4 UBRR0H=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 01D5 UBRR0L=0x67;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 01D6 
; 0000 01D7 // USART1 initialization
; 0000 01D8 // USART1 disabled
; 0000 01D9 UCSR1B=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 01DA 
; 0000 01DB // Analog Comparator initialization
; 0000 01DC // Analog Comparator: Off
; 0000 01DD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01DE ACSR=0x80;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 01DF SFIOR=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 01E0 
; 0000 01E1 // ADC initialization
; 0000 01E2 // ADC Clock frequency: 125.000 kHz
; 0000 01E3 // ADC Voltage Reference: AREF pin
; 0000 01E4 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 01E5 ADCSRA=0x8F;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 01E6 
; 0000 01E7 // SPI initialization
; 0000 01E8 // SPI disabled
; 0000 01E9 SPCR=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 01EA 
; 0000 01EB // TWI initialization
; 0000 01EC // TWI disabled
; 0000 01ED TWCR=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 01EE 
; 0000 01EF // Global enable interrupts
; 0000 01F0 #asm("sei")
;PCODE: $00000177 VOL: 0
	sei
;PCODE: $00000178 VOL: 0
; 0000 01F1 
; 0000 01F2 
; 0000 01F3 PORTC = 0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 01F4 delay_ms(1000);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 01F5 PORTC = 0xff;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 01F6 delay_ms(1000);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 01F7 TotalFlag = 0;
;PCODE: $00000181 VOL: 0
; 0000 01F8 
; 0000 01F9 
; 0000 01FA 
; 0000 01FB while (1)
;PCODE: $00000182 VOL: 0
; 0000 01FC       {
; 0000 01FD 
; 0000 01FE       MUX_input();
;PCODE: $00000183 VOL: 0
; 0000 01FF       Action();
;PCODE: $00000184 VOL: 0
; 0000 0200       // Place your code here
; 0000 0201         if(TotalFlag == 0) {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0202 				 if (delay_table[LedCnt] > 0) {
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0203 						PORTC = pattern_table[LedCnt];
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0204 						delay_ms(delay_table[LedCnt]);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0205 						LedCnt++;
;PCODE: $00000198 VOL: 0
; 0000 0206 				}
; 0000 0207 				else{
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0208 						LedCnt = 0;
;PCODE: $0000019B VOL: 0
; 0000 0209 				}
;PCODE: $0000019C VOL: 0
; 0000 020A 		}
; 0000 020B         else if (TotalFlag == 2) {
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 020C             putchar(AdcVal);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 020D         }
; 0000 020E         else {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 020F                 PORTC = RDPortVal;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0210         }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0211 
; 0000 0212 
; 0000 0213         switch(ComVal) {
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0214             case 0x30 :
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0215             	TCCR1B = 0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0216               PORTA = ~FndDef[0];
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0217               PORTC = ~0x00;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0218               TotalFlag = 1;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0219               break;
;PCODE: $000001B7 VOL: 0
; 0000 021A             case 0x31 :
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 021B               TCCR1B = 0;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 021C               PORTA = ~FndDef[1];
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 021D               PORTC = ~0x01;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 021E               TotalFlag = 1;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 021F               break;
;PCODE: $000001C5 VOL: 0
; 0000 0220             case 0x32 :
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0221             	TCCR1B = 0;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0222               PORTA = ~FndDef[2];
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0223               PORTC = ~0x02;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0224               TotalFlag = 1;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0225               break;
;PCODE: $000001D3 VOL: 0
; 0000 0226             case 0x33 :
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0227             	TCCR1B = 0;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0228               PORTA = ~FndDef[3];
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0229               PORTC = ~0x03;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 022A               TotalFlag = 1;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 022B               break;
;PCODE: $000001E1 VOL: 0
; 0000 022C             case 0x34 :
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 022D             	TCCR1B = 0;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 022E               PORTA = ~FndDef[4];
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 022F               PORTC = ~0x04;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0230               TotalFlag = 1;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0231               break;
;PCODE: $000001EF VOL: 0
; 0000 0232             case 0x35 :
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0233             	TCCR1B = 0;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0234               PORTA = ~FndDef[5];
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0235               PORTC = ~0x05;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0236               TotalFlag = 1;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0237               break;
;PCODE: $000001FD VOL: 0
; 0000 0238             case 0x36 :
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0239             	TCCR1B = 0;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 023A               PORTA = ~FndDef[6];
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 023B               PORTC = ~0x06;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 023C               TotalFlag = 1;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 023D               break;
;PCODE: $0000020B VOL: 0
; 0000 023E             case 0x37 :
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 023F             	TCCR1B = 0;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0240               PORTA = ~FndDef[7];
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0241               PORTC = ~0x07;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0242               TotalFlag = 1;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0243               break;
;PCODE: $00000219 VOL: 0
; 0000 0244             case 0x38 :
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0245             	TCCR1B = 0;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0246               PORTA = ~FndDef[8];
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0247               PORTC = ~0x08;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0248               TotalFlag = 1;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0249               break;
;PCODE: $00000227 VOL: 0
; 0000 024A             case 0x39 :
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 024B             	TCCR1B = 0;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 024C               PORTA = ~FndDef[9];
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 024D               PORTC = ~0x09;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 024E               TotalFlag = 1;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 024F               break;
;PCODE: $00000235 VOL: 0
; 0000 0250             case 'a' :
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0251                 TCCR1B = 2;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0252                 PORTC = AdcVal;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0253                 TotalFlag = 1;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0254                 break;
;PCODE: $0000023F VOL: 0
; 0000 0255             case 'b' :
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0256                 TotalFlag = 2;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0257                 break;
;PCODE: $00000245 VOL: 0
; 0000 0258             default :
;PCODE: $00000246 VOL: 0
; 0000 0259             	TCCR1B = 2;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 025A                 break;
;PCODE: $00000249 VOL: 0
; 0000 025B             }
;PCODE: $0000024A VOL: 0
; 0000 025C 
; 0000 025D       }
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 025E }
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0

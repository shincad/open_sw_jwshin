	.PROGRAM	sysdp3l
	.HEADING	"M4324 DATA PROCESS PASS 3 LIBRARY MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 DATA PROCESS PASS 3 LIBRARY MODULE	*
;							*
;	FILE NAME	SYSDP3L.MAR			*
;	CREATED 	05/JUL/1991			*
;							*
;********************************************************
;
	.EXPORT 	DP3LI, CMDCAN,CHKCAN,SETECD,SETECE
	.EXPORT 	SELPMS,SELPMF,SELPMB,SELPMA,RETPM, CHKPM
	.EXPORT 	SETPMS,SETPMF,SETPMB,SETPMA,SETPHM,CLRPHM
	.EXPORT 	SETCM1,SETCM2,UPSEQ, SENDC1,SENDC2,SENDC3,SENDP
	.EXPORT 	CRINI, CRHM,  CRHS,  CRCL,  CRP1,  CRP2,  CRMV
	.EXPORT 	CRMVX, CRESC, CRCHK, CRMVPR
	.EXPORT 	HSPH,  HSINI, HSOP,  HSMVP, HSMV,  HSPUSH,HSPU,  HSPOS
	.EXPORT 	RSINI, RSHM,  RSESC, RSMV,  RSMV1,  RSMVX
	.EXPORT 	GETRSA,SETRSH,RSADJ
	.EXPORT 	PBINI, PBCL,  PBCL1, PBOP,  PBHO
	.EXPORT 	LVPM,  LVFM,  LVSH,  LFPO
	.EXPORT 	LFF1,  LFF2,  LFFW,  LFR1,  LFR2,  LFRW
	.EXPORT 	SETLF1,SETLF2,SETLF3,SETLF4,SETLF5,SETLFS
	.EXPORT 	GETBLC,GETPE2,GETEJF,GETEJB,GETEJS
	.EXPORT 	ESCF,  EJCF,  EJCB,  EJCA,  EJCS
	.EXPORT 	INSF,  INS2,  INSA,  INI2,  INIA
	.EXPORT 	PCLK,  SELPRB,GAINI, DTOPC, DTPAV

	.IMPORT 	ZCRP1, ZCRP2, ZLFN1, ZLFN2, ZLFN3, ZBLN1, ZBLN2
	.IMPORT 	ZLFSPO,ZPE2N, ZFET1, ZFET2
	.IMPORT 	ZEJN1, ZEJN2, ZEJN3, ZEJN4, ZEJN5, ZEJN6
	.IMPORT 	ZEJFN, ZEJBN, ZEJSN
	.IMPORT 	ZINFN, ZIN2N, ZINAN, ZI2N1, ZIAN1, ZIAN2
	.IMPORT 	CMDBF, LFSTB1,LFSTB2,LFSTB3,LFSTB4,LFSTB5
	.IMPORT 	GAHDTB,PRATB
	.IMPORT 	UPCRDC,CHKRBW,WTCMDE,WTACTF,WTESCE,WTPRTF

	.INCLUDE	"COMMON.H"
	.INCLUDE	"M43RTM.H"
	.INCLUDE	"ALARM.H"
	.INCLUDE	"SLVRAM.H"
	.INCLUDE	"SLVCMD.H"
	.INCLUDE	"SCIIOS.H"
	.INCLUDE	"SYSEEP.H"
	.INCLUDE	"GAHEAD.H"
	.INCLUDE	"SYSDP3.H"
	.INCLUDE	"SYSRAM.H"
	.PAGE
;	.SECTION	SYSRAM,DUMMY,LOCATE=H'FEC0
;
;	SYSDP3L LOCAL WORK AREA
;
	.ORG	H'FEDC
CRPC:	.RES.W	  1			; CR POSITION COUNTER
CMDF:	.RES.B	  1			; COMMAND FORMAT FLAG
;	.EQU	0->1			;     SEQUENCE NO.
QDATA:	.EQU	  2			;   1:DATA
QERCHK: .EQU	  3			;   1:NO PE CHECK
;	.EQU	  4			;
QPAMD1: .EQU	  5			;     PAPER MODE BIT 1
QPAMD2: .EQU	  6			;     PAPER MODE BIT 2
QPAMD3: .EQU	  7			;   1:PAPER HOTCHKISS MODE
XPAMD1: .EQU	H'20                    ;
XPAMD2: .EQU	H'40                    ;
XPAMD3: .EQU	H'80                    ;
ZPAMD:	.EQU	XPAMD3+XPAMD2+XPAMD1	;     PAPER MODE MASK

CRPBF:	.RES.B	  1			; CR/PAPER BAIL STATUS FLAG
QCRHM:	.EQU	  0			;   1:CR HOME
QCRHS:	.EQU	  1			;   1:CR HEAD SHIFT POSITION
QCRP1:	.EQU	  2			;   1:CR POSITION 1
QCRP2:	.EQU	  3			;   1:CR POSITION 2
QCRESC: .EQU	  4			;   1:CR ESCAPE REQUEST
QPBOP:	.EQU	  5			;   1:PAPER BAIL OPEN
QRSHM:	.EQU	  6			;   1:RIBBON SHIFT HOME POISTION
QRSESC: .EQU	  7			;   1:RIBBON SHIFT ESCAPE POSITION

RSHMS:	.RES.B	  1			; RIBBON SHIFT HOME POSITION SAVE
	.PAGE
	.SECTION	SYS2,CODE,ALIGN=16
;
;	INITIALIZE DP3L
;
;	IN	NONE
;
;	OUT	NONE
;
DP3LI:	BSR	SETECD			; SET PE CHECK DISABLE
	MOV.B	#0,R1			;
	BRA	SETRSH:16		; RESET RIBBON SHIFT HOME POSITION

;
;	CANCEL COMMAND
;
;	IN	NONE
;
;	OUT	NONE
;
CMDCAN: BCLR.B	#QCCANE,@PRLFF:8	; RESET CANCEL ENABLE
	BEQ	CMDC_1			; BR IF NOT CANCEL ENABLE
	CALIOS	#SCICAN 		; CANCEL COMMAND EXECUTION
CMDC_1: RTS				;

;
;	CHECK COMMAND CANCEL STATUS
;
;	IN	NONE
;
;	OUT	 Z : 0=COMMAND CANCEL
;
CHKCAN: BCLR.B	#QCCANS,@PRLFF:8	; RESET COMMAND CANCEL SEND
	BEQ	CHKC_1			; BR IF NOT CANCEL SEND
	CALIOS	#SCICLC 		; CLEAR COMMAND CANCEL FLAG
CHKC_1: BCLR.B	#QCCAND,@PRLFF:8	; RESET COMMAND CANCEL DONE STATUS
	RTS				;
;
;	SET PE CHECK DISABLE/ENEBLE
;
;	IN	NONE
;
;	OUT	NONE
;
SETECD: BSET.B	#QERCHK,@CMDF:8 	; SET PE CHECK DISABLE
	RTS				;

SETECE: BCLR.B	#QERCHK,@CMDF:8 	; SET PE CHECK ENABLE
	RTS				;
	.PAGE
;
;	SET PAPER MODE
;
;	IN	NONE
;
;	OUT	NONE
;
SELPMS: MOV.B	@CMDF:8,R3		;
	AND.B	#ZPAMD,R3		; SAVE CURRENT PAPER MODE
SETPMS: BCLR.B	#QPAMD1,@CMDF:8 	;
	BCLR.B	#QPAMD2,@CMDF:8 	; SET SHEET MODE
	BCLR.B	#QPAMD3,@CMDF:8 	;
	RTS				;

SELPMF: MOV.B	@CMDF:8,R3		;
	AND.B	#ZPAMD,R3		; SAVE CURRENT PAPER MODE
SETPMF: BSET.B	#QPAMD1,@CMDF:8 	;
	BCLR.B	#QPAMD2,@CMDF:8 	; SET FORMS MODE
	BCLR.B	#QPAMD3,@CMDF:8 	;
	RTS				;

SELPMB: MOV.B	@CMDF:8,R3		;
	AND.B	#ZPAMD,R3		; SAVE CURRENT PAPER MODE
SETPMB: BCLR.B	#QPAMD1,@CMDF:8 	;
	BSET.B	#QPAMD2,@CMDF:8 	; SET BOTTOM MODE
	BCLR.B	#QPAMD3,@CMDF:8 	;
	RTS				;

SELPMA: MOV.B	@CMDF:8,R3		;
	AND.B	#ZPAMD,R3		; SAVE CURRENT PAPER MODE
SETPMA: BSET.B	#QPAMD1,@CMDF:8 	;
	BSET.B	#QPAMD2,@CMDF:8 	; SET ACSF MODE
	BCLR.B	#QPAMD3,@CMDF:8 	;
	RTS				;

RETPM:	MOV.B	@CMDF:8,R0		;
	AND.B	#ZN-ZPAMD,R0		;
	OR.B	R3,R0			; RETURN TO ORIGINAL PAPER MODE
	MOV.B	R0,@CMDF:8		;
	RTS				;
	.PAGE
;
;	CHECK PAPER MODE
;
;	IN	NONE
;
;	OUT	 Z : 1=BOTTOM MODE
;		 C : 1=FORMS MODE
;
CHKPM:	MOV.B	@CMDF:8,R1		;
	AND.B	#XPAMD2+XPAMD1,R1	; GET PAPER MODE
	BNE	CHKP_1			; BR IF NOT SHEET MODE
	MOV.B	#XPAMD2+XPAMD1,R1	;
CHKP_1: CMP.B	#XPAMD2,R1		; CHECK PAPER MODE
	RTS				;

;
;	SET/RESET/CHECK PAPER HOTCHKISS MODE
;
;	IN	NONE
;
;	OUT	NONE
;
SETPHM: BSET.B	#QPAMD3,@CMDF:8 	; SET PAPER HOTCHKISS MODE
	RTS				;

CLRPHM: BCLR.B	#QPAMD3,@CMDF:8 	; RESET PAPER HOTCHKISS MODE
	RTS				;
	.PAGE
;
;	SET COMMAND
;
;	IN	R0 : COMMAND NO. (= SLCOF)
;
;	OUT  R1-R4 : NOT CHANGE
;	     EP R5 : COMMAND BUFFER POINTER
;		FP : NOT CHANGE
;
SETCM1: BSR	UPSEQ1			; UPDATE SEQUENCE NO.
	BRA	SETC_1			; SET CMDFMT AND SLCOF

SETCM2: BSR	UPSEQ1			; UPDATE SEQUENCE NO.
	BSET.B	#QERCHK,R0		; SET ERROR CHECK DISABLE
SETC_1: SWAP	R0			; UNSAVE COMMAND NO.
	LDC.B	#PAGE CMDBF,EP		;
	MOV.W	#CMDBF,R5		; GET COMMAND BUFFER POINTER
	MOV.W	R0,@R5+ 		; SET CMDFMT AND SLCOF
	RTS				;

;
;	UPDATE COMMAND SEQUENCE NO.
;
;	IN	NONE
;
;	OUT	R0 : SEQUENCE NO.
;	     R1-FP : NOT CHANGE
;
UPSEQ1: SWAP	R0			; SAVE COMMAND NO.
UPSEQ:	MOV.B	@CMDF:8,R0		;
	ADD.B	#1,R0			; UPDATE SEQUENCE NO.
	BCLR.B	#QDATA,R0		;
	BEQ	UPSE_1			; BR IF NOT OVERFLOW
	ADD.B	#1,R0			; SKIP SEQUENCE NO. = 0
UPSE_1: MOV.B	R0,@CMDF:8		;
UPSE_2: BCLR.B	#QPAMD3,R0		; RESET PAPER HOTCHKISS FLAG
	RTS				;
	.PAGE
;
;	SEND COMMAND
;
;	IN   EP R5 : COMMAND END POINTER
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHANGE
;		 Z : 0=COMMAND CANCEL
;
SENDC1: MOV.W	#CMDBF,R4		; GET COMMAND BUFFER POINTER
	SUB.W	R4,R5			; CALCULATE COMMAND SIZE
	CALIOS	#SCICMD 		; SEND COMMAND
	RTS				;

SENDC2: BSR	SENDC1			; SEND COMMAND TO SLAVE CPU
	JMP	@WTCMDE 		; WAIT NEXT COMMAND TRANSMIT ENABLE

SENDC3: BSR	SENDC2			; SEND COMMAND TO SLAVE CPU
	JMP	@WTACTF 		; WAIT SLAVE CPU ACTION END

;
;	SEND PRINT COMMAND
;
;	IN	R0 : HEAD OUTPUT CONTROL
;	     EP R4 : COMMAND END POINTER
;		R5 : PRINT BUFFER FLAG/COMMAND SIZE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHANGE
;		 Z : 0=COMMAND CANCEL  (SENDC2,SENDC3)
;
SENDP:	MOV.B	R0,@OUTC		; ENABLE PRINT HEAD OUTPUT
	CALIOS	#SCIPRT 		; SEND PRINT COMMAND
	JSR	@WTCMDE 		; WAIT NEXT COMMAND TRANSMIT ENABLE
	BEQ	SEND_1			; BR IF NOT COMMAND ABORT
	CLR.B	@OUTC			; DISABLE PRINT HEAD OUTPUT
	MOV.B	#1,R0			; RESET Z-FLAG FOR CANCEL
SEND_1: RTS				;
	.PAGE
;
;	SEND CR MOVE TO SPECIAL POSITION COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHNAGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
CRHM:	BTST.B	#QCRHM,@CRPBF:8 	;
	BNE	CRHM_1			; BR IF ALREADY HOME POSITION
	MOV.W	#ZCRHM,R1		; SET CR HOME POSITION
	BSR	CRMV			; MOVE CR TO HOME POSITION
	BNE	CRHM_2			; BR IF COMMAND CANCEL
	BSET.B	#QCRHM,@CRPBF:8 	; SET CR HOME
CRHM_1: MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
CRHM_2: RTS				;

CRHS:	BTST.B	#QCRHS,@CRPBF:8 	;
	BNE	CRHS_1			; BR IF ALREADY CR HEAD SHIFT POS.
	MOV.W	@EEPBF+E2CRHS,R1	; SET CR POSITION AT HEAD SHIFT
	BSR	CRMV			; MOVE CR TO HEAD SHIFT POSITION
	BNE	CRHS_2			; BR IF COMMAND CANCEL
	BSET.B	#QCRHS,@CRPBF:8 	; SET CR HEAD SHIFT POSITION
CRHS_1: MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
CRHS_2: RTS				;

CRP1:	BTST.B	#QCRP1,@CRPBF:8 	;
	BNE	CRHS_1			; BR IF ALREADY CR POSITION 1
	MOV.W	#ZCRP1,R1		; SET CR POSITION 1
	BSR	CRMV			; MOVE CR TO POSITION 1
	BNE	CRHS_2			; BR IF COMMAND CANCEL
	BSET.B	#QCRP1,@CRPBF:8 	; SET CR POSITION 1
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;

CRP2:	BTST.B	#QCRP2,@CRPBF:8 	;
	BNE	CRHS_1			; BR IF ALREADY CR POSITION 2
	MOV.W	#ZCRP2,R1		; SET CR POSITION 2
	BSR	CRMV			; MOVE CR TO POSITION 1
	BNE	CRHS_2			; BR IF COMMAND CANCEL
	BSET.B	#QCRP2,@CRPBF:8 	; SET CR POSITION 2
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;
	.PAGE
;
;	SEND CR MOVE COMMAND
;
;	IN	R1 : TARGET CR POSITION
;
;	OUT  R2-R3 : NOT CHNAGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
CRCL:	MOV.W	#ZCRCL,R1		; SET HEAD COOLING POSITION
CRMV:	BSR	CRCHK			; CHECK RIBBON SHIFT/PAPER BAIL
	JSR	@UPCRDC 		; UP DATE CR DUTY COUNTER
	MOV.B	#ZCCRM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.B	#ZCRSPD,@R5+		; SET CR SPEED
	MOV.B	R1,@R5+ 		; SET TARGET CR POSITION
	SWAP	R1			;
	MOV.B	R1,@R5+ 		;
	SWAP	R1			;
	MOV.W	R1,@-SP 		; SAVE CR POSITION
	BSR	SENDC2			; SEND CR MOVE COMMAND
	BNE	CRMV_1			; BR IF COMMAND CANCEL
	MOV.W	@SP+,R1 		; UNSAVE CR POSITION
CRMVW:	MOV.W	R1,@CRPC:8		; SAVE CR POSITION
CRMVX:	BCLR.B	#QCRESC,@CRPBF:8	; RESET CR ESCAPE REQUEST
	BCLR.B	#QCRHM,@CRPBF:8 	; RESET CR HOME
	BCLR.B	#QCRHS,@CRPBF:8 	; RESET CR HEAD SHIFT POISTION
	BCLR.B	#QCRP1,@CRPBF:8 	; RESET CR HEAD SHIFT POISTION
	BCLR.B	#QCRP2,@CRPBF:8 	; RESET CR HEAD SHIFT POISTION
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;
					;
CRMV_1: MOV.W	@SP+,R1 		; UNSAVE CR POSITION
	MOV.B	#1,R0			; RESET Z-FLAG FOR NOT CANCEL
	RTS				;

;
;	CR MOVE BY PRINT
;
;	IN	R0 : PRINT START COLUMN
;		R1 : PRINT END	 COLUMN
;
;	OUT	R4 : CR PRE. MOVE DISTANCE BEFORE PRINT
;
CRMVPR: SHLR.W	R0			; /  2
	SHLR.W	R0			; /  4
	SHLR.W	R0			; /  8
	SHLR.W	R0			; / 16 CONVERT TO 1/90 INCH PITCH
	ADD.W	#256,R0 		; ADD PRINT 1ST COLUMN POSITION
	SHLR.W	R1			; /  2
	SHLR.W	R1			; /  4
	SHLR.W	R1			; /  8
	SHLR.W	R1			; / 16 CONVERT TO 1/90 INCH PITCH
	ADD.W	#256,R1 		; ADD PRINT 1ST COLUMN POSITION
	MOV.W	@CRPC:8,R4		;
	SUB.W	R0,R4			; CALCLATE CR PRE. MOVE DISTANCE
	BCC	CRMVW			; BR IF CR REVERSE MOVE
	NEG.W	R4			;ADJUST FOR FORWARD MOVE
	BRA	CRMVW			;
	.PAGE
;
;	SET CR ESCAPE REQUEST
;
;	IN	NONE
;
;	OUT	NONE
;
CRESC:	BSET.B	#QCRESC,@CRPBF:8	; SET CR ESCAPE REQUEST
	RTS				;

;
;	CHECK CR MOVE CONDITION
;
;	IN	NONE
;
;	OUT  R1-R3 : NOT CHANGE
;
CRCHK:	MOV.W	R1,@-SP 		;
	BTST.B	#QRSESC,@CRPBF:8	;
	BEQ	CRCH_1			; BR IF ALREADY ESCAPE POSITION
	BSR	RSHM:16 		; MOVE RIBBON SHIFT TO HOME
CRCH_1: BSR	PBCL:16 		; CLOSE PAPER BAIL
	MOV.W	@SP+,R1 		;
	RTS				;

;
;	SEND CR INITIALIZE COMMAND
;
;	IN	NONE
;
;	OUT	R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
CRINI:	JSR	@WTACTF 		; WAIT SLAVE CPU ACTION END
	BSR	CRCHK			; CHECK RIBBON SHIFT/PAPER BAIL
	MOV.B	#ZCCRI,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#ZFRMWX,R0		;
	SWAP	R0			;
	MOV.W	R0,@R5+ 		; SET FRAME WIDTH UPPER LIMIT
	MOV.W	#ZFRMWY,R0		;
	SWAP	R0			;
	MOV.W	R0,@R5+ 		; SET FRAME WIDTH LOWER LIMIT
	BSR	SENDC1			; SEND CR INITIALIZE COMMAND
	JSR	@CHKRBW 		; CHECK RIBBON WIND ALARM ERROR
	BNE	CRIN_1			; BR IF COMMAND CANCEL
	MOV.W	#ZCRHM,R1		; SET CR HOME POSITION
	MOV.W	R1,@CRPC:8		; SAVE CR POSITION
	BSET.B	#QCRHM,@CRPBF:8 	; SET CR HOME
	BCLR.B	#QCRHS,@CRPBF:8 	; RESET CR HEAD SHIFT POISTION
	BCLR.B	#QCRP1,@CRPBF:8 	; RESET CR HEAD SHIFT POISTION
	BCLR.B	#QCRP2,@CRPBF:8 	; RESET CR HEAD SHIFT POISTION
	BCLR.B	#QCRESC,@CRPBF:8	; RESET CR ESCAPE REQUEST
CRIN_1: JSR	@WTACTF 		; WAIT CR INITIALIZE END
	JMP	@WTACTF 		; RESET EVENT FLAG
	.PAGE
;
;	SEND HEAD SHIFT MOTOR PHASE COMMAND
;
;	IN	R1 : HEAD SHIFT MOTOR PAHSE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
HSPH:	MOV.B	#ZCHSH,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.B	R1,@R5+ 		; SET MOTOR PHASE
	MOV.B	#ZHSLKT,@R5+		; SET LOCK TIME
	BRA	SENDC2			; SEND HEAD SHIFT LOCK COMMAND

;
;	SEND HEAD SHIFT OPEN COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHNAGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
HSOP:	BTST.B	#QHSMV,@ERRSF:8 	;
	BNE	HSINI			; BR IF HEAD SHIFT MOVED
	MOV.W	@HSPC:8,R0		;
	BEQ	HSIN_2			; BR IF ALREADY OPEN
HSINI:	BSET.B	#QHSER,@ERRSF:8 	; SET ERROR RETRY FLAG
	BSR	HSIN_4			; SEND HEAD SHIFT OPEN COMMAND
	BNE	HSIN_3			; BR IF COMMAND CANCEL
	BCLR.B	#QHSER,@ERRSF:8 	;
	BNE	HSIN_1			; BR IF NOT OPEN ERROR
	MOV.W	R2,@-SP 		;\\920320
	MOV.W	#500/ZTI,R2		;\\
	WAITSK				;\\
	MOV.W	@SP+,R2 		;\\
	CALIOS	#SCICLE 		; RESET ERROR FLAG 1
	BSR	HSIN_4			; SEND HEAD SHIFT OPEN COMMAND
	BNE	HSIN_3			; BR IF COMMAND CANCEL
HSIN_1:
	MOV.W	R2,@-SP 		;\\920320
	MOV.W	#500/ZTI,R2		;\\
	WAITSK				;\\
	MOV.W	@SP+,R2 		;\\
	CALIOS	#SCICLE 		;\\
	BCLR.B	#QHSMV,@ERRSF:8 	; RESET HEAD SHIFT MOVED STATUS
	CLR.W	@HSPC:8 		; RESET HEAD SHIFT POSITION COUNTER
HSIN_2: MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;
					;
HSIN_3: BCLR.B	#QHSER,@ERRSF:8 	; RESET HEAD SHIFT ERROR RETRY
	MOV.B	#1,R0			; RESET Z-FLAG FOR CANCEL
	RTS				;
	;
HSIN_4: MOV.B	#ZCHSM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	CLR.W	@R5+			; SET HEAD SHIFT OPEN
	MOV.W	#ZHSSP1*ZH+ZHSLKT,@R5+	; SET SPEED AND LOCK TIME
	MOV.B	#ZHSDLY,@R5+		; SET DELAY TIME
	BRA	SENDC2			; SEND HEAD SHIFT MOVE COMMAND
	.PAGE
;
;	SEND HEAD SHIFT MOVE COMMAND
;
;	IN	R2 : TARGET POSITION
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
HSMVP:	BSR	HSMV			; ADJUST HEAD SHIFT POISTION
	BNE	HSMV_2			; BR IF COMMAND CANCEL
	CALIOS	#SCIHSP 		; READ HEAD SHIFT MOTOR PHASE
	BRA	HSMV_1			;

HSMV:	CMP.W	#ZHSMAX,R2		;
	BHI	HSERR			; BR IF TOO LARGE HS POSITION
	CMP.W	@HSPC:8,R2		;
	BEQ	HSMV_1			; BR IF SAME ADDRESS
	MOV.B	#ZCHSM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET TARGET POSITION
	SWAP	R2			;
	MOV.W	#ZHSSP2*ZH+ZHSLKT,@R5+	; SET SPEED AND LOCK TIME
	BSR	SENDC2			; SEND HEAD SHIFT MOVE COMMAND
	BNE	HSMV_2			; BR IF COMMAND CANCEL
	MOV.W	R2,@HSPC:8		; UPDATE HEAD SHIFT POSITION COUNTER
	BCLR.B	#QHSMV,@ERRSF:8 	; RESET HEAD SHIFT MOVED STATUS
HSMV_1: MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
HSMV_2: RTS				;
					;
HSERR:					;
	SETALM	#ZEHDS			; SET HEAD SHIFT ALARM ERROR
	RTS				;
	.PAGE
;
;	SEND HEAD SHIFT PUSH COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
HSPUSH: BSR	CRHS			; MOVE CR TO HEAD SHIFT POSITION
	BSR	RSESC:16		; MOVE RIBBON SHIFT TO ESCAPE POSITION
	BSR	HSOP			; OPEN HEAD SHIFT
HSPU:	MOV.B	#ZCHSP,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#ZHSSP3*ZH+ZHSLKT,@R5+	; SET SPEED AND LOCK TIME
	BSR	SENDC3			; SEND HEAD SHIFT PUSH COMMAND
	BNE	HSPU_1			; BR IF COMMAND CANCEL
	BCLR.B	#QHSMV,@ERRSF:8 	; RESET HEAD SHIFT MOVED STATUS
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
HSPU_1: RTS				;

;
;	SEND HEAD SHIFT POSTION CHECK COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
HSPOS:	MOV.B	#ZCHSPC,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#ZHSSP1*ZH+ZHSLKT,@R5+	; SET SPEED AND LOCK TIME
	MOV.B	#ZHSDLY,@R5+		; SET DELAY TIME
	BRA	SENDC3			; SEND HEAD SHIFT PUSH COMMAND
	.PAGE
;
;	GET RIBBON SHIFT PHYSICAL ADDRESS
;
;	IN	R3 : RIBBON SHIFT LOGICAL ADDRESS
;
;	OUT	R0 : RIBBON SHIFT PHYSICAL ADDRESS
;	     R1-FP : NOT CHNAGE
;
GETRSA: MOV.B	#ZRSHM,R0		; GET RIBBON SHIFT HOME ADDRESS
	SUB.B	R3,R0			; CALCULATE RIBBON SHIFT ADDRESS
	RTS				;

;
;	SET RIBBON SHIFT HOME POSITION
;
;	IN	R1 : RIBBON SHIFT HOME POSITION
;
;	OUT	R1 : ADJUSTED HOME POSITION
;	     R2-FP : NOT CHANGE
;
SETRSH: CMP.B	@RSHMS:8,R1		;
	BEQ	SETR_1			; BR IF SAME HOME POSITION
	BCLR.B	#QRSHM,@CRPBF:8 	; RESET RIBBON SHIFT HOME POSITION
SETR_1: MOV.B	R1,@RSHMS:8		; SET RIBBON SHIFT HOME POSITION
	RTS				;

;
;	SEND RIBBON SHIFT SPEED
;
;	IN	NONE
;
;	OUT	NONE
;
DTRSS1: MOV.B	#ZCDTA,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#1*ZH+RSSPD,R0		;
	MOV.W	R0,@R5+ 		; SET DATA COUNT, ADDRESS
	MOV.B	#ZRSSP1,@R5+		; SET RIBBON SPEED 1 (600pps)
	BRA	SENDC2			; SEND RIBBON SHIFT SPEED 1

DTRSS2: MOV.B	#ZCDTA,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#1*ZH+RSSPD,R0		;
	MOV.W	R0,@R5+ 		; SET DATA COUNT, ADDRESS
	MOV.B	#ZRSSP2,@R5+		; SET RIBBON SPEED 2 (400pps)
	BRA	SENDC2			; SEND RIBBON SHIFT SPEED 2
	.PAGE
;
;	SEND RIBBON SHIFT INITIALIZE COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
RSINI:	BSR	PBCL:16 		; CLOSE PAPER BAIL
	BSR	DTRSS2			; SEND RIBBON SPEED 2 (400pps)
	MOV.B	#ZCRSM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#ZRSP0,@R5+		; SET TARGET POSITION, MAX PULSE COUNT
	MOV.B	#ZRSP1,@R5+		; SET HOME POSITION PULSE COUNT
	BSR	SENDC2			; SEND RIBBON SHIFT INITIALIZE COMMAND
	BNE	DTRSS1			; BR IF COMMAND CANCEL
	BCLR.B	#QRSHM,@CRPBF:8 	; RESET RIBBON SHIFT HOME
	BCLR.B	#QRSESC,@CRPBF:8	; RESET CR ESCAPE POSITION
	BSR	DTRSS1			; SEND RIBBON SPEED 1 (600pps)
	BRA	RSHM			; RIBBON SHIFT TO HOME

;
;	ADJUST RIBBON SHIFT ADDRESS
;
;	IN	R1 : RIBBON SHIFT ADDRESS
;
;	OUT	R1 : RIBBON SHIFT ADDRESS
;	     R2-FP : NOT CHANGE
;
RSADJ:	MOV.B	@EEPBF+E2RBSA+1,R0	; GET RIBBON SHIFT ADJUST VALUE
	BPL	RSAD_1			; BR IF PLUS ADJUST VALUE
	BCLR.B	#QMSB,R0		; RESET SIGN BIT
	NEG.B	R0			; MAKE 2'S COMPLEMENT
RSAD_1: ADD.B	R0,R1			; ADJUST RIBBON SHIFT POSITION
	RTS				;
	.PAGE
;
;	SEND RIBBON SHIFT MOVE COMMAND
;
;	IN	R1 : TARGET POSITION
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
RSHM:	BTST.B	#QRSHM,@CRPBF:8 	;
	BNE	RSHM_1			; BR IF ALREADY HOME POSITION
	MOV.B	@RSHMS:8,R1		; SET RIBBON SHIFT HOME POSITION
	BEQ	RSHM_2			; BR IF NOT SET HOME POSITION
	BSR	RSMV			; MOVE RIBBON SHIFT TO HOME POSITION
	BNE	RSHM_2			; BR IF COMMAND CANCEL
	BSET.B	#QRSHM,@CRPBF:8 	; SET RIBBON SHIFT HOME POSITION
RSHM_1: MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
RSHM_2: RTS				;

RSESC:	BTST.B	#QRSESC,@CRPBF:8	;
	BNE	RSHM_1			; BR IF ALREADY ESCAPE POSITION
	BSR	DTRSS2			; SEND RIBBON SPEED 2 (400pps)
	MOV.B	#ZRSESC,R1		; SET RIBBON SHIFT ESCAPE POSITION
	BSR	RSMV			; MOVE RIBBON SHIFT TO HOME POSITION
	BNE	DTRSS1			; BR IF COMMAND CANCEL
	BSET.B	#QRSESC,@CRPBF:8	; SET RIBBON SHIFT ESCAPE POSITION
	BRA	DTRSS1			; SEND RIBBON SPEED 1 (600pps)

RSMV1:	BSR	DTRSS2			; SEND RIBBON SPEED 2 (400pps)
	MOV.B	#ZRSYL,R1		; SET RIBBON SHIFT YELLOW POSITION
	BSR	RSMV			;
	BRA	DTRSS1			; SEND RIBBON SPEED 1 (600pps)

RSMV:	MOV.W	R1,@-SP 		;
	BSR	PBCL			; CLOSE PAPER BAIL
	MOV.W	@SP+,R1 		;
	MOV.B	#ZCRSM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	BSR	RSADJ			; ADJUST RIBBON SHIFT ADDRESS
	MOV.B	R1,@R5+ 		; SET TARGET POSITION
	BSR	SENDC2			; SEND RIBBON SHIFT MOVE COMMAND
	BNE	RSHM_2			; BR IF COMMAND CANCEL
RSMVX:	BCLR.B	#QRSHM,@CRPBF:8 	; RESET RIBBON SHIFYT HOME
	BCLR.B	#QRSESC,@CRPBF:8	; RESET CR ESCAPE POSITION
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;
	.PAGE
;
;	SEND PAPER BAIL INITIALIZE COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
PBINI:	MOV.B	#ZCPBM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#ZLVSPD,@R5+		; SET TARGET POSITION AND SPPED
	MOV.W	#ZLVLKT*ZH+ZPBP0,@R5+	; SET LOCK TIME AND MAX PULSE COUNT
	MOV.B	#ZPBP1,@R5+		; SET HOME POSITION PULSE COUNT
	BSR	SENDC2			; SEND PAPER BAIL INITIALIZE COMMAND
	BNE	PBIN_1			; BR IF COMMAND CANCEL
	BCLR.B	#QPBOP,@CRPBF:8 	; RESET PAPER BAIL OPEN
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
PBIN_1: RTS				;
	.PAGE
;
;	SEND PAPER BAIL OPEN/CLOSE COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
PBCL0:	BSR	RSHM			; MOVE RIBBON SHIFT TO HOME POSITION
PBCL:	BTST.B	#QPBOP,@CRPBF:8 	;
	BEQ	PBCL_1			; BR IF ALREADY PAPER BAIL CLOSE
PBCL1:	MOV.B	#ZPBCL,R1		; SET LEVER HOME POSITION
	BSR	LVMV			; CLOSE PAPER BAIL
	BNE	PBCL_1			; BR IF COMMAND CANCEL
	BCLR.B	#QPBOP,@CRPBF:8 	; RESET PAPER BAIL OPEN
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
PBCL_1: RTS				; SEND LEVER MOVE COMMAND

PBOP:	BTST.B	#QPBOP,@CRPBF:8 	;
	BNE	PBOP_1			; BR IF ALREADY PAPER BAIL OPEN
	BSR	RSHM			; MOVE RIBBON SHIFT TO HOME POSITION
	BSR	CRHM			; MOVE CR TO HOME POSITION
	MOV.B	#ZPBOP,R1		; SET PAPER BAIL OPEN POSITION
	BSR	PBMV			; MOVE PAPER BAIL
	BNE	PBOP_2			; BR IF COMMAND CANCEL
	BSET.B	#QPBOP,@CRPBF:8 	; SET PAPER BAIL OPEN
PBOP_1: MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
PBOP_2: RTS				;
					;
PBMV:	MOV.B	#ZCPBM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.B	R1,@R5+ 		; SET TARGET POSITION
	MOV.B	#ZPBSPD,@R5+		; SET SPPED
	MOV.B	#ZPBLKT,@R5+		; SET LOCK TIME
	BRA	SENDC2			; SEND PAPER BAIL MOVE COMMAND

PBHO:	BSR	PBCL			; CLOSE PAPER BAIL
	MOV.B	#ZPBHO,R1		; SET PAPER BAIL HALF OPEN POSITION
	BRA	LVMV			;

LVHM:	MOV.B	#ZPBCL,R1		; SET LEVER HOME POSITION
LVMV:	MOV.B	#ZCPBM,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.B	R1,@R5+ 		; SET TARGET POSITION
	MOV.B	#ZLVSPD,@R5+		; SET SPPED
	MOV.B	#ZLVLKT,@R5+		; SET LOCK TIME
	BRA	SENDC2			; SEND LVER CHNAGE COMMAND
	.PAGE
;
;	CHANGE LEVER BY PAPER MODE
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
LVPM:	MOV.B	@CMDF:8,R0		; GET PAPER MODE
	AND.B	#XPAMD2+XPAMD1,R0	;
	CMP.B	#XPAMD1,R0		;
	BEQ	LVFM			; BR IF FORMS MODE
	CMP.B	#XPAMD2,R0		;
	BNE	LVSH			; BR IF NOT BOTTOM MODE
	BTST.B	#QBPES,@SNSF:8		;
	BNE	LVSH			; BR IF PAPER EXIST
	BSR	LVSH1			; CHANGE LEVER TO SHEET SIDE
	BRA	PBOP			; OPEN PAPER BAIL
	.PAGE
;
;	SEND FORMS/SHEET SELET COMMAND
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
LVFM:	BSR	PBCL			; CLOSE PAPER BAIL
	BTST.B	#QLVRS,@SNSF:8		;
	BEQ	LVFM_2			; BR IF ALREADY FORMS SELECT
	BSR	PBCL0			; CLOSE PAPER BAIL
	MOV.B	#ZLVFM1,R1		; SET FORMS SELECT POSITION
	BSR	LVMV			; CHANGE LEVER
	BNE	LVFM_2			; BR IF COMMAND CANCEL
	MOV.B	#ZLVFM2,R1		;
	BSR	LVMV			;
	BSET.B	#QIGOPC,@PRLFF:8	; SET OPC STATUS IGNORE MODE
	MOV.W	R2,@-SP 		;
	MOV.W	#ZLFN1,R2		;
	BSR	LFFW			; FEED FOR FORMS SELECT
	MOV.W	@SP+,R2 		;
	BSR	LVHM			; RETURN TO HOME POSITION
	MOV.W	R2,@-SP 		;
	MOV.W	#ZLFN2,R2		;
	BSR	LFRW			; FEED FOR FORMS SELECT
	BTST.B	#QFPES,@SNSF:8		;
	BEQ	LVFM_1			; BR IF FORMS PE
	MOV.W	#ZLFN3,R2		;
	BSR	LFRW			; FEED FOR FORMS POSITION ADJUST
LVFM_1: MOV.W	#50/ZTI,R2		;
	WAITSK				; DELAY 0.5mS
	MOV.W	@SP+,R2 		;
	BCLR.B	#QIGOPC,@PRLFF:8	; RESET OPC STATUS IGNORE MODE
	BTST.B	#QLVRS,@SNSF:8		; CHECK LEVER SW STATUS
	BNE	LVERR			; BR IF LEVER CHANGE ERROR
LVFM_2: RTS				;

LVSH:	BSR	PBCL			; CLOSE PAPER BAIL
LVSH1:	BTST.B	#QLVRS,@SNSF:8		;
	BNE	LVSH_1			; BR IF ALREADY SHEET SELECT
	BSR	PBCL0			; CLOSE PAPER BAIL
	MOV.B	#ZLVSH,R1		; SET SHEET SELECT POSITION
	BSR	LVMV			; CHANGE LEVER TO SHEET SIDE
	BSR	LVHM			; RETURN TO HOME POSITION
	BNE	LVSH_2			; BR IF COMMAND CANCEL
	BTST.B	#QLVRS,@SNSF:8		; CHECK LEVER SW STATUS
	BEQ	LVERR			; BR IF LEVER CHANGE ERROR
LVSH_1: MOV.B	#0,R0			;
LVSH_2: RTS				;
					;
LVERR:					;
	SETALM	#ZELVR			; SET LEVER ALARM ERROR
	RTS				;
	.PAGE
;
;	SEND FORWARD/REVERSE FEED COMMAND
;
;	IN	R2 : FEED COUNT
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
LFFW:	BSR	LFF2			; SEND FORWARD FEED COMMAND
	BRA	WTACTF			; WAIT FEED END

LFF1:	MOV.B	#ZCLFF,R0		; SET COMMAND NO.
	BRA	LF1			;

LFF2:	MOV.B	#ZCLFF,R0		; SET COMMAND NO.
	BRA	LF2			;

LFRW:	BSR	LFR2			; SEND REVERSE FEED COMMAND
	BRA	WTACTF			; WAIT FEED END

LFR1:	MOV.B	#ZCLFR,R0		; SET COMMAND NO.
LF1:	BSR	SETCM1			; SET COMMAND FORMAT
	BRA	LF3			;

LFR2:	MOV.B	#ZCLFR,R0		; SET COMMAND NO.
LF2:	BSR	SETCM2			; SET COMMAND FORMAT
LF3:	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET FEED COUNT
	SWAP	R2			;
	MOV.B	#0,R0			; SET NO CR ESCAPE
	BTST.B	#QPAMD3,@CMDF:8 	;
	BEQ	LF3_1			; BR IF NOT PAPER HOTCHKISS MODE
	BTST.B	#QCRESC,@CRPBF:8	;
	BEQ	LF3_1			; BR IF NOT CR ESCAPE REQUEST
	MOV.B	#ZCRESC,R0		;
LF3_1:	MOV.B	R0,@R5+ 		; SET CR ESCAPE AMOUNT
	BSR	SENDC2			; SEND FEED COMMAND
	BNE	LF3_2			; BR IF COMMAND CANCEL
	BSET.B	#QLFACT,@PRLFF:8	; SET FEED ACTIVE
	BCLR.B	#QCRESC,@CRPBF:8	;
	BEQ	LF3_4			; BR IF NOT CR ESCAPE
	MOV.W	@CRPC:8,R0		; GET CR POSITION
	SUB.W	#ZCRESC,R0		; ADJUST FOR CR ESCAPE
	BCC	LF3_3			;
	CLR.W	R0			;
LF3_3:	MOV.W	R0,@CRPC:8		; UPDATE CR POSITION COUNTER
LF3_4:	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
LF3_2:	RTS				;
	.PAGE
;
;	SET LF SPEED
;
;	IN   EP R4 : LF SPEED TABLE POINTER
;
;	OUT  R2-R3 : NOT CHNAGE
;	     R5-FP : NOT CHNAGE
;
SETLF1: LDC.B	#PAGE LFSTB1,EP 	;
	MOV.W	#LFSTB1,R4		; GET LF SPEED TABLE 1
	BRA	SETLFS			;
					;
SETLF2: LDC.B	#PAGE LFSTB2,EP 	;
	MOV.W	#LFSTB2,R4		; GET LF SPEED TABLE 2
	BRA	SETLFS			;

SETLF3: LDC.B	#PAGE LFSTB3,EP 	;
	MOV.W	#LFSTB3,R4		; GET LF SPEED TABLE 3
	BRA	SETLFS			;

SETLF4: LDC.B	#PAGE LFSTB4,EP 	;
	MOV.W	#LFSTB4,R4		; GET LF SPEED TABLE 4
	BRA	SETLFS			;

SETLF5: LDC.B	#PAGE LFSTB5,EP 	;
	MOV.W	#LFSTB5,R4		; GET LF SPEED TABLE 5
SETLFS: MOV.W	R4,@-SP 		;
	JSR	@WTACTF 		; WAIT SLAVE CPU ACTION END
	MOV.W	@SP+,R4 		;
	CALIOS	#SCILFT 		; SEND LF MOTOR SPEED TABLE
	RTS				;
	.PAGE
;
;	SEND FORWARD FEED AND PAPER BAIL CLOSE COMMAND
;
;	IN	R2 : FEED COUNT
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
LFPO:	BSR	RSHM			; MOVE RIBBON SHIFT TO HOME POSITION
	BSR	CRHM			; MOVE CR TO HOME POSITION
	BSR	PBOP			; OPEN PAPER BAIL
	BSR	SETLF5			; SET LF SPEED 5
	MOV.B	#ZCLFPB,R0		; SET COMMAND NO.
	BSR	SETCM1			; SET COMMAND FORMAT
	MOV.B	#ZPBCL,@R5+		; SET TARGET POSITION
	MOV.B	#ZLPSPD,@R5+		; SET SPPED
	MOV.B	#ZLPLKT,@R5+		; SET LOCK TIME
	MOV.B	R2,@R5+ 		; SET FEED COUNT
	SWAP	R2			;
	MOV.B	R2,@R5+ 		; SET FEED COUNT
	SWAP	R2			;
	MOV.B	#ZLFSPO,@R5+		; SET LF SPEED
	BSR	SENDC2			; SEND PAPER BAIL MOVE COMMAND
	BNE	LFPO_1			; BR IF COMMAND CANCEL
	BSET.B	#QLFACT,@PRLFF:8	; SET FEED ACTIVE
	BCLR.B	#QPBOP,@CRPBF:8 	; RESET PAPER BAIL OPEN
	BSR	SETLF1			; SET LF SPEED 1
	BCLR.B	#QLFACT,@PRLFF:8	; RESET FEED ACTIVE
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS
	;
LFPO_1: BSR	SETLF1			; SET LF SPEED 1
	MOV.B	#1,R0			; CLEAR Z-FLAG FOR CANCEL
	RTS				;
	.PAGE
;
;	GET BACKLASH FEED COUNT
;
;	IN	NONE
;
;	OUT  R1-FP : BACK LASH FEED COUNT
;
GETBLC: MOV.W	#ZBLN1,FP		; GET BACKLASH FEED COUNT FOR SHEET
	MOV.B	@CMDF:8,R0		;
	AND.B	#XPAMD2+XPAMD1,R0	;
	BEQ	GETB_1			; BR IF SHEET MODE
	CMP.B	#XPAMD2+XPAMD1,R0	;
	BEQ	GETB_1			; BR IF ACSF MODE
	MOV.W	#ZBLN2,FP		; GET BACKLASH FEED COUNT FOR FORMS
GETB_1: RTS				;

;
;	GET SHEET PE COUNT 2
;
;	IN	R2 : INSERT FEED COUNT
;
;	OUT	R2 : PE COUNT 2
;
GETPE2: ADD.W	#ZPE2N,R2		; CALCULATE PE COUNT 2 FOR SHEET
	RTS				;
	.PAGE
;
;	GET EJECT FEED COUNT
;
;	IN	NONE
;
;	OUT	R1 : OPC POINTER
;		R2 : MAX EJECT FEED COUNT AFTER SENSOR PE
;	     R3-FP : NOT CHANGE
;		 Z : 1=EJECT DONE
;
GETEJF: MOV.W	#FOPC,R1		; GET OPC POINTER
	MOV.W	@EEPBF+E2INF,R2 	; GET INSERT FEED COUNT
	BRA	GETEJC			;

GETEJB: MOV.W	#BOPC,R1		; GET OPC POINTER
	MOV.W	@EEPBF+E2INB,R2 	; GET INSERT FEED COUNT
	ADD.W	@EEPBF+E2CUT,R2 	; CALCULATE FEED COUNT TO CUTTER
	MOV.W	#ZEJN4,R0		; GET BOTTOM EJECT COUNT
	BRA	GETE_1			;

GETEJS: MOV.W	#SOPC,R1		; GET OPC POINTER
	MOV.W	@EEPBF+E2INS0,R2	; GET INSERT FEED COUNT
	BSR	GETPE2			; GET PE COUNT 2
	MOV.W	#ZEJN6,R0		;
	BTST.B	#QACSW,@OPTAF:8 	;
	BNE	GETE_1			; BR IF NOT ACSF ATTACHED
GETEJC: ADD.W	@EEPBF+E2CUT,R2 	; CALCULATE FEED COUNT TO CUTTER
	MOV.W	#ZEJN1,R0		;
	BTST.B	#QACSW,@OPTAF:8 	;
	BNE	GETE_1			; BR IF NOT ACSF ATTACHED
	MOV.W	#ZEJN2,R0		;
	BTST.B	#QSELA,@OPTAF:8 	;
	BEQ	GETE_1			; BR IF SF-260 ATTACHED
	MOV.W	#ZEJN3,R0		;
GETE_1: ADD.W	R0,R2			; CALCULATE EJECT FEED COUNT
	CMP.W	@R1,R2			; CHECK OPC AND EJECT FEED COUNT
	BLS	GETE_2			; BR IF ALREADY EJECT DONE
	SUB.W	@R1,R2			; CALCULAET EJECT FEED COUNT
	ADD.W	#ZEJN5,R2		; ADD EJECT COMPLETE FEED COUNT
	RTS				;
					;
GETE_2: MOV.W	#ZNN,@R1		; RESET OVER PE COUNT
	MOV.B	#0,R0			; SET Z-FLAG FOR EJECT DONE
	RTS				;
	.PAGE
;
;	SEND FORMS ESCAPE COMMAND
;
;	IN	R2 : 0=STOP BY TIME OUT, 1=STOP BY SW, 2=STOP BY USER
;
;	OUT	R2 : EJECT FEED COUNT AT EJECT ERROR
;		R3 : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
ESCF:	MOV.B	#ZCESF,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#ZFET1,R0		;
	SWAP	R0			;
	MOV.W	R0,@R5+ 		; SET FEED TIME
	MOV.B	#ZFET2,@R5+		; SET FEED INTERVAL AFTER PE
	BSR	SENDC1			; SEND FORMS ESCAPE COMMAND
	TST.B	R2			;
	BEQ	ESCF_2			; BR IF NOT STOP BY ANY CONDITION
	CMP.B	#ZESCFS,R2		;
	BNE	ESCF_1			; BR IF STOP BY USER
	BSET.B	#QESCSS,@PNLCF:8	; SET STOP BY SW ON
	BRA	ESCF_2			;
					;
ESCF_1: BSET.B	#QESCSU,@PNLCF:8	; SET STOP BY USER
ESCF_2: JSR	@WTESCE 		; WAIT FORMS ESCAPE END
	BCLR.B	#QESCSS,@PNLCF:8	; RESET ESCAPE STOP REQUEST
	BCLR.B	#QESCSU,@PNLCF:8	; RESET ESCAPE STOP REQUEST
	CALIOS	#SCISTP 		; STOP FORMS ESCAPE
	JSR	@WTACTF 		; WAIT FEED END
	JSR	@WTACTF 		; RESET EVENT FLAG
	BNE	EJCB_2			; BR IF COMMAND CANCEL
	MOV.W	#ZEJFN,R2		; SET EJECT ERROR FEED COUNT
	BCLR.B	#QJAM,@ERRSF:8		; RESET JAM STATUS
	BNE	EJCB_1			; BR IF EJECT ERROR
ESCF_3: BCLR.B	#QJAME,@ERRSF:8 	; RESET EJECT JAM STATUS
	MOV.W	#ZNN,@FOPC:8		; RESET OVER PE COUNTER
	CLR.W	R2			; SET Z-FLAF FOR NOT CANCEL
	RTS				;

;
;	SEND FORMS EJECT COMMAND
;
;	IN	NONE
;
;	OUT	R2 : EJECT FEED COUNT AT EJECT ERROR
;		R3 : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
EJCF:	BSR	GETEJF			; GET EJECT FEED COUNT
	BSR	LFFW			; SEND FEED COMMAND
	BEQ	ESCF_3			; BR IF NOT COMMAND CANCEL
	RTS				;
	.PAGE
;
;	SEND BOTTOM EJECT COMMAND
;
;	IN	NONE
;
;	OUT	R2 : EJECT FEED COUNT AT EJECT ERROR
;		R3 : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
EJCB:	BSR	GETEJB			; CALCULATE EJECT FEED COUNT
	MOV.B	#ZCEJB,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET EJECT FEED COUNT
	MOV.W	#ZEJBN,R2		; SET MAX EJECT FEED COUNT
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET MAX FEED CHECK
	SWAP	R2			;
	BSR	SENDC2			; SEND EJECT COMMAND
	BNE	EJCB_2			; BR IF COMMAND CANCEL
	BCLR.B	#QJAM,@ERRSF:8		; RESET JAM STATUS
	BNE	EJCB_1			; BR IF EJECT ERROR
	BCLR.B	#QJAME,@ERRSF:8 	; RESET EJECT JAM STATUS
	MOV.W	#ZNN,@BOPC:8		; RESET OVER PE COUNTER
	CLR.W	R2			; SET Z-FLAF FOR NOT CANCEL
	RTS				;
					;
EJCB_1: BSET.B	#QJAME,@ERRSF:8 	; SET EJECT JAM STATUS
	CALIOS	#SCICLE 		; CLEAR ERROR FLAG 1
	MOV.B	#0,R0			; SET Z-FLAF FOR NOT CANCEL
EJCB_2: RTS				;
	.PAGE
;
;	SEND SHEET/ACSF EJECT COMMAND
;
;	IN	NONE
;
;	OUT	R2 : EJECT FEED COUNT AT EJECT ERROR
;		R3 : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
EJCA:	BSR	GETEJS			; CALCULATE EJECT FEED COUNT
	BEQ	EJCB_2			; BR IF ALREADY EJECT DONE
EJCS:	BSR	GETEJS			; CALCULATE EJECT FEED COUNT
	MOV.B	#ZCEJS,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET EJECT FEED COUNT
	MOV.W	#ZEJSN,R2		;
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET MAX FEED CHECK
	SWAP	R2			;
	BSR	SENDC2			; SEND EJECT COMMAND
	BNE	EJCB_2			; BR IF COMMAND CANCEL
	BCLR.B	#QJAM,@ERRSF:8		; RESET JAM STATUS
	BNE	EJCB_1			; BR IF EJECT ERROR
	BCLR.B	#QJAME,@ERRSF:8 	; RESET EJECT JAM STATUS
	MOV.W	#ZNN,@SOPC:8		; RESET OVER PE COUNTER
	CLR.W	R2			; SET Z-FLAF FOR NOT CANCEL
	RTS				;
	.PAGE
;
;	SEND FORMS INSERT COMMAND
;
;	IN	R2 : INSERT FEED COUNT
;
;	OUT	R3 : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
INSF:	MOV.B	#ZCINF,R0		; SSET COMMAND NO.
	MOV.W	#ZINFN,R4		;
	BSR	SETCM2			; SET COMMAND FORMAT
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET INSERT FEED COUNT
	SWAP	R4			;
	MOV.W	R4,@R5+ 		; SET MAX FEED COUNT
	BSR	SENDC2			; SEND INSERT COMMAND
	BNE	INSA_3			; BR IF COMMAND CANCEL
	BCLR.B	#QJAM,@ERRSF:8		; RESET JAM STATUS
	BEQ	INSA_2			; BR IF NOT INSERT ERROR
	BSET.B	#QJAMI,@ERRSF:8 	; SET INSERT JAM STATUS
	CALIOS	#SCICLE 		; CLEAR ERROR FLAG 1
	MOV.W	#ZNN,@FOPC:8		; RESET OVER PE COUNTER
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;
	.PAGE
;
;	SEND ACSF INSERT COMMAND
;
;	IN	R2 : INSERT FEED COUNT
;
;	OUT	R3 : NOT CHNAGE
;		 Z : 0=COMMAND CANCEL
;
INS2:	MOV.B	#ZCIN2,R0		; SSET COMMAND NO.
	MOV.W	#ZIN2N,R4		;
	BRA	INSA_1			;

INSA:	MOV.B	#ZCINA,R0		; SSET COMMAND NO.
	MOV.W	#ZINAN,R4		;
INSA_1: BSR	SETCM2			; SET COMMAND FORMAT
	SWAP	R2			;
	MOV.W	R2,@R5+ 		; SET INSERT FEED COUNT
	SWAP	R4			;
	MOV.W	R4,@R5+ 		; SET MAX FEED COUNT
	BSR	SENDC2			; SEND INSERT COMMAND
	BNE	INSA_3			; BR IF COMMAND CANCEL
	BCLR.B	#QJAM,@ERRSF:8		; RESET JAM STATUS
	BEQ	INSA_2			; BR IF NOT INSERT ERROR
	BSET.B	#QJAMI,@ERRSF:8 	; SET INSERT JAM STATUS
	CALIOS	#SCICLE 		; CLEAR ERROR FLAG 1
	MOV.W	#ZNN,@SOPC:8		; RESET OVER PE COUNTER
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;

INSA_2: BCLR.B	#QJAMI,@ERRSF:8 	; RESET INSERT JAM STATUS
	MOV.B	#0,R0			; SET Z-FLAF FOR NOT CANCEL
INSA_3: RTS				;

;
;	SEND ACSF INITIALIZE COMMAND
;
;	IN	NONE
;
;	OUT	NONE
;
INI2:	JSR	@LVSH			; CHANGE LEVER TO SHEET SIDE
	MOV.W	#ZI2N1,R2		;
	BRA	LFFW			;

INIA:	JSR	@LVSH			; CHANGE LEVER TO SHEET SIDE
	MOV.W	#ZIAN1,R2		;
	BSR	LFRW			; INITIALIZE ACSF CLUTCH
	MOV.W	#ZIAN2,R2		;
	BRA	LFFW			;
	.PAGE
;
;	SEND PRCLK OUTPUT COMMAND
;
;	IN	R1 : PRCLK COUNT
;
;	OUT  R2-R3 : NOT CHNAGE
;		FP : NOT CHANGE
;		 Z : 0=COMMAND CANCEL
;
PCLK1:	MOV.B	#1,R1			; SET PRCLK COUNT
PCLK:	MOV.B	#ZCPCK,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.B	R1,@R5+ 		; SET PULSE COUNT
	MOV.B	#ZPCKT,@R5+		; SET PULSE INTERVAL
	BRA	SENDC2			; SEND PRCLK COMMAND

;
;	SELECT PRINT BUUFER RAM FOR PRINT
;
;	IN	FP : PRINT COMMAND BUFFER POINTER
;
;	OUT  R2-R3 : NOT CHANGE
;		FP : NOT CHANGE
;		 Z : 0=COMMAND CANCEL
;
SELPRB: JSR	@WTPRTF 		; WAIT PRINT END
	BTST.B	#QPBBS,@FP		;
	BNE	SELP_2			; BR IF PRINT BUFFER RAM B
	BTST.B	#QPBBP,@PRBFF:8 	;
	BNE	SELP_1			; BR IF NOT SAME RAM PRINT
	BCLR.B	#QRAMS,@CTRL		; SELECT PRINT BUFFER RAM B FOR PRINT
	BSR	PCLK1			; OUTPUT 1 PRCLK
	BNE	SELP_4			; BR IF COMMAND CANCEL
	BSET.B	#QPBBP,@PRBFF:8 	; SET PRINT BUFFER RAM B PRINTED
SELP_1: BSET.B	#QRAMS,@CTRL		; SELECT FOR BUFFER RAM A PRINT
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
	RTS				;
					;
SELP_2: BTST.B	#QPBBP,@PRBFF:8 	;
	BEQ	SELP_3			; BR IF NOT SAME RAM PRINT
	BSET.B	#QRAMS,@CTRL		; SELECT PRINT BUFFER RAM A FOR PRINT
	BSR	PCLK1			; OUTPUT 1 PRCLK
	BNE	SELP_4			; BR IF COMMAND CANCEL
	BCLR.B	#QPBBP,@PRBFF:8 	; SET PRINT BUFFER RAM A PRINTED
SELP_3: BCLR.B	#QRAMS,@CTRL		; SELECT FOR BUFFER RAM B PRINT
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT CANCEL
SELP_4: RTS				;
	.PAGE
;
;	INITIALIZE PRINT HEAD CONTROL GA
;
;	IN	NONE
;
;	OUT	NONE
;
GAINI:	MOV.B	#XBPE,@OUTC		; SET GA2 OUTPUT DISABLE
	MOV.W	#4*ZK,R0		;
	MOV.B	R0,@BSP0		; SET PRINT BUUFER POINTER LOW
	MOV.B	R0,@BSP2		;
	MOV.B	R0,@BEP0		;
	MOV.B	R0,@BEP2		;
	SWAP	R0			;
	MOV.B	R0,@BSP1		; SET PRINT BUFFER POINTER HIGH
	MOV.B	R0,@BSP3		;
	MOV.B	R0,@BEP1		;
	MOV.B	R0,@BEP3		;
	MOV.B	#XDP180,R0		;
	MOV.B	R0,@PITCNT		; SET 1/180 INCH PITCH
	MOV.B	R0,@DPR 		;
	MOV.W	#GAHDTB,FP		;
	MOV.W	@FP,R0			;
	MOV.W	R0,@TRA1		; SET TRA1, TRA2
	MOV.W	@(2,FP),R0		;
	MOV.W	R0,@TRA3		; SET TRA3, TRB
	MOV.W	@(4,FP),R0		;
	MOV.W	R0,@TRC 		; SET TRC,  TRD
	MOV.B	@(7,FP),R0		;
	MOV.B	R0,@DTR1		; SET DTR1
	MOV.W	@(8,FP),R0		;
	MOV.W	R0,@DTR2		; SET DTR2, DTR3
	MOV.W	@(10,FP),R0		;
	MOV.W	R0,@DTR4		; SET DTR4, DTR5
	MOV.B	@(12,FP),R0		;
	MOV.B	R0,@DTR6		; SET DTR6
	BCLR.B	#QRAMS,@CTRL		; SELECT PRINT BUFFER RAM A
	BSR	PCLK1			; OUTPUT 1 PRCLK
	BSET.B	#QRAMS,@CTRL		; SELECT PRINT BUFFER RAM B
	MOV.B	#51,R1			; SET PULSE COUNT
	BSR	PCLK			; OUTPUT 51 PRCLK
	BSET.B	#QCTRS,@CTRL		; RESET DCR, DUTY COUNTER, XOVDF
	BSET.B	#QOUTE,@CTRL		; SET GA1 OUTPUT ENABLE
	BCLR.B	#QPBBP,@PRBFF:8 	; SET PRINT BUFFER RAM A PRINTED
	RTS				;
	.PAGE
;
;	PE CHECK COUNT SEND
;
;	IN	NONE
;
;	OUT	NONE
;
DTOPC:	MOV.B	#ZCDTA,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#6*ZH+PECNST,R0 	;
	MOV.W	R0,@R5+ 		; SET DATA COUNT, ADDRESS
	MOV.W	#EEPBF+E2OPCS,R1	;
	MOV.W	#3-1,R4 		;
DTOP_1: MOV.W	@R1+,R0 		;
	SWAP	R0			; EXCHANGE HIGH/LOW
	MOV.W	R0,@R5+ 		; SET PE CHECK COUNT
	SCB/F	R4,DTOP_1		;
	BRA	SENDC2			; SEND PE CHECK COUNT

;
;	PRINT POSITION ADJUST VALUE SEND
;
;	IN	R2 : CORRECTION VALUE
;
;	OUT	NONE
;
DTPAV:	MOV.B	#ZCDTA,R0		; SET COMMAND NO.
	BSR	SETCM2			; SET COMMAND FORMAT
	MOV.W	#PRATB,R1		; GET PRINT ADJUST VALUE TABLE
	ADD.B	@R1+,R2 		; ADD +/- LEVEL
	MOV.B	#CLMEND-CLM10D,R4	; GET DATA COUNT
	MULXU.B R4,R2			; CALCULATE TABLE OFFSET
	ADD.W	R1,R2			; GET PRINT ADJUST TABLE POINTER
	SWAP	R4			;
	MOV.B	#CLM10D,R4		;
	MOV.W	R4,@R5+ 		; SET DATA COUNT, ADDRESS
	MOV.W	#EEPBF+E2PRA1,R1	;
	MOV.W	#CLMEND-CLM10D-1,R4	; ADJUST FOR LOOP
DTPA_1: MOV.B	@R1+,R0 		; GET PRINT ADJUST DATA
	BPL	DTPA_2			; BR IF PLUS VALUE
	BCLR.B	#QMSB,R0		;
	NEG.B	R0			;
DTPA_2: ADD.B	@R2+,R0 		; CORRECT VALUE
	BPL	DTPA_3			; BR IF PLUS VALUE
	NEG.B	R0			;
	BSET.B	#QMSB,R0		;
	CMP.B	#ZMSB,R0		;
	BNE	DTPA_3			; BR IF NOT MINUS ZERO
	CLR.B	R0			;
DTPA_3: MOV.B	R0,@R5+ 		; SET PRINT POSITION ADJUST VALUE
	SCB/F	R4,DTPA_1		;
	BRA	SENDC2			; SEND PRINT ADJUST VALUE
	.END

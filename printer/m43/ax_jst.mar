	.PROGRAM	apljst
	.HEADING	"M4324 AX FULL JUSTIFICATION MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX FULL JUSTIFICATION MODULE		*
;							*
;	FILE NAME	AX_JST.MAR			*
;	CREATED		08/MAY/1991			*
;							*
;********************************************************
;
	.EXPORT		FJUST
;
	.IMPORT		PRINT, CHKJST,BCDPR
	.IMPORT		DIV32
;
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
;
;	<< EACH CONSTANT >>
;
QAOCRB:	.EQU	 15			; OCR-B CHARACTER BIT
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;	PRINT FOR FULL JUSTIFICATION
;
FJUST:	CLR.W	@JUSADC:8		; RESET OTHER JUSTIFICATION ADJUST COLUMN
	CLR.W	@JUSSPC:8		; RESET SPACE BLOCK COUNTER
	CLR.W	@JSSPS1:8		; RESET SPACE BLOCK ADJUST VALUE
	CLR.W	@JSSPS2:8		; RESET SPACE BLOCK REMAINDER OF ADJUST VALUE
	BTST.B	#QBCDPR,@PRPTCF:8	;
	BEQ	FJUS_2			; BR. IF NOT BAR CODE PRESENT (INVALID FULL JUSTIFICATION)
	BSET.B	#QPRTON,@APL0F:8	; SET PRINT ON-LINE FLAG (DUMMY)
	MOV.B	@BCDHTS:8,R0		; GET VERTICAL HEIGHT SIZE
	JSR	@BCDPR			; PRINT TO BAR CODE
	BCLR.B	#QPRTON,@APL0F:8	; RESET PRINT ON-LINE FLAG (DUMMY)
	RTS
	;
FJUS_2:	BTST.B	#QPRTON,@APL0F:8	;
	BEQ	FJUS_8			; BR. IF NOT PRINT ON-LINE (INVALID FULL JUSTIFICATION)
	BTST.B	#QIMGDT,@APL0F:8	;
	BNE	FJUS_8			; BR. IF IMAGE DATA PRESENT (INVALID FULL JUSTIFICATION)
	CMP.W	#TXTBF,@TXTBFP:8	;
	BEQ	FJUS_A			; BR. IF NO DATA
	JSR	@CHKJST			; CHECK JUSTIFICATION FLAG
	BPL	FJUS_C			; BR. IF NOT FULL JUSTIFICATION
	MOV.W	@CLMCTC:8,R0		; GET CURRENT COLUMN
	CMP.W	@JUSWDS:8,R0		;
	BLS	FJUS_8			; BR. IF CURRENT POSITION < 76% POSITION
	BSR	JSRSP			; CHECK DATA IN TEXT BUFFER
	TST.W	@JUSSPC:8		;
	BEQ	FJUS_8			; BR. IF SPACE BLOCK = 0 (INVALID FULL JUSTIFICATION)
	BTST.B	#QFJSC3,@APL1F:8	;
	BNE	FJUS_8			; BR. IF INVALID FULL JUSTIFICATION
	BSR	CLADV:16		; CALCULATE ADJUST VALUE
	BSR	ADJCW:16		; ADDER ADJUST VALUE TO SPACE BLOCK
FJUS_8:	MOV.B	@PNLELS:8,R0		; GET PANEL ENLARGE SIZE
	JSR	@PRINT			; PRINT
FJUS_A:	RTS
;
;	<< JUSTIFICATION CENTERING/RIGHT FLASH >>
;
FJUS_C:	BEQ	FJUS_8			; BR. IF LEFT FLASH (NORMAL)
	BSR	JSRSP			; CHECK DATA IN TEXT BUFFER
	BTST.B	#QFJSC3,@APL1F:8	;
	BNE	FJUS_8			; BR. IF INVALID FULL JUSTIFICATION
	MOV.W	@RMARGS:8,R0		;
	SUB.W	@CLMMXS:8,R0		; CALCULATE (RIGHT MARGIN - END COLUMN)
	BCC	FJUS_5			; BR. IF NOT UNDERFLOW
	CLR.W	R0			; RESET (RIGHT MARGIN - END COLUMN)
FJUS_5:	BTST.B	#QJSTF1,@PTMD2F:8	;
	BNE	FJUS_D			; BR. IF RIGHT FLASH
	SHLR.W	R0			; (RIGHT MARGIN - END COLUMN) / 2
FJUS_D:	MOV.W	R0,@JUSADC:8		; SET BASE ADJUST COLUMN (OTHER JUSTIFICATION)
	BSR	ADJCLM:16		; ADDER ADJUST COLUMN FOR CENTERING/RIGHT FLASH
	BRA	FJUS_8
	.PAGE
;
; << SUB >>	CHECK DATA IN TEXT BUFFER
;
;	IN	NONE
;
;	OUT	JUSSPC : SPACE BLOCK COUNTER
;		QFJSC3 : FULL JUSTIFICATION FLAG (= 0 ... VALID / = 1 ... INVALID)
;		 DP R3 : EDIT BUFFER POINTER (SPACE BLOCK POINTER)
;
;	USE	R0->FP,DP,EP
;
;		DP R3 : EDIT BUFFER POINTER (SPACE BLOCK POINTER)
;		   FP : TEXT BUFFER POINTER
;
JSRSP:	MOV.W	#TXTBF,FP		; SET TEXT BUFFER POINTER
	MOV.W	#EDBF1,R3		; SET EDIT BUFFER POINTER
	CLR.W	@JUSSPC:8		; RESET SPACE BLOCK COUNTER
JSRS_2:	CMP.B	#ZENDMK,@FP		;
	BEQ	JSRS_C			; BR. IF END MARK
	CMP.B	#ZCMBFM,@FP		;
	BHI	JSRS_8			; BR. IF NOT PRINT DATA
	BEQ	JSRS_4			; BR. IF COMBINE FORMAT
	CMP.B	#ZANKFM,@FP		;
	BNE	JSRS_6			; BR. IF NOT ANK FORMAT
	CMP.W	#ZSP,@(YCODEF,FP)	;
	BNE	JSRS_A			; BR. IF NOT ANK SPACE CODE
JSRS_3:	BSR	JSRS_E			; CHECK NEXT FORMAT
	BEQ	JSRS_3			; BR IF NEXT FORMAT = SPACE BLOCK
	MOV.W	FP,@R3+			; SET SPACE BLOCK POINTER (EDIT)
	ADD.W	#1,@JUSSPC:8		; ADDER SPACE COUNTER
	BRA	JSRS_A
	;
JSRS_4:	CMP.W	#ZFSPCD,@(YCODEF,FP)	;
	ADDS.B	#ZFMTSZ,FP		; UPDATE TEXT BUFFER POINTER (COMBINE)
	BNE	JSRS_A			; BR. IF 1ST NOT = SPACE CODE
JSRS_6:	CMP.W	#ZFSPCD,@(YCODEF,FP)	;
	BEQ	JSRS_3			; BR. IF 2ND = SPACE CODE (1ST = SPACE)
	BRA	JSRS_A
	;
JSRS_8:	CMP.B	#ZCLMFM,@FP		;
	BNE	JSRS_A			; BR. IF NOT COLUMN FORMAT
	CMP.B	#ZTBCLF,@(YDIRFG,FP)	;
	BEQ	JSRS_3			; BR. IF COLUMN = FORWARD
	BSET.B	#QFJSC3,@APL1F:8	; SET INVALID FULL JUSTIFICATION FLAG
JSRS_A:	ADDS.B	#ZFMTSZ,FP		; UPDATE TEXT BUFFER POINTER
	CMP.W	@TXTBFP:8,FP		;
	BCS	JSRS_2			; BR. IF NOT END
JSRS_C:	MOV.W	#ZNN,@R3		; SET END MARK (SPACE BLOCK END)
JSRS_D:	RTS

JSRS_E:	ADDS.B	#ZFMTSZ,FP		; UPDATE TEXT BUFFER POINTER
	CMP.B	#ZCLMFM,@FP		;
	BEQ	JSRS_J			; BR IF COLUMN COMMAND
	CMP.B	#ZCMBFM,@FP		;
	BEQ	JSRS_G			; BR IF COMBINE COMMAND
	CMP.B	#ZKNJFM,@FP		;
	BEQ	JSRS_H			; BR IF KANJI COMMAND
	CMP.B	#ZANKFM,@FP		;
	BNE	JSRS_D			; BR IF COLUMN COMMAND
	CMP.W	#ZSP,@(YCODEF,FP)	;
	BNE	JSRS_D			; BR IF NOT ANK SPACE
JSRS_F:	MOV.B	#0,R0			; SET SPACE BLOCK FLAG
	RTS

JSRS_G:	CMP.W	#ZFSPCD,@(YCODEF,FP)	;
	ADDS.B	#ZFMTSZ,FP		; UPDATE TEXT BUFFER POINTER (COMBINE)
	BNE	JSRS_D			; BR. IF 1ST NOT = SPACE CODE
JSRS_H:	CMP.W	#ZFSPCD,@(YCODEF,FP)	;
	BEQ	JSRS_F			; BR. IF 2ND = SPACE CODE (1ST = SPACE)
	BRA	JSRS_D
	;
JSRS_J:	CMP.B	#ZTBCLF,@(YDIRFG,FP)	;
	BEQ	JSRS_F			; BR. IF COLUMN = FORWARD
	BSET.B	#QFJSC3,@APL1F:8	; SET INVALID FULL JUSTIFICATION FLAG
	MOV.B	#1,R0			;
	RTS
	.PAGE
;
; << SUB >>	CALCULATE ADJUST VALUE
;
;	IN	 DP R3 : EDIT BUFFER POINTER (POINTS SPACE BLOCK)
;		JUSSPC : SPACE BLOCK COUNTER
;
;	OUT	 DP R3 : EDIT BUFFER POINTER (POINTS SPACE BLOCK)
;		JSSPS1 : 1 SPACE BLOCK ADJUST VALUE FOR 1/120 INCH
;		JSSPS2 : SPACE BLOCK REMAINDER OF ADJUST VALUE
;
;	USE	R0->R5,EP
;
CLADV:	MOV.W	R3,@-SP			;+ SAVE EDIT BUFFER POINTER
	MOV.W	@JUSSPC:8,R0		; GET SPACE BLOCK COUNTER
	MULXU.W	#ZCL120,R0		; CALCULATE SPACE BLOCK COUNTER x 1/120 INCH UNIT
	MOV.W	R1,FP			; SAVE IT
	MOV.W	@RMARGS:8,R1		; GET RIGHT MARGIN VALUE
	SUB.W	@CLMCTC:8,R1		; SET ADJUST VALUE
	CLR.W	R0			;
	JSR	@DIV32			; CALCULATE 1 SPACE BLOCK ADJUST VALUE
	MOV.W	R2,@JSSPS2:8		; SAVE SPACE BLOCK REMAINDER OF ADJUST VALUE
	MOV.W	R1,R0			;
	MULXU.W	#ZCL120,R0		; CALCULATE SPACE BLOCK COUNTER x 1/120 INCH UNIT
	MOV.W	R1,@JSSPS1:8		; SAVE 1 SPACE BLOCK ADJUST VALUE FOR 1/120 INCH
	MOV.W	@SP+,R3			;+ UNSAVE EDIT BUFFER POINTER
	RTS
;
; << SUB >>	ADJUST SPACE BLOCK TO TEXT BUFFER
;
;	IN	 DP R3 : EDIT BUFFER POINTER (POINTS SPACE BLOCK)
;		JSSPS1 : 1 SPACE BLOCK ADJUST VALUE FOR 1/120 INCH
;		JSSPS2 : SPACE BLOCK REMAINDER OF ADJUST VALUE
;
;	USE	R0->FP,DP,EP
;
ADJCW:	MOV.W	#EDBF1,R2		; SET EDIT BUFFER POINTER
	MOV.W	@JSSPS1:8,R5		; GET ADJUST VALUE
	MOV.W	@R2+,FP			; GET ADJUST START POINTER
ADJC_2:	BSR	ADJC_C			; ADJUST REMAINDER VALUE
ADJC_4:	BSR	ADJC_A			; ADDER ADJUST VALUE
	ADDS.W	#ZFMTSZ,FP		; UPDATE TEXT BUFFER POINTER
	CMP.W	#ZENDMK,@FP		;
	BEQ	ADJC_8			; BR. IF END MARK
	CMP.W	@R2,FP			;
	BCS	ADJC_4			; BR. IF NOT NEXT SPACE BLOCK
	ADD.W	#2,R2			; UPDATE ADJUST START POINTER
	ADD.W	@JSSPS1:8,R5		; ADDER ADJUST VALUE (BASE)
	BRA	ADJC_2			; BR. IF NOT SPACE BLOCK END
;
;	<< ADJUST END COLUMN >>
;
ADJC_8:	MOV.W	@(2,FP),R0		; GET END COLUMN
	ADD.W	R5,R0			; ADJUST COLUMN (ORIGINAL + ADJUST VALUE)
	MOV.W	R0,@(2,FP)		; SAVE NEW END COLUMN
ADJC_9:	RTS
	.PAGE
;
; << SUB >>	ADJUST ORIGINAL COLUMN TO TEXT BUFFER
;
;	IN	R5 : ADJUST VALUE
;		FP : TEXT BUFFER POINTER
;
ADJC_A:	MOV.W	@(YCLMCF,FP),R0		; GET ORIGINAL COLUMN
	ADD.W	R5,R0			; ADJUST COLUMN (ORIGINAL + ADJUST VALUE)
	MOV.W	R0,@(YCLMCF,FP)		; SAVE NEW COLUMN
	RTS
;
; << SUB >>	ADJUST REMAINDER OF ADJUST VALUE
;
;	IN	R5 : ADJUST VALUE
;
ADJC_C:	TST.W	@JSSPS2:8		;
	BEQ	ADJC_9			; BR. IF REMAINDER = 0
	ADD.W	#1,R5			; ADJUST 1 DOT
	ADD.W	#-1,@JSSPS2:8		; ADJUST REMAINDER VALUE
	RTS
;
; << SUB >>	ADDER ADJUST COLUMN FOR CENTERING/RIGHT FLASH
;
;	IN	@JUSADC : ADJUST COLUMN
;
ADJCLM:	MOV.W	#TXTBF,FP		; SET TEXT BUFFER START POINTER
	MOV.W	@JUSADC:8,R5		; GET ADJUST COLUMN
ADCL_2:	BSR	ADJC_A
	ADDS.W	#ZFMTSZ,FP		; UPDATE TEXT BUFFER POINTER
	CMP.W	#ZENDMK,@FP		;
	BNE	ADCL_2			; BR. IF NOT END MARK
	BRA	ADJC_8
	.END

	.PROGRAM	aplank
	.HEADING	"M4324 AX LOAD ANK PATTERN MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX LOAD ANK PATTERN & EDITING MODULE	*
;							*
;	FILE NAME	AX_ANK.MAR			*
;	CREATED 	15/MAY/1991			*
;							*
;********************************************************
;
	.EXPORT 	LDANK1,LDANK2,LDANK3,ULANK1,ULANK2
	.EXPORT 	CPYEDT,SETDS1,SETDS2,SETDSA
	.EXPORT 	CVDR10,CVLQ10,CVDR15,CVLQ15
	.EXPORT 	AMIKE				; 920325
;
	.IMPORT 	KJVEL, KJVEL1			;\ 03/MAR/1992
	.IMPORT 	REVERS				;\ 04/MAR/1992
	.IMPORT 	GETIBP,OUTSH, SETSPD,SELKCG,LDDWL
	.IMPORT 	GETDLB,CLREDT,EMPLQ, HELLQ, HEPLQ
	.IMPORT 	AKLIN, AKDIN, CPSCRT
	.IMPORT 	EMPKJ, HELKJ, HEPKJ, KJITL
	.IMPORT 	LQ10C, LQKAT, LQGRP, DR10C, DRKAT
	.IMPORT 	DRGRP, LQ15C, LQ15S, DR15C, DR15S
	.IMPORT 	CWETB, SETIPG,VELTB1,VELTB4,VELTB5
	.IMPORT 	OCRTB, OCRTB1,ZOCR00,BSRTB, PRPTB
	.IMPORT 	NLQ15, NDR15, CG0020, CG1020 ; 920127 NEW 15DPI FONT
;
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
;
;	<< ANK CG COLUMN CONSTANT >>
;
ZLQ10:	.EQU	 36			; LQ	10 cpi
ZLQ15:	.EQU	 24			;	15 cpi
ZOCRB:	.EQU	 12			; OCR-B 10 cpi FOR KANJI CG (12 x 2 Colomn)
ZOCR2:	.EQU	 16			; OCR-B 10 cpi FOR INNER CG (15 Column)
ZDR10:	.EQU	 12			; DRAFT 10 cpi
ZDR15:	.EQU	 08			;	15 cpi
	;
QAKCDH: .EQU	  8			; EXPAND ANK HIGH CODE BIT
QAOCRB: .EQU	 15			; OCR-B MODE BIT
ZAKSP:	.EQU	 32			; ANK SPACE CODE
ZCLM36: .EQU	  4			; 1/360 INCH COLUMN
ZCLM12: .EQU	ZCLM36*3		; 1/120 INCH COLUMN
XSTYLE: .EQU	H'1000+H'0800           ; CHARACTER STYLE MASK
;
;	<< ANK CG COLUMN CONSTANT (DUMMY) >>
;
QA2PAS: .EQU	  8			; VERTICAL ENLARGE 2 PASS BIT FOR ANK
QA3PAS: .EQU	 15			; VERTICAL ENLARGE 3 PASS BIT FOR ANK
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;	LOAD ANK CG PATTERN TO IMAGE BUFFER < VERTICAL ENLARGE 1 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING CG PATTERN
;
;	USE	R0->FP,DP,EP
;
LDANK1: BTST.W	#QAVENL,@(YMODEF,FP)	;
	BEQ	LDA1_2			; BR. IF NOT VERTICAL ENLARGE 1 PASS
LDAK1V: BSR	LDAK2N:16		; EACH ANK PROCESS
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LDA1_2			; BR. IF SPACE CODE
	BSR	CHKEDT:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	JSR	@KJVEL			;\ MAKE VERTICAL ENLARGE (1 PASS)
	BSR	CPYIMG:16		; COPY PATTERN TO IMAGE BUFFER
;
	MOV.W	R5,@-SP 		; 930128
	MOV.W	R4,@-SP 		;   "
	MOV.W	R3,@-SP 		;   "
	MOV.W	R2,@-SP 		;   "
	MOV.W	R1,@-SP 		;   "
	BSR	AMIKE			;   "
	MOV.W	@SP+,R1 		;   "
	MOV.W	@SP+,R2 		;   "
	MOV.W	@SP+,R3 		;   "
	MOV.W	@SP+,R4 		;   "
	MOV.W	@SP+,R5 		;   "
;
	MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
LDA1_2: RTS
;
;
;	; AMIKAKE MODE INSERT	920312
;
AMIKE:	BTST.B	#QPAMIK,@(YMODKF,FP)	;
	BNE	AMIKE0			; BR. IF  AMIKAKE MODE
	RTS
AMIKE0: BSR	ULANK5:16		; GET START POINTER
	CLR.W	R2		;
	DIVXU.W #2,R2
	ADD.W	#-4,R3			; 921127
	ADD.W	#5,R5			; 921127
AMIK01: ADD.W	#6,R5			; UPDATE POINTER
	MOV.B	@R5,R0			; GET IMAGE BUFFER DATA
	OR.B	#H'88,R0                ;
	MOV.B	R0,@R5+ 		; SAVE IT
	SCB/F	R3,AMIK01		; BR. IF NOT END
	RTS
;
;
REVER0: BSR	ULANK5:16		; GET START POINTER
	ADD.W	#17,R3	;325	19	;
REVE01: ADD.W	#1,R5			; UPDATE POINTER
	MOV.B	@R5,R0			; GET IMAGE BUFFER DATA
	XOR.B	#H'FF,R0                ;
	MOV.B	R0,@R5+ 		; SAVE IT
	SCB/F	R3,REVE01		; BR. IF NOT END
	RTS
;
;	LOAD ANK CG PATTERN TO IMAGE BUFFER < NORMAL / VERTICAL ENLARGE 2 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING CG PATTERN
;
;	USE	R0->FP,DP,EP
;
LDANK2: BTST.W	#QAVENL,@(YMODEF,FP)	;
	BNE	LDAK2V			; BR. IF VERTICAL ENLARGE 2 PASS
	BSR	LDAK2N:16		; NORMAL PATTERN PROCESS
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LDAK_6			; BR. IF SPACE CODE
	BSR	CHKEDT:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	CPYIMG:16		; COPY PATTERN TO IMAGE BUFFER

	MOV.W	R5,@-SP 		; 921126
	MOV.W	R4,@-SP 		; 921126
	MOV.W	R3,@-SP 		; 921126
	MOV.W	R2,@-SP 		; 921126
	MOV.W	R1,@-SP 		; 921126
	BSR	AMIKE			; 921021
	MOV.W	@SP+,R1 		; 921126
	MOV.W	@SP+,R2 		; 921126
	MOV.W	@SP+,R3 		; 921126
	MOV.W	@SP+,R4 		; 921126
	MOV.W	@SP+,R5 		; 921126

	MOV.W	R5,@-SP 		;+ SAVE END POINTER
	BSR	ULANK2:16		; CREATE UNDERLINE
	MOV.W	@SP+,R2 		;+ UNSAVE END POINTER
	CMP.W	R2,R5			;
	BCC	LDAK_4			; BR. IF CREATE LINE END PTR >= EDIT END PTR
	XCH	R2,R5			; EXCHANGE END POINTER
;
LDAK_4: MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
	RTS
	;
LDAK_6:
	BTST.B	#QPAMIK,@(YMODKF,FP)	;
	BNE	LDAK_7			; BR. IF  AMIKAKE MODE
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 920309
	BNE	LDAK_8			; BR. IF  REVERSE MODE
;
	BTST.W	#QAUNDL,@(YMODEF,FP)	;
	BEQ	LDA2_4			; BR. IF NOT UNDERLINE MODE
	BSR	ULANK3:16		; CREATE UNDERLINE
	BRA	LDAK_4
;
LDAK_7: BSR	AMIKE0:16		;\ 920309
	BRA	LDAK_4
;
LDAK_8: BSR	REVER0:16		;\ 920309
	BRA	LDAK_4
;
; << SUB >>	VERTICAL ENLARGE MIDDLE PATTERN PROCESS < 2 PASS >
;
LDAK2V:
	BSR	LDAK2N:16		; EACH ANK PROCESS
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LDA2_4			; BR. IF SPACE CODE
	BSET.W	#QA2PAS,@(YMODEF,FP)	; SET DUMMY FLAG (VERTICAL ENALRGE 2 PASS)
	BSR	CHKEDT:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	JSR	@KJVEL1 		;\ MAKE VERTICAL ENLARGE (2 PASS)
	BSR	CPYIMG:16		; COPY PATTERN TO IMAGE BUFFER
;
	MOV.W	R5,@-SP 		; 930128
	MOV.W	R4,@-SP 		;   "
	MOV.W	R3,@-SP 		;   "
	MOV.W	R2,@-SP 		;   "
	MOV.W	R1,@-SP 		;   "
	BSR	AMIKE			;   "
	MOV.W	@SP+,R1 		;   "
	MOV.W	@SP+,R2 		;   "
	MOV.W	@SP+,R3 		;   "
	MOV.W	@SP+,R4 		;   "
	MOV.W	@SP+,R5 		;   "
;
	BCLR.W	#QA2PAS,@(YMODEF,FP)	; RESET DUMMY FLAG (VERTICAL ENALRGE 2 PASS)
LDA2_3: MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
LDA2_4: RTS
	.PAGE
;
;	LOAD ANK CG PATTERN TO IMAGE BUFFER < GRAPHIC 2 PASS / VERTICAL ENLARGE 3 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING CG PATTERN
;
;	USE	R0->FP,DP,EP
;
LDANK3: BTST.B	#QPREVS,@(YMODKF,FP)	; 930128
	BNE	LDA3_2			;   "
	BTST.W	#QAVENL,@(YMODEF,FP)	;
	BNE	LDAK3V			; BR. IF VERTICAL ENLARGE 3 PASS
	BSR	CKGRC:16		; CHECK GRAPHIC CHARACTER
	BMI	LDA3_2			; BR. IF MATHEMATICS CHARACTER
	BNE	LDAK3G			; MAKE GRAPHIC CHARACTER 2 PASS
LDA3_2: RTS
;
; << SUB >>	VERTICAL ENLARGE LOW PATTERN PROCESS < GRAPHIC->3 PASS >
;
LDAK3V: BSR	CKGRC			; CHECK GRAPHIC CHARACTER
	BMI	LDAK3W			; BR. IF MATHEMATICS CHARACTER (CREATE UNDERLINE)
	BEQ	LDAK3W			; BR. IF NOT GRAPHIC CHARACTER (CREATE UNDERLINE)
	BSR	LDAK2N:16		; EACH ANK PROCESS
	BSET.W	#QA3PAS,@(YMODEF,FP)	; SET DUMMY FLAG (VERTICAL ENALRGE 3 PASS)
	BSR	CHKEDT:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	AKVBG3:16		; MAKE VERTICAL ENLARGE (3 PASS)
	BSR	CPYIMG:16		; COPY PATTERN TO IMAGE BUFFER
	BCLR.W	#QA3PAS,@(YMODEF,FP)	; RESET DUMMY FLAG (VERTICAL ENALRGE 3 PASS)
	MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
	RTS
	;
LDAK3W: BSR	LDAK2N:16		; EACH ANK PROCESS
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LDA3_6			; BR. IF SPACE CODE
	BSET.W	#QA3PAS,@(YMODEF,FP)	; SET DUMMY FLAG (VERTICAL ENALRGE 3 PASS)
	BSR	CHKEDT:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	AKVEN3:16		; MAKE VERTICAL ENLARGE (3 PASS)
	BSR	CPYIMG:16		; COPY PATTERN TO IMAGE BUFFER
	BCLR.W	#QA3PAS,@(YMODEF,FP)	; RESET DUMMY FLAG (VERTICAL ENALRGE 3 PASS)
	BTST.W	#QAUNDL,@(YMODEF,FP)	;
	BEQ	LDA3_4			; BR. IF NOT UNDERLINE
	MOV.W	R5,@-SP 		;+ SAVE END POINTER
	BSR	ULANK1			; CREATE UNDERLINE
	MOV.W	@SP+,R2 		;+ UNSAVE END POINTER
	CMP.W	R2,R5			;
	BCC	LDA3_4			; BR. IF CREATE LINE END PTR >= EDIT END PTR
	XCH	R2,R5			; EXCHANGE END POINTER
LDA3_4: MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
	RTS
	;
LDA3_6: BTST.W	#QAUNDL,@(YMODEF,FP)	;
	BEQ	LDAG_2			; BR. IF NOT UNDERLINE
	BSR	ULANK4:16		; CREATE UNDERLINE
	BRA	LDA3_4
;
; << SUB >>	GRAPHIC LOW PATTERN PROCESS < 2 PASS >
;
LDAK3G: BSR	LDAK2N:16		; EACH ANK PROCESS
	BSR	MKGRP:16		; MAKE GRAPHIC 2ND PASS
	CMP.B	#H'75,@(YCODEF+1,FP)    ;
	BEQ	LDAG_2			; BR. IF LOWER INTEGRAL
	BSR	CHKEDT:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	CPYIMG:16		; COPY PATTERN TO IMAGE BUFFER
	MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
LDAG_2: RTS
	.PAGE
;
; << SUB >>	CHECK GRAPHIC CHARACTER
;
;	IN	FP : TEXT BUFFER POINTER
;
;	OUT	R5 : H'00 ... NOT GRAPHIC CHARACTER (H'000->H'12F/H'160->H'16F/H'180->H'1FF)
;		     H'01 ...     GRAPHIC CHARACTER (H'130->H'15F/H'174->H'175)
;		     H'80 ... MATHEMATICS CHARACTER (H'170->H'17E < EXCEPT H'174->H'175 >)
;				(H'01/H'80 ... INVALID SCRIPT)
;		FP : TEXT BUFFER POINTER
;
;	USE	R0,FP
;
CKGRC:	CLR.B	R5			; RESET CHARACTER FLAG
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CKGR_4			; BR. IF OCR-B CHARACTER (H'8xxx)
	BTST.W	#QAKCDH,@(YCODEF,FP)	;
	BEQ	CKGR_4			; BR. IF STANDARD or KATAKANA CHARACTER (H'000->H'0FF)
	TST.B	@(YCODEF+1,FP)		;
	BMI	CKGR_4			; BR. IF DOWNLOAD CHARACTER (H'180->H'1FF)
	CMP.B	#H'30,@(YCODEF+1,FP)    ;
	BCS	CKGR_4			; BR. IF INTERNATIONAL CHARACTER (etc.) (H'100->H'12F)
	MOV.B	#01,R5			; SET GRAPHIC CHARACTER FLAG
	CMP.B	#H'60,@(YCODEF+1,FP)    ;
	BCS	CKGR_4			; BR. IF GRAPHIC CHARACTER
	CMP.B	#H'70,@(YCODEF+1,FP)    ;
	BCC	CKGR_2			; BR. IF MATHEMATICS CHARACTER FLAG (H'170->H'17E)
	CLR.B	R5			; RESET CHARACTER FLAG
	BRA	CKGR_4
	;
CKGR_2: CMP.B	#H'74,@(YCODEF+1,FP)    ;
	BEQ	CKGR_4			; BR. IF UPPER INTEGRAL (H'174)
	CMP.B	#H'75,@(YCODEF+1,FP)    ;
	BEQ	CKGR_4			; BR. IF LOWER INTEGRAL (H'175)
	MOV.B	#H'80,R5                ; SET MATHEMATICS CHARACTER FLAG (H'170->H'17E)
CKGR_4: TST.B	R5			; CHECK CHARACTER FLAG
	RTS
	.PAGE
;
;	UNDERLINE PATTERN TO IMAGE BUFFER < VERTICAL ENLARGE 2 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	EP R4 : CREATE LINE START POINTER
;		   R5 : CREATE LINE END   POINTER
;
;	USE	R0->FP,EP
;
ULANK1: BTST.W	#QAVENL,@(YMODEF,FP)	;
	BEQ	ULA1_6			; BR. IF NOT VERTICAL ENLARGE
	BSR	ULANK5			; GET START POINTER
	ADD.W	#-1,R3			;
ULA1_2: MOV.B	@R5,R0			; GET IMAGE BUFFER DATA
	OR.B	#H'01,R0                ; 921130
	MOV.B	R0,@R5			; SAVE IT
	ADDS.B	#3,R5			; UPDATE POINTER
	SCB/F	R3,ULA1_2		; BR. IF NOT END
ULA1_6: RTS
;
;	UNDERLINE PATTERN TO IMAGE BUFFER < NORMAL >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	EP R4 : CREATE LINE START POINTER
;		   R5 : CREATE LINE END   POINTER
;
;	USE	R0->FP,EP
;
ULANK2: MOV.W	R5,@-SP 		;+ SAVE END POINTER
	BSR	CKGRC			; CHECK GRAPHIC CHARACTER
	BMI	ULA2_2			; BR. IF MATHEMATICS CHARACTER
	BNE	ULA2_6			; BR. IF GRAPHIC CHARACTER
ULA2_2: MOV.W	@SP+,R5 		;+ UNSAVE END POINTER
	BTST.W	#QAUNDL,@(YMODEF,FP)	;
	BEQ	ULA1_6			; BR. IF NOT UNDERLINE
	BSR	ULANK5			; GET START POINTER
	ADD.W	#-1,R3			;
ULA2_4: ADD.W	#2,R5			; UPDATE POINTER
	MOV.B	@R5,R0			; GET IMAGE BUFFER DATA
	OR.B	#H'80:8,R0              ; ADDER UNDERLINE DATA
;	OR.B	#H'08:8,R0      ;921123 ; ADDER UNDERLINE DATA
	MOV.B	R0,@R5+ 		; SAVE IT
	SCB/F	R3,ULA2_4		; BR. IF NOT END
	RTS
	;
ULA2_6: MOV.W	@SP+,R5 		;+ UNSAVE END POINTER
	RTS
;
; << SUB >>	UNDERLINE PATTERN TO IMAGE BUFFER < NORMAL ANK SPACE >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	EP R4 : CREATE LINE START POINTER
;		   R5 : CREATE LINE END   POINTER
;
;	USE	R0->FP,EP
;
ULANK3: BSR	ULANK5			; GET START POINTER
	ADD.W	#-1,R3			;
ULA3_4: ADD.W	#2,R5			; UPDATE POINTER
	MOV.B	@R5,R0			; GET IMAGE BUFFER DATA
	OR.B	#H'80:8,R0              ; ADDER UNDERLINE DATA
;	OR.B	#H'08:8,R0      ;921123 ; ADDER UNDERLINE DATA
	MOV.B	R0,@R5+ 		; SAVE IT
	SCB/F	R3,ULA3_4		; BR. IF NOT END
	RTS
;
;	UNDERLINE PATTERN TO IMAGE BUFFER < VERTICAL ENLARGE 2 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	EP R4 : CREATE LINE START POINTER
;		   R5 : CREATE LINE END   POINTER
;
;	USE	R0->FP,EP
;
ULANK4: BSR	ULANK5			; GET START POINTER
	ADD.W	#-1,R3			;
ULA4_4: MOV.B	@R5,R0			; GET IMAGE BUFFER DATA
	OR.B	#H'01,R0                ; 921130
	MOV.B	R0,@R5+ 		; SAVE IT
	ADD.W	#2,R5			; UPDATE POINTER
	SCB/F	R3,ULA4_4		; BR. IF NOT END
	RTS
;
; << SUB >>	GET CREATE UNDERLINE START POINTER & PATTERN LENGTH
;
ULANK5: MOV.W	FP,@-SP 		;+ SAVE TEXT BUFFER POINTER
	MOV.W	@(ZFMTSZ+YCLMCF,FP),R1	; GET NEXT START COLUMN
	SUB.W	@(YCLMCF,FP),R1 	; CALCULATE CURRENT COLUMN
	MOV.B	@(YSPDPF,FP),R3 	; GET CURRENT COLUMN
	JSR	@GETIBP 		; GET IMAGE BUFFER POINTER (= R1)
	MOV.W	R1,R3			;
	CLR.W	R2			;
	DIVXU.W #3,R2			; CALCULATE BYTE / 3 = COLUMN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	@(YCLMCF,FP),R1 	; GET NEXT START COLUMN
	MOV.B	@(YSPDPF,FP),R3 	; GET CURRENT COLUMN
	JSR	@GETIBP 		; GET IMAGE BUFFER POINTER (= R1)
	ADD.W	#IMGBF,R1		; ADDER IMAGE BUFFER BASE
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	MOV.W	R1,R4			; SAVE START POINTER
	MOV.W	R1,R5			;
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	@SP+,FP 		;+ UNSAVE TEXT BUFFER POINTER
;	RTS
;
;	<< ADJUST CREATE UNDERLINE LENGTH >>
;
;	IN	R3 : CREATE LENGTH (= n)
;
;	<< Note >>	Emp.	     = n + 2
;			H-EL.	     = (n + 2) x 2
;			Emp. + H-EL. = (n + 2) x 2
;
	BTST.W	#QPEMPH,@(YMODEF,FP)	;
	BEQ	ULA5_4			; BR. IF NOT EMPHASIZE
	ADD.W	#2,R3			; ADJUST EMPHASIZE LENGTH (+2)
	BTST.W	#QPHENL,@(YMODEF,FP)	;
	BEQ	ULA5_2			; BR. IF NOT HORIZONTAL ENLARGE
	ADD.W	#2,R3			; ADJSUT HORIZONTAL ENLARGE LENGTH (+2)
ULA5_2: RTS
	;
ULA5_4: BTST.W	#QPHENL,@(YMODEF,FP)	;
	BEQ	ULA5_2			; BR. IF NOT HORIZONTAL ENLARGE
	ADDS.B	#4,R3			; ADJSUT HORIZONTAL ENLARGE LENGTH (+2)
	RTS
	.PAGE
;
; << SUB >>	NORMAL ANK PATTERN PROCESS
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	   R2 : NOT = 0 -> COPY TO EDIT BUFFER
;		   FP : TEXT BUFFER POINTER
;		EP R4 : EACH PATTERN POINTER (CG/EDIT)
;
;	USE	R0->FP,DP,EP
;
LDAK2N: JSR	@CLREDT 		; ALL CLEAR EDIT BUFFER
	MOV.W	@(YMODEF,FP),R4 	; GET MODE FLAG TO TEXT BUFFER
	MOV.W	R4,@-SP 		;+ SAVE MODE FLAG
	BCLR.W	#QAUNDL,@(YMODEF,FP)	; ADJUST MODE FLAG (ANK UNDERLINE)
	MOV.W	@(YCODEF,FP),R1 	; GET ANK CODE TO TEXT BUFFER
	TST.B	R1			;
	BPL	AK2N_2			; BR. IF GRAPHIC or STANDARD CODE
	BTST.W	#QAKCDH,R1		;
	BEQ	AK2N_2			; BR. IF NOT DOWNLOAD MODE
	JSR	@LDDWL			; GOTO DOWNLOAD PROCESS
	BRA	AK2N_C
	;
AK2N_2: BSR	CKMODE:16		; CHECK MODE FLAG
	CLR.W	R4			;
	BTST.W	#QAPROP,@(YMODEF,FP)	;
	BEQ	AK2N_4			; BR. IF NOT PROPORTIONAL MODE
	BSET.B	#0,R4			; SET PROPORTIONAL BIT
AK2N_4: BTST.W	#QACOND,@(YMODEF,FP)	;
	BEQ	AK2N_6			; BR. IF NOT CONDENSE MODE
	BSET.B	#1,R4			; SET CONDENSE BIT
AK2N_6: BTST.W	#QAP15C,@(YMODEF,FP)	;
	BEQ	AK2N_8			; BR. IF NOT 15 CPI MODE
	BSET.B	#2,R4			; SET 15 CPI BIT
AK2N_8: BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	AK2N_A			; BR. IF DRAFT MODE
	BSET.B	#3,R4			; SET LQ BIT
AK2N_A: MULXU.B #3,R4			; CALCULATE TABLE OFFSET
	JSR	@(PTCTBL:16,R4) 	; CALL EACH PROCESS
AK2N_C: LDC.B	#0,DP			; RESET < DP >
	MOV.W	@SP+,R0 		;+ UNSAVE MODE FLAG
	MOV.W	R0,@(YMODEF,FP) 	; SAVE MODE FLAG
	RTS
	.PAGE
;
;	<< PITCH MODE JUMP TABLE >>
;
PTCTBL: BRA	DRFMD:16		; (00) DRAFT PICA/ELITE MODE
	BRA	LQPRP:16		; (01) LQ PROPORTIONAL MODE
	BRA	DRCND:16		; (02) DRAFT PICA/ELITE CONDENSE MODE
	BRA	LQPRC:16		; (03) LQ PROPORTIONAL CONDENSE MODE
	BRA	DR15P:16		; (04) DRAFT 15 CPI (& PICA/ELITE) MODE
	BRA	LQPRP:16		; (05) LQ PROPORTIONAL (& 15 CPI) MODE
	BRA	DR15P:16		; (06) DRAFT 15 CPI (& CONDENSE) MODE
	BRA	LQPRC:16		; (07) LQ PROPORTIONAL CONDENSE (& 15 CPI) MODE
	;
	BRA	LQMOD:16		; (08) LQ PICA/ELITE MODE
	BRA	LQPRP:16		; (09) LQ PROPORTIONAL MODE
	BRA	LQCND:16		; (10) LQ PICA/ELITE CONDENSE MODE
	BRA	LQPRC:16		; (11) LQ PROPORTIONAL CONDENSE MODE
	BRA	LQ15P:16		; (12) LQ 15 CPI (& PICA/ELITE) MODE
	BRA	LQPRP:16		; (13) LQ PROPORTIONAL (& 15 CPI) MODE
	BRA	LQ15P:16		; (14) LQ 15 CPI (& CONDENSE) MODE
	BRA	LQPRC:16		; (15) LQ PROPORTIONAL CONDENSE (& 15 CPI) MODE
	.PAGE
;
; << SUB >>	CHECK EMPHASIZE or HORIZONTAL ENLARGE or ITALIC MODE
;
;	IN	   R2 : COPY FLAG (0 ... NOT EDIT COPY)
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : EACH PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		   R4 : PATTERN START POINTER
;		   R5 : PATTERN END   POINTER
;		   FP : TEXT BUFFER POINTER
;		IMGBF : MAKE EACH PATTERN
;
;	USE	R0->FP,DP,EP
;
CHKEDT: BSR	CHKMD:16		; CHECK MODE FLAG
	MULXU.B #3,R1			; OFFSET x 3 = TABLE OFFSET
	JSR	@(MODTBL:16,R1) 	; EXECUTE MAKE EACH PATTERN PROCESS
	LDC.B	#0,DP			; RESET < DP >
	RTS
;
;	<< EDITING MODE FLAG TABLE >>
;
MODTBL: BRA	CHKEDC:16		; (00) < DRAFT > NORMAL
	BRA	CHKED3:16		; (01) < DRAFT > EMPHASIZE
	BRA	CHKED1:16		; (02) < DRAFT > HORIZONTAL ENLARGE
	BRA	CHKEDD:16		; (03) < DRAFT > EMPHASIZE & HORIZONTAL ENLARGE
	BRA	CHKED4:16		; (04) < DRAFT > ITALIC
	BRA	CHKED5:16		; (05) < DRAFT > EMPHASIZE & ITALIC
	BRA	CHKED6:16		; (06) < DRAFT > HORIZONTAL ENLARGE & ITALIC
	BRA	CHKED7:16		; (07) < DRAFT > EMPHASIZE & HORIZONTAL ENLARGE & ITALIC
	;
	BRA	CHKEDC:16		; (08) < LQ > NORMAL
	BRA	CHKED0:16		; (09) < LQ > EMPHASIZE
	BRA	CHKED1:16		; (10) < LQ > HORIZONTAL ENLARGE
	BRA	CHKED2:16		; (11) < LQ > EMPHASIZE & HORIZONTAL ENLARGE
	BRA	CHKED8:16		; (12) < LQ > ITALIC
	BRA	CHKED9:16		; (13) < LQ > EMPHASIZE & ITALIC
	BRA	CHKEDA:16		; (14) < LQ > HORIZONTAL ENLARGE & ITALIC
	BRA	CHKEDB:16		; (15) < LQ > EMPHASIZE & HORIZONTAL ENLARGE & ITALIC
	.PAGE
;
;	<< NORMAL FOR LQ >>
;	<< NORMAL FOR DRAFT >>
;
CHKEDC: BTST.B	#QPREVS,@(YMODKF,FP)	;\ 9/MAR/1992 REVERSE
	BNE	CHKE_Z			;\
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BEQ	CHKE_2			; BR. IF NOT STYLE MODE
CHKE_Z: BSR	CPYEDT:16		; COPY PATTERN TO EDIT BUFFER
CHKE_2: RTS
;
;	<< EMPHASIZE FOR LQ >>
;
CHKED0: BSR	CKEDCP:16		; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHK0_4			; BR. IF OCR-B MODE
CHK0_2: JSR	@EMPLQ			; MAKE EMPHASIZE PATTERN
	RTS
	;
CHK0_4: JSR	@EMPKJ			; MAKE EMPHASIZE PATTERN FOR KANJI
	RTS
;
;	<< EMPHASIZE FOR DRAFT >>
;
CHKED3: BSR	CKEDCP:16		; CHECK EDIT COPY
	BTST.W	#QAP15C,@(YMODEF,FP)	;
	BNE	CHK3_2			; BR. IF 15 CPI MODE
	BTST.W	#QACOND,@(YMODEF,FP)	;
	BNE	CHK0_2			; BR. IF CONDENSE MODE
CHK3_2: JSR	@HELLQ			; MAKE EMPHASIZE PATTERN
	RTS
;
;	<< HORIZONTAL ENLARGE FOR LQ >>
;	<< HORIZONTAL ENLARGE FOR DRAFT >>
;
CHKED1: BSR	CKEDCP:16		; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHK1_2			; BR. IF OCR-B MODE
	JSR	@HELLQ			; MAKE HORIZONTAL ENLARGE PATTERN
	RTS
	;
CHK1_2: JSR	@HELKJ			; MAKE HORIZONTAL ENLARGE PATTERN FOR KANJI
	RTS
;
;	<< EMPHASIZE & HORIZONTAL ENLARGE FOR LQ >>
;
CHKED2: BSR	CKEDCP:16		; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHK2_4			; BR. IF OCR-B MODE
CHK2_2: JSR	@HEPLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	RTS
	;
CHK2_4: JSR	@HEPKJ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN FOR KANJI
	RTS
;
;	<< EMPHASIZE & HORIZONTAL ENLARGE FOR DRAFT >>
;
CHKEDD: BSR	CKEDCP:16		; CHECK EDIT COPY
	BTST.W	#QAP15C,@(YMODEF,FP)	;
	BNE	CHKD_2			; BR. IF 15 CPI MODE
	BTST.W	#QACOND,@(YMODEF,FP)	;
	BNE	CHK2_2			; BR. IF CONDENSE MODE
CHKD_2: JSR	@HELLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	JSR	@HELLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	RTS
;
;	<< ITALIC FOR DRAFT >>
;
CHKED4: BSR	CKEDCP			; CHECK EDIT COPY
	JSR	@AKDIN			; MAKE ITALIC PATTERN
	RTS
;
;	<< EMPHASIZE & ITALIC FOR DRAFT >>
;
CHKED5: BSR	CKEDCP			; CHECK EDIT COPY
	BTST.W	#QAP15C,@(YMODEF,FP)	;
	BNE	CHK5_4			; BR. IF 15 CPI MODE
	BTST.W	#QACOND,@(YMODEF,FP)	;
	BNE	CHK5_2			; BR. IF CONDENSE MODE
CHK5_4: JSR	@HELLQ			; MAKE EMPHASIZE PATTERN
	BRA	CHK7_6
	;
CHK5_2: JSR	@EMPLQ			; MAKE EMPHASIZE FOR DRAFT
	BRA	CHK7_6
;
;	<< HORIZONTAL ENLATRGE & ITALIC FOR DRAFT >>
;
CHKED6: BSR	CKEDCP			; CHECK EDIT COPY
	JSR	@HELLQ			; MAKE HORIZONTAL ENLARGE PATTERN
	BRA	CHK7_6
;
;	<< EMPHASIZE & HORIZONTAL ENLATRGE & ITALIC FOR DRAFT >>
;
CHKED7: BSR	CKEDCP			; CHECK EDIT COPY
	BTST.W	#QAP15C,@(YMODEF,FP)	;
	BNE	CHK7_4			; BR. IF 15 CPI MODE
	BTST.W	#QACOND,@(YMODEF,FP)	;
	BNE	CHK7_2			; BR. IF CONDENSE MODE
CHK7_4: JSR	@HELLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	JSR	@HELLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	BRA	CHK7_6
	;
CHK7_2: JSR	@HEPLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
CHK7_6: JSR	@AKDIN			; MAKE ITALIC PATTERN
	RTS
;
;	<< ITALIC FOR LQ >>
;
CHKED8: BSR	CKEDCP			; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHK8_4			; BR. IF OCR-B MODE
CHK8_2: JSR	@AKLIN			; MAKE ITALIC PATTERN
	RTS
	;
CHK8_4: JSR	@KJITL			; MAKE ITALIC PATTERN FOR KANJI
	RTS
;
;	<< EMPHASIZE & ITALIC FOR LQ >>
;
CHKED9: BSR	CKEDCP			; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHK9_2			; BR. IF OCR-B MODE
	JSR	@EMPLQ			; MAKE EMPHASIZE PATTERN
	BRA	CHK8_2
	;
CHK9_2: JSR	@EMPKJ			; MAKE EMPHASIZE PATTERN FOR KANJI
	BRA	CHK8_4
;
;	<< HORIZONTAL ENLATRGE & ITALIC FOR LQ >>
;
CHKEDA: BSR	CKEDCP			; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHKA_2			; BR. IF OCR-B MODE
	JSR	@HELLQ			; MAKE HORIZONTAL ENLARGE PATTERN
	BRA	CHK8_2
	;
CHKA_2: JSR	@HELKJ			; MAKE HORIZONTAL ENLARGE PATTERN FOR KANJI
	BRA	CHK8_4
;
;	<< EMPHASIZE & HORIZONTAL ENLATRGE & ITALIC FOR LQ >>
;
CHKEDB: BSR	CKEDCP			; CHECK EDIT COPY
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CHKB_2			; BR. IF OCR-B MODE
	JSR	@HEPLQ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	BRA	CHK8_2
	;
CHKB_2: JSR	@HEPKJ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN FOR KANJI
	BRA	CHK8_4
;
;	<< CHECK EDIT COPY FLAG >>
;
CKEDCP: TST.B	R2			;
	BNE	CHKC_2			; BR. IF COPY END
	BSR	CPYEDT:16		; COPY PATTERN TO EDIT BUFFER
CHKC_2: RTS
	.PAGE
;
;	<< PICA / ELITE MODE >> 			< DRAFT >
;
DRFMD:	CMP.W	#"_",@(YCODEF,FP)       ;
	BEQ	MAKE5F:16		; BR. IF 5FH CHARACTER
	BSR	CKSCRT:16		; CHECK SCRIPT MODE
	BNE	DRFM_4			; BR. IF SCRIPT MODE
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	DRFM_2			; BR. IF ANK SPACE
	BSR	CVDR10:16		; CONVERSION ANK CODE (10/12 CPI)
DRFM_2: MOV.W	#ZDR10,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
	;
DRFM_4: CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	DRFM_6			; BR. IF ANK SPACE
	BSR	CVDR15:16		; CONVERSION ANK CODE (15 CPI)
	MOV.W	#ZDR15,R3		; SET PATTERN LENGTH (COLUMN)
	BSR	CPYSCR:16		; MAKE SCRIPT PATTERN
	RTS
	;
DRFM_6: MOV.W	#ZDR15,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
;
;	<< PICA / ELITE MODE >> 			< LQ >
;
LQMOD:	CMP.W	#"_",@(YCODEF,FP)       ;
	BEQ	MAKE5F:16		; BR. IF 5FH CHARACTER
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	LQOCRB			; BR. IF OCR-B MODE (SKIP SCRIPT)
	BSR	CKSCRT:16		; CHECK SCRIPT MODE
	BNE	LQMD_4			; BR. IF SCRIPT MODE
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQMD_2			; BR. IF ANK SPACE
	BSR	CVLQ10:16		; CONVERSION ANK CODE (10/12 CPI)
LQMD_2: MOV.W	#ZLQ10,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
	;
LQMD_4: CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQMD_6			; BR. IF ANK SPACE
	BSR	CVLQ15:16		; CONVERSION ANK CODE (15 CPI)
	MOV.W	#ZLQ15,R3		; SET PATTERN LENGTH (COLUMN)
	BSR	CPYSCR:16		; MAKE SCRIPT PATTERN
	RTS
	;
LQMD_6: MOV.W	#ZLQ15,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
	;
LQOCRB: BSR	CVOCRB:16		; CONVERSION ANK CODE (OCR-B)
	TST.B	R3			;
	BEQ	LQOC_4			; BR. IF KNAJI CG
	MOV.W	#ZOCR2,R3		; SET PATTERN LENGTH (COLUMN)
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-2,R3			; ADJUST COUNTER
	MOV.W	#BSRTB,R2		; SET BIT SEQUENCE REVERSE TABLE
LQOC_2: MOV.B	@(2,R4),R2		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@(1,R4),R2		;
	MOV.B	R2,@R0+ 		;
	MOV.B	@R4,R2			;
	MOV.B	R2,@R0+ 		;
	ADDS.B	#3,R4			; UPDATE OCR-B CG FOR INNER ROM
	SCB/F	R3,LQOC_2		; BR. IF NOT END
	CLR.B	@R0+			; CLEAR DUMMY PATTERN
	CLR.B	@R0+			;
	CLR.B	@R0+			;
	MOV.W	@SP+,R4 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	POPEP				;+ UNSAVE < DP > (NEW EP)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	#01,R2			; SET EDITING MODE FLAG (COPY EDIT)
	RTS
	;
LQOC_4: MOV.W	#ZOCRB,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			;
	RTS
	.PAGE
;
;	<< PROPORTIONAL MODE >> 			< LQ >
;
LQPRP:	BSR	CKSCRT:16		; CHECK SCRIPT MODE
	BNE	LQPR_4			; BR. IF SCRIPT MODE
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQPR_2			; BR. IF ANK SPACE
	BSR	CVLQ10:16		; CONVERSION ANK CODE (10/12 CPI)
LQPR_2: BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	CLR.W	R2			; SET NO COPY FLAG
	RTS
	;
LQPR_4: CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQPR_5			; BR. IF ANK SPACE
	BSR	CVLQ15:16		; CONVERSION ANK CODE (15 CPI)
	BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	BSR	CPYSCR:16		; MAKE SCRIPT PATTERN
	RTS
	;
LQPR_5: BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	CLR.W	R2			;
	RTS
	;
LQPR_6: MOV.W	#ZLQ10/3,R3		; SET GRAPHIC / STANDARD LENGTH (1/3)
	MOV.W	R3,R2			;
	BSR	CKGRC			;
	BNE	LQPR_A			; BR. IF GRAPHIC (SKIP SCRIPT)
	BTST.W	#QASUPS,@(YMODEF,FP)	;
	BNE	LQPR_8			; BR. IF SUPERSCRIPT
	BTST.W	#QASUBS,@(YMODEF,FP)	;
	BEQ	LQPR_A			; BR. IF NOT SUBSCRIPT
LQPR_8: MOV.W	#ZLQ15/2,R3		; SET SCRIPT LENGTH (1/2)
	CLR.W	R2			;
LQPR_A: SHLL.W	R3			; LENGTH x 2
	ADD.W	R2,R3			;
	BTST.W	#QAKCDH,@(YCODEF,FP)	;
	BNE	LQPR_D			; BR. IF GRAPHIC CODE
	LDC.B	#PAGE PRPTB,DP		;
	MOV.W	#PRPTB,R2		; SET PROPORTIONAL TABLE
	MOV.B	@(YCODEF+1,FP),R2	; GET ANK CODE
	MOV.B	@R2,R2			; GET PRE. SPACE
	LDC.B	#0,DP			; RESET < DP >
	EXTU	R2			;
	MOV.W	R2,R0			;
	MOV.W	R0,@-SP 		;
	BTST.W	#QASUPS,@(YMODEF,FP)	;
	BNE	LQPR_B			; BR. IF SUPERSCRIPT
	BTST.W	#QASUBS,@(YMODEF,FP)	;
	BEQ	LQPR_C			; BR. IF NOT SUBSCRIPT
LQPR_B: CLR.W	R0			;
LQPR_C: SHLL.W	R2			; PRE. SPACE LENGTH x 2
	ADD.W	R0,R2			; PRE. SPACE LENGTH x 3
	MULXU.B #3,R2			;
	MOV.W	@SP+,R0 		;
	BTST.B	#0,R2			;
	BEQ	LQPR_E			; BR. IF ADJUST EVEN
	ADDS.B	#3,R2			; ADJUST 1 COLUMN
LQPR_E: ADD.W	R2,R4			; ADJUST KANJI CG POINTER
	BTST.B	#0,R0			;
	BEQ	LQPR_F			; BR. IF PRE. SPACE EVEN
	ADD.W	#1,R0			;
LQPR_F: SUB.W	R0,R3			; ADJUST PATTERN LENGTH
LQPR_D: RTS
	.PAGE
;
;	<< PICA / ELITE CONDENSE MODE >>		< DRAFT >
;
DRCND:	CMP.W	#"_",@(YCODEF,FP)       ;
	BEQ	MAKE5F:16		; BR. IF 5FH CHARACTER
	BSR	CKSCRT:16		; CHECK SCRIPT MODE
	BNE	DRCN_4			; BR. IF SCRIPT MODE
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	DRCN_2			; BR. IF ANK SPACE
	BSR	CVDR10:16		; CONVERSION ANK CODE (10/12 CPI)
DRCN_2: MOV.W	#ZDR10,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
	;
DRCN_4: CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	DRCN_6			; BR. IF ANK SPACE
	BSR	CVDR15:16		; CONVERSION ANK CODE (15 CPI)
	MOV.W	#ZDR15,R3		; SET PATTERN LENGTH (COLUMN)
	BSR	CPYSCR:16		; MAKE SCRIPT PATTERN
	RTS
	;
DRCN_6: MOV.W	#ZDR15,R3		; SET PATTERN LENGTH (COLUMN)
	CLR.W	R2			;
	RTS
;
;	<< PICA / ELITE CONDENSE MODE >>		< LQ >
;
LQCND:	CMP.W	#"_",@(YCODEF,FP)       ;
	BEQ	MAKE5F:16		; BR. IF 5FH CHARACTER
	BSR	CKSCRT:16		; CHECK SCRIPT MODE
	BNE	LQCN_4			; BR. IF SCRIPT MODE
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQCN_2			; BR. IF ANK SPACE
	BSR	CVLQ10:16		; CONVERSION ANK CODE (10/12 CPI)
	MOV.W	#ZLQ10,R3		; SET PATTERN LENGTH (COLUMN)
	BRA	LQCN_6
	;
LQCN_2: MOV.W	#ZLQ10/2,R3		; SET PATTERN LENGTH (COLUMN)
LQCN_3: CLR.W	R2			;
	RTS
	;
LQCN_4: CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQCN_8			; BR. IF ANK SPACE
	BSR	CVLQ15:16		; CONVERSION ANK CODE (15 CPI)
	MOV.W	#ZLQ15,R3		; SET PATTERN LENGTH (COLUMN)
	BSR	CPYSCR:16		; MAKE SCRIPT PATTERN
LQCN_6: BSR	MKCMP:16		; MAKE COMPRESS PATTERN
	RTS
	;
LQCN_8: MOV.W	#ZLQ15/2,R3		; SET PATTERN LENGTH (COLUMN)
	BRA	LQCN_3
	.PAGE
;
;	<< PROPORTIONAL CONDENSE MODE >>		< LQ >
;
LQPRC:	BSR	CKSCRT			; CHECK SCRIPT MODE
	BNE	LQPC_4			; BR. IF SCRIPT MODE
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQPC_2			; BR. IF ANK SPACE
	BSR	CVLQ10:16		; CONVERSION ANK CODE (10/12 CPI)
	BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	BRA	LQCN_6
	;
LQPC_2: BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	BRA	LQCN_3
	;
LQPC_4: BSR	CVLQ15:16		; CONVERSION ANK CODE (15 CPI)
	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQPC_8			; BR. IF ANK SPACE
	BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	BSR	CPYSCR:16		; MAKE SCRIPT PATTERN
	BRA	LQCN_6
	;
LQPC_8: BSR	LQPR_6			; GET CURRENT CHARACTER COLUMN
	BRA	LQCN_3
	.PAGE
;
;-------------------------------------------
;
; << SUB >>	CHECK SCRIPT MODE FLAG
;
;	IN	FP : TEXT BUFFER POINTER
;
;	OUT	R0 : = 0 ... NOT SCRIPT MODE
;		FP : TEXT BUFFER POINTER
;
CKSCRT: BSR	CKGRC			; CHECK GRAPHIC CODE
	BNE	CKSC_6			; BR. IF GRAPHIC/MATHEMATICS CHARACTER
CKSC_2: BTST.W	#QASUPS,@(YMODEF,FP)	;
	BNE	CKSC_4			; BR. IF SUPERSCRIPT MODE
	BTST.W	#QASUBS,@(YMODEF,FP)	;
	BEQ	CKSC_6			; BR. IF NOT SUBSCRIPT MODE
CKSC_4: MOV.B	#01,R0			; SET SCRIPT MODE FLAG
	RTS
	;
CKSC_6: CLR.B	R0			; SET NOT SCRIPT MODE FLAG
	RTS
	.PAGE
;------------------------------------------------------------
;	<< 15 CPI MODE >>		; < DRAFT >
DR15P:
	BTST.W	#QASUPS,@(YMODEF,FP)	; 920130 SUPER SCRIPT
	BNE	DRSCP			;
	BTST.W	#QASUBS,@(YMODEF,FP)	; 920130 SUB SCRIPT
	BNE	DRSCP			;
	BTST.W	#QAKCDH,R1		; ?
	BNE	DRSCP			;
	CMP.B	#H'5C,R1
	BEQ	DRSCP
	BSR	CGDR15:16		; 920127 15CPI NEW DRAFT
	MOV.W	#8,R3			; SET PATTERN LENGTH (COLUMN)
	BRA	LQ15_2
	.PAGE
;
DRSCP:	CLR.B	R0
	BSR	CVDR15:16		; CONVERSION ANK CODE (15 CPI)
	MOV.W	#8,R3			; SET PATTERN LENGTH (COLUMN)
	BRA	LQS1P
;
LQSCP:	CLR.B	R0
	BSR	CVLQ15:16		; CONVERSION ANK CODE (15 CPI)
	MOV.W	#24,R3			; SET PATTERN LENGTH (COLUMN)
LQS1P:	CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQ15_6			; BR. IF ANK SPACE
	BSR	CKSCRT			; CHECK SCRIPT MODE
	BNE	CPYSCR:16		; BR. IF SCRIPT MODE (MAKE SCRIPT PATTERN)
	BSR	CPY15C:16		; MAKE 15 CPI PATTERN
	RTS
	.PAGE
;
;	<< 15 CPI MODE >>		; < LQ >
;
LQ15P:	BTST.W	#QASUPS,@(YMODEF,FP)	; 920130 SUPER SCRIPT
	BNE	LQSCP			;
	BTST.W	#QASUBS,@(YMODEF,FP)	; 920130 SUB SCRIPT
	BNE	LQSCP			;
	BTST.W	#QAKCDH,R1		; ?
	BNE	LQSCP			;
	CMP.B	#H'5C,R1
	BEQ	LQSCP
	BSR	CGLQ15:16		; 920127 15CPI NEW LQ
	MOV.W	#24,R3			; SET PATTERN LENGTH (COLUMN)
LQ15_2: CMP.W	#ZAKSP:16,@(YCODEF,FP)	;
	BEQ	LQ15_6			; BR. IF ANK SPACE
	CMP.W	#"_",@(YCODEF,FP)       ;
	BEQ	MAKE5F:16		; BR. IF 5FH CHARACTER
	BSR	CPYEDT:16		; IN 920128
	RTS
LQ15_6: CLR.W	R2			;
	RTS
	.PAGE
;--------------------------------------------------
;
;	15CPI NEW LQ FONT 920127
CGLQ15: LDC.B	#PAGE NLQ15,EP		;
	MOV.W	#NLQ15,R4		;
	CMP.B	#7,R1			; 920509
	BEQ	LQ15_1			; 920509
	AND.B	#ZN-H'80,R1             ;
	SHLL.W	R1			;
	MOV.B	R1,R4			;
	MOV.W	@R4,R4			;
	LDC.B	#PAGE CG0020,EP 	;
	RTS
	.PAGE
;
LQ15_1: MOV.W	#H'271C,R1              ; 920509
	BSR	GETACG:16		;
	RTS
;
;	15CPI NEW DR FONT 920127
CGDR15: LDC.B	#PAGE NDR15,EP		;
	MOV.W	#NDR15,R4		;
	AND.B	#ZN-H'80,R1             ;
	SHLL.W	R1			;
	MOV.B	R1,R4			;
	MOV.W	@R4,R4			;
	LDC.B	#PAGE CG0020,EP 	;
	RTS
	.PAGE
;----------------------------------------------------
;
; << SUB >>	MAKE 5F CHARACTER
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH
;		EP R4 : PATTERN POINTER
;		   FP : TEXT BUFFER POINTER
;
MAKE5F: CLR.W	R0			;
	BTST.W	#QAELIT,@(YMODEF,FP)	;
	BEQ	MAK5_2			; BR. IF NOT ELITE
	BSET.B	#0,R0			; SET ELITE BITS
MAK5_2: BTST.W	#QAP15C,@(YMODEF,FP)	;
	BEQ	MAK5_3			; BR. IF NOT 15 CPI
	BSET.B	#1,R0			; SET 15 CPI BITS
MAK5_3: BTST.W	#QACOND,@(YMODEF,FP)	;
	BEQ	MAK5_4			; BR. IF NOT CONDENSE
	BSET.B	#2,R0			; SET CONDENSE BITS
MAK5_4: BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	MAK5_6			; BR. IF NOT LQ MODE
	BSET.B	#3,R0			; SET LQ BITS
MAK5_6: SHLL.W	R0			; OFFSET x 2 = TABLE OFFSET
	LDC.B	#PAGE LEN5F,DP		;
	MOV.W	@(LEN5F:16,R0),R3	; GET PATTERN LENGTH
	LDC.B	#0,DP			; RESET < DP >
	EXTU	R3			;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
MAK5_8: CLR.B	@R0+			; SET SPACE DATA
	CLR.B	@R0+			;
	MOV.B	#H'80,@R0+              ; SET 5FH CHARACTER DATA
	SCB/F	R3,MAK5_8		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	POPEP				;+ UNSAVE < DP > (NEW EP)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	#01,R2			; SET EDITING MODE FLAG (COPY EDIT)
	JSR	@CPSCRT 		; CHECK & MAKE SCRIPT PATTERN
	BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	CKSC_4			; BR. IF NOT LQ MODE
	BTST.W	#QAP15C,@(YMODEF,FP)	;
	BNE	CKSC_4			; BR. IF 15 CPI
	BTST.W	#QACOND,@(YMODEF,FP)	;
	BEQ	CKSC_4			; BR. IF NOT CONDENSE MODE
	JMP	@MKCMP			; MAKE CONDENSE PATTERN
	.PAGE
;
; << SUB >>	MAKE BLOCK GRAPHIC PATTERN TO EDIT BUFFER	< 2ND PASS >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : GRAPHIC PATTERN START POINTER (CG/EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : GRAPHIC PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;		CODE = H'30->H'5F/H'74->H'75 (truth = H'B0->H'DF/H'F4->H'F5)
;
;	USE	R0->FP,DP,EP
;
MKGRP:	BSR	CKGRC			; CHECK GRAPHIC CODE
	BEQ	MKGR_2			; BR. IF NOT GRAPHIC CODE
	BMI	MKGR_2			; BR. IF MATHEMATICS CHARACTER
	CMP.B	#H'32,@(YCODEF+1,FP)    ;
	BLS	MKGR_3			; BR. IF HATCHING PATTERN (H'B0->H'B2)
	CMP.B	#H'70,@(YCODEF+1,FP)    ;
	BCS	MKGR_6			; BR. IF DATA CODE < H'70 (RULED LINE)
	CMP.B	#H'74,@(YCODEF+1,FP)    ;
	BEQ	MKGR_6			; BR. IF DATA UPPER INTEGRAL
MKGR_2: RTS
;
;	GRAPHIC 25->30 PIN DATA = 1->6 PIN (HATCHING PATTERN H'B0->H'B2)
;
MKGR_3: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
MKGR_4: MOV.B	@R4,R1			; GET 1->8 PIN DATA
	AND.B	#H'3F,R1                ; MASK DATA
	MOV.B	R1,@R0+ 		; SAVE IT
	CLR.B	@R0+			; SET NULL DATA
	CLR.B	@R0+			;
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,MKGR_4		; BR. IF NOT END
MKGR_5: MOV.W	@SP+,R4 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	POPEP				;+ UNSAVE < DP > (NEW EP)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
;
;	GRAPHIC DATA 25->30 PIN = 23->24 PIN (RULED LINE H'B3->H'DF/H'F4->H'F5)
;
MKGR_6: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
MKGR_7: MOV.B	@(2,R4),R1		; GET 17->24 PIN DATA
	CLR.B	R2			;
	AND.B	#H'C0,R1                ; GET 23->24 PIN DATA
	BEQ	MKGR_9			; BR. IF DATA = 0
	BTST.B	#7,R1			;
	BEQ	MKGR_8			; BR. IF 24 PIN = 0
	OR.B	#H'2A,R2                ;
MKGR_8: BTST.B	#6,R1			;
	BEQ	MKGR_9			; BR. IF 23 PIN = 0
	OR.B	#H'15,R2                ;
MKGR_9: MOV.B	R2,@R0			; SAVE MASK DATA
	CLR.B	@(1,R0) 		; SET NULL DATA
	CLR.B	@(2,R0) 		;
	ADDS.B	#3,R0			; UPDATE DESTIN. POINTER
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,MKGR_7		; BR. IF NOT END
	BRA	MKGR_5
	.PAGE
;
; << SUB >>	MAKE VERTICAL ENLARGE PATTERN
;
;	IN	   R2 : COPY FLAG (0 ... NOT COPY EDIT BUFFER)
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (CG/EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP
;
AKVEN:	BSR	CKEDCP			; CHECK EDIT COPY
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	MOV.W	#VELTB1,R2		; SET VERTICAL ENLARGE TABLE POINTER
	ADD.W	#-1,R3			;
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BNE	AKVE_4			; BR. IF OUTLINE/SHADOW
AKVE_2: MOV.B	@(1,R4),R2		; GET 2ND PATTERN
	MOV.B	@R2,R1			; GET LOW 4 BITS (2ND) (<- TABLE 1)
	AND.B	#H'0F,R1                ;
	MOV.B	R1,@(2,R4)		; SAVE 17->24 PIN DATA
	MOV.B	@R4,R2			; GET 1ST PATTERN
	MOV.B	@(256,R2),R1		; GET HIGH 4 BITS (1ST) (<- TABLE 2)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@R2,R1			; GET LOW 4 BITS (1ST) (<- TABLE 1)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKVE_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	;
AKVE_4: CLR.B	R0			; CLEAR MASK DATA
	BTST.B	#2,@(1,R4)		;
	BEQ	AKVE_6			; BR. IF 11 PIN DATA OFF
	BSET.B	#3,R0			; SET MASK DATA (10 PIN)
AKVE_6: MOV.B	@(1,R4),R2		; GET 2ND PATTERN
	MOV.B	@R2,R1			; GET LOW 4 BITS (2ND) (<- TABLE 1)
	AND.B	#H'0F,R1                ;
	OR.B	R0,R1			;
	MOV.B	R1,@(2,R4)		; SAVE 17->24 PIN DATA
	MOV.B	@R4,R2			; GET 1ST PATTERN
	MOV.B	@(256,R2),R1		; GET HIGH 4 BITS (1ST) (<- TABLE 2)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@R2,R1			; GET LOW 4 BITS (1ST) (<- TABLE 1)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKVE_4		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	.PAGE
;
;	2ND PASS
;
AKVEN2: BSR	CKEDCP			; CHECK EDIT COPY
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	MOV.W	#VELTB4,R2		; SET VERTICAL ENLARGE TABLE POINTER
	ADD.W	#-1,R3			;
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BNE	AKV2_4			; BR. IF OUTLINE/SHADOW
AKV2_2: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET MIDDLE 4 BITS (3RD) (<- TABLE 4)
	MOV.B	R1,@(2,R4)		; SAVE 17->24 PIN DATA
	MOV.B	@(-256,R2),R1		; GET LOW 2 BITS (3RD) (<- TABLE 3)
	MOV.B	@(1,R4),R2		; GET 2ND PATTERN
	OR.B	@(256,R2),R1		; OR WITH HIGH 2 BITS (2ND) (<- TABLE 5)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@R2,R1			; GET MIDDLE 4 BITS (2ND) (<- TABLE 4)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKV2_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	;
AKV2_4: CLR.B	R0			; CLEAR MASK DATA
	CLR.B	R5			; CLEAR MASK DATA
	BTST.B	#1,@(1,R4)		;
	BEQ	AKV2_6			; BR. IF 10 PIN DATA OFF
	BSET.B	#0,R0			; SET MASK DATA
AKV2_6: BTST.B	#6,@(2,R4)		;
	BEQ	AKV2_8			; BR. IF 23 PIN DATA OFF
	BSET.B	#7,R5			; SET MASK DATA
AKV2_8: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET MIDDLE 4 BITS (3RD) (<- TABLE 4)
	OR.B	R5,R1			;
	MOV.B	R1,@(2,R4)		; SAVE 17->24 PIN DATA
	MOV.B	@(-256,R2),R1		; GET LOW 2 BITS (3RD) (<- TABLE 3)
	MOV.B	@(1,R4),R2		; GET 2ND PATTERN
	OR.B	@(256,R2),R1		; OR WITH HIGH 2 BITS (2ND) (<- TABLE 5)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@R2,R1			; GET MIDDLE 4 BITS (2ND) (<- TABLE 4)
	OR.B	R0,R1			;
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKV2_4		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	.PAGE
;
;	3RD PASS
;
AKVEN3: BSR	CKEDCP			; CHECK EDIT COPY
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
AKV3_2: MOV.W	#VELTB5,R2		; SET VERTICAL ENLARGE TABLE POINTER
	ADD.W	#-1,R3			;
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BNE	AKV3_6			; BR. IF OUTLINE/SHADOW
AKV3_4: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET HIGH 2 BITS (3RD) (<- TABLE 5)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	CLR.B	@(1,R4) 		; CLEAR 9->16 PIN DATA
	CLR.B	@(2,R4) 		; CLEAR 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKV3_4		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	;
AKV3_6: CLR.B	R0			; CLEAR MASK DATA
	BTST.B	#5,@(2,R4)		;
	BEQ	AKV3_8			; BR. IF 22 PIN DATA OFF
	BSET.B	#0,R0			; SET MASK DATA
AKV3_8: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET HIGH 2 BITS (3RD) (<- TABLE 5)
	OR.B	R0,R1			;
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	CLR.B	@(1,R4) 		; CLEAR 9->16 PIN DATA
	CLR.B	@(2,R4) 		; CLEAR 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKV3_6		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	.PAGE
;
;	BLOCK GRAPHIC DATA (H'B0->H'B2)
;
AKVBG3: BSR	CKEDCP			; CHECK EDIT COPY
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	ADD.W	#-1,R3			;
	CMP.B	#H'32,@(YCODEF+1,FP)    ;
	BHI	AKVB3R			; BR. IF GRAPHIC CODE (H'B3->H'DF/H'F4->H'F5)
	MOV.W	#VELTB4,R2		; SET VERTICAL ENLARGE TABLE POINTER
AKVB_2: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@(256,R2),R1		; GET HIGH 2 BITS (3RD) (<- TABLE 5)
	MOV.B	@R4,R2			; GET 3RD PATTERN
	OR.B	@(-256,R2),R1		; OR WITH LOW 2 BITS (1ST) (<- TABLE 3)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	MOV.B	@R2,R1			; GET MIDDLE 4 BITS (1ST) (<- TABLE 4)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	CLR.B	@(2,R4) 		; CLEAR 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKVB_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
;
;	RULED LINE DATA (H'B3->H'DF/H'F4)
;
AKVB3R: MOV.W	#VELTB5,R2		; SET VERTICAL ENLARGE TABLE POINTER
	CMP.B	#H'75,@(YCODEF+1,FP)    ;
	BEQ	AKV3R1			; BR. IF GRAPHIC H'F5 CHARACTER
AKVR_4: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@(-256*3,R2),R1 	; GET HIGH 2 BITS (3RD) (<- TABLE 2)
	AND.B	#H'F0,R1                ;
	OR.B	@R2,R1			; OR WITH HIGH 2 BITS (3RD) (<- TABLE 5)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	CLR.B	@(2,R4) 		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKVR_4		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
;
;	RULED LINE CHARACTER (H'F5)
;
AKV3R1: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET HIGH 2 BITS (3RD) (<- TABLE 5)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	CLR.B	@(1,R4) 		; SAVE 9->16 PIN DATA
	CLR.B	@(2,R4) 		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,AKV3R1		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	.PAGE
;
; << SUB >>	COPY PATTERN TO EDIT BUFFER 1	< COPY 10 CPI CG >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
CPYEDT: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	SHLR.W	R3			; LENGTH / 2
	ADD.W	#-1,R3			; ADJUST COUNTER
CPED_2: MOV.W	@R4+,R2 		; GET PATTERN
	MOV.W	R2,@R0+ 		; SAVE IT
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	SCB/F	R3,CPED_2		; BR. IF NOT END
SETPTR: MOV.W	@SP+,R4 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	POPEP				;+ UNSAVE < DP > (NEW EP)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	#01,R2			; SET EDITING MODE FLAG (COPY EDIT)
	RTS
	.PAGE
;
; << SUB >>	COPY PATTERN TO EDIT BUFFER 1	< COPY 15 CPI CG >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
CPY15C: BSR	CKGRC			; CHECK GRAPHIC CHARACTER
	BNE	CPYEDT			; BR. IF GRAPHIC CHARACTER
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
CP15_2: CLR.B	@R0			; SAVE SPACE DATA
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@(1,R0)		; SAVE IT
	MOV.B	@R4+,R2 		;
	MOV.B	R2,@(2,R0)		;
	SHLR.B	@(2,R0) 		; SHIFT TO RIGHT
	ROTXR.B @(1,R0) 		; ROTATE CARRY FLAG
	ROTXR.B @R0			; ROTATE CARRY FLAG
	SHLR.B	@(2,R0) 		;
	ROTXR.B @(1,R0) 		;
	ROTXR.B @R0			; MAKE 23->24 PIN SPACE
	ADDS.B	#3,R0			; UPDATE POINTER
	SCB/F	R3,CP15_2		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	COPY PATTERN TO EDIT BUFFER 1	< COPY 15 CPI CG - SUBSCRIPT>
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
CPYSCR: BTST.W	#QASUPS,@(YMODEF,FP)	;
	BNE	CPYSUP			; BR. IF SUPERSCRIPT MODE
CPYSUB: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			; ADJUST COUNTER
CPSB_2: CLR.B	@R0+			; SAVE SPACE DATA
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@R4+,R2 		;
	MOV.B	R2,@R0+ 		;
	SCB/F	R3,CPSB_2		; BR. IF NOT END
	BRA	SETPTR
;
; << SUB >>	COPY PATTERN TO EDIT BUFFER 1	< COPY 15 CPI CG - SUPERSCRIPT>
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
CPYSUP: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
CPSP_2: MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@R4+,R2 		;
	MOV.B	R2,@R0+ 		;
	CLR.B	@R0+			; SAVE SPACE DATA
	SCB/F	R3,CPSP_2		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	MAKE COMPRESS PATTERN TO EDIT BUFFER
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MKCMP:	SHLR.W	R3			; LENGTH / 2
	MOV.W	R3,R1			;
	BTST.B	#0,R3			;
	BEQ	MKCM_6			; BR. IF EVEN PATTERN LENGTH
	ADD.W	#1,R3			; ADJUST PATTERN LENGTH
MKCM_6: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R1,@-SP 		;+ SAVE COMPRESS LENGTH
	ADD.W	#-1,R1			; ADJUST COUNTER
	MOV.W	R4,R5			; SAVE LOAD PATTERN START POINTER
	ADDS.B	#3,R5			; ADJUST LOAD PATTERN START POINTER (DESTIN.)
MKCM_2: MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	R2,@R0+ 		;
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	R2,@R0+ 		;
	MOV.W	R5,R4			; SET NEXT POINTER
	ADDS.B	#3,R5			; SET NEXT POINTER (DESTIN.)
	SCB/F	R1,MKCM_2		; BR. IF NOT END
	MOV.W	@SP+,R1 		;+ UNSAVE COMPRESS LENGTH
	BTST.B	#0,R1			;
	BEQ	MKCM_4			; BR. IF EVEN PATTERN LENGTH
	CLR.B	@(-3,R0)		; CLEAR EXCESS PATTERN
	CLR.B	@(-2,R0)		;
	CLR.B	@(-1,R0)		;
MKCM_4: CLR.B	@R0+			; CLEAR OLD PATTERN
	CLR.B	@R0+			;
	CLR.B	@R0+			;
	SCB/F	R3,MKCM_4		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	COPY PATTERN TO IMAGE BUFFER
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (CG / EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		   R4 : PATTERN START POINTER
;		   R5 : PATTERN END   POINTER
;		   FP : TEXT BUFFER POINTER
;		IMGBF : EACH PATTERN
;
;	USE	R0->FP,EP,DP
;
;	DP R0 : IMAGE BUFFER POINTER
;
CPYIMG: BTST.B	#QPREVS,@(YMODKF,FP)	;\ 9/MAR/1992
	BEQ	CPYI_Z			;\ BR IF NOT REVERSED MODE
	JSR	@REVERS 		;\ MAKE REVERS PATTERN
CPYI_Z: MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BEQ	CPYIM3			; BR. IF NOT OUTLINE/SHADOW
	BSR	CKGRC			; CHECK GRAPHIC CHARACTER
	BMI	CPYIM2			; BR. IF MATHEMATICS CHARACTER (CREATE UNDERLINE)
	BNE	CPYIM3			; BR. IF GRAPHIC CHARACTER (CREATE UNDERLINE)
CPYIM2: JSR	@OUTSH			; MAKE OUTLINE & SHADOW
CPYIM3: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDSA:16		; GET DESTIN. POINTER (= R0 ... IMAGE BUFFER)
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	BTST.W	#QAOCRB,@(YCODEF,FP)	;
	BNE	CPYO_2			; BR. IF OCR-B MODE
	CMP.B	#ZDR10,R3		;
	BEQ	CPYDR:16		; BR. IF NORMAL DRAFT PICA
	CMP.B	#ZLQ10,R3		;
	BEQ	CPYLQ:16		; BR. IF NORMAL LQ PICA
	BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	CPYI_2			; BR. IF DRAFT MODE
CPYIM4: MOV.B	@(YSPDPF,FP),R5 	; GET SPEED/PITCH FLAG
	AND.B	#ZSPDMK,R5		; MASK SPEED FLAG
	CMP.B	#Z15SPD,R5		;
	BEQ	CPYI_8			; BR. IF LQ MIDDLE SPEED
CPYI_2: ADD.W	#-1,R3			;
CPYI_4: MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 17->24 PIN DATA
	SCB/F	R3,CPYI_4		; BR. IF NOT END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	R0,R5			; SAVE END POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;
;	<< LQ MIDDLE SPEED >>
;
CPYI_8: ADD.W	#-1,R3			;
CPYI_A: MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4,R5			; OR WITH OLD DATA TO DATA
	OR.B	@(-3,R4),R5		;
	MOV.B	R5,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@(1,R4),R5		; OR WITH OLD DATA TO DATA
	OR.B	@(-2,R4),R5		;
	MOV.B	R5,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@(2,R4),R5		; OR WITH OLD DATA TO DATA
	OR.B	@(-1,R4),R5		;
	MOV.B	R5,@R0+ 		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,CPYI_A		; BR. IF NOT END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	R0,R5			; SAVE END POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;
;	<< OCR-B MODE >>
;
CPYO_2: MOV.B	@(YSPDPF,FP),R5 	; GET SPEED/PITCH FLAG
	AND.B	#ZSPDMK,R5		; MASK SPEED FLAG
	CMP.B	#Z15SPD,R5		;
	BEQ	CPYO_8			; BR. IF OCR-B MIDDLE SPEED
	ADD.W	#-1,R3			;
CPYO_4: MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			; SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			; UPDATE IMAGE BUFFER POINTER
	SCB/F	R3,CPYO_4		; BR. IF NOT END
	MOV.W	R0,R5			; SAVE END POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	LDC.B	#0,DP			; RESET < DP >
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
;
;	<< KANJI MIDDLE SPEED >>		< 2 COLUMN COPY >
;
CPYO_8: ADD.W	#-1,R3			;
CPYO_A: MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4,R5			; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@(1,R4),R5		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@(2,R4),R5		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 17->24 PIN DATA
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; ->> 2 COLUMN COPY
	SCB/F	R3,CPYO_A		; BR. IF NOT END
	MOV.W	R0,R5			; SAVE END POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	LDC.B	#0,DP			; RESET < DP >
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;
;	<< DRAFT NORMAL PICA MODE >>
;
CPYDR:	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 17->24 PIN DATA	-> 1 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 2 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 3 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 4 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 5 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 6 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 7 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 8 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 9 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 10 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 11 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 12 COLUMN END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	R0,R5			; SAVE END POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;
;	<< LQ NORMAL PICA MODE >>
;
CPYLQ:	MOV.B	@(YSPDPF,FP),R5 	; GET SPEED/PITCH FLAG
	AND.B	#ZSPDMK,R5		; MASK SPEED FLAG
	CMP.B	#Z15SPD,R5		;
	BEQ	CPYI_8			; BR. IF LQ MIDDLE SPEED
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			; GET OLD DATA
	OR.B	@R4+,R5 		; OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		; SAVE 17->24 PIN DATA	-> 1 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 2 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 3 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 4 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 5 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 6 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 7 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 8 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 9 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 10 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 11 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 12 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 13 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 14 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 15 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 16 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 17 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 18 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 19 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 20 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 21 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 22 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 23 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 24 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 25 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 26 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 27 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 28 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 29 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 30 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 31 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 32 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 33 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 34 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 35 COLUMN END
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		;
	MOV.B	@R0,R5			;
	OR.B	@R4+,R5 		;
	MOV.B	R5,@R0+ 		; -> 36 COLUMN END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	R0,R5			; SAVE END POINTER (DESTIN.)
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER (DESTIN.)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;
; << SUB >>	CONVERSION ANK CODE TO KANJI CODE
;
;	IN	R1 : ANK CHANGE DATA CODE
;			STANDARD  : H'000->H'07F
;			KATAKANA  : H'080->H'0FF
;			GRAPHIC   : H'100->H'17F
;
;	OUT	R1 : CONVERSION KANJI CODE
;			MSB ON : OFFSET H'48 FLAG
;
;	USE	R0->FP,EP
;
;	<< DRAFT 10 CPI >>
;
CVDR10: LDC.B	#PAGE DRGRP,EP		; SET DRAFT 10 CPI GRAPHIC CODE TABLE PAGE
	MOV.W	#DRGRP,R4		; SET DRAFT 10 CPI GRAPHIC CODE TABLE BASE ADDRESS
	BTST.W	#QAKCDH,R1		;
	BNE	CVAC_4			; BR. IF DATA = GRAPHIC DATA
	MOV.W	#DR10C,R4		; SET DRAFT 10 CPI CODE TABLE BASE ADDRESS
	TST.B	R1			;
	BPL	CVAC_4			; BR. IF DATA = STANDARD CG
	MOV.W	#DRKAT,R4		; SET DRAFT 10 CPI KATAKANA CODE TABLE BASE ADDRESS
	BRA	CVAC_4
;
;	<< LQ 10 CPI >>
;
CVLQ10: LDC.B	#PAGE LQGRP,EP		; SET LQ 10 CPI GRAPHIC CODE TABLE PAGE
	MOV.W	#LQGRP,R4		; SET LQ 10 CPI GRAPHIC CODE TABLE BASE ADDRESS
	BTST.W	#QAKCDH,R1		;
	BNE	CVAC_4			; BR. IF DATA = GRAPHIC DATA
;
	BSET.B	#QKCSWC,@UMOD01:8	;+920507
	CMP.B	#7,R1			;+920507  \ PROCESS
	BEQ	WONTS1			;+920507
	BCLR.B	#QKCSWC,@UMOD01:8	;+920507
WONTS1:
;
	MOV.W	#LQ10C,R4		; SET LQ 10 CPI CODE TABLE BASE ADDRESS
	TST.B	R1			;
	BPL	CVAC_4			; BR. IF DATA = STANDARD CG
	MOV.W	#LQKAT,R4		; SET LQ 10 CPI KATAKANA CODE TABLE BASE ADDRESS
	BRA	CVAC_4
;
;	<< OCR-B CG >>
;
CVOCRB: LDC.B	#PAGE OCRTB,EP		; SET OCR-B CODE TABLE PAGE
	MOV.W	#OCRTB,R4		; SET OCR-B CODE TABLE BASE ADDRESS
	BTST.W	#QAKCDH,R1		;
	BEQ	CVOC_4			; BR. IF DATA = STANDARD CG
	MOV.W	#OCRTB1,R4		; SET OCR-B SPECIAL CODE TABLE BASE ADDRESS
	AND.B	#ZN-H'80,R1             ; CLEAR MSB
	SHLL.W	R1			; CODE x 2 (= TABLE OFFSET)
	MOV.B	R1,R4			;
CVOC_2: MOV.W	@R4,R4			; GET CHANGE INNER ROM CG ADDRESS
	LDC.B	#PAGE ZOCR00,EP 	; SET INNER ROM CG POINTER
	MOV.W	#1,R3			; SET INNER ROM FLAG
	RTS
	;
CVOC_4: AND.B	#ZN-H'80,R1             ; CLEAR MSB
	SHLL.W	R1			; CODE x 2 (= TABLE OFFSET)
	MOV.B	R1,R4			;
	TST.W	@R4			;
	BMI	CVOC_2			; BR. IF INNER ROM CG CODE
	MOV.W	@R4,R1			; GET CHANGE KANJI CODE
	BSET.W	#15,R1			; SET MSB (OFFSET H'48 MODE)
	BRA	GETACG
;
;	<< DRAFT 15 CPI >>
;
CVDR15: LDC.B	#PAGE DR15S,EP		; SET DRAFT 15 CPI SPECIAL CODE TABLE PAGE
	MOV.W	#DR15S,R4		; SET DRAFT 15 CPI SPECIAL CODE TABLE BASE ADDRESS
	BTST.W	#QAKCDH,R1		;
	BNE	CVAC_4			; BR. IF DATA = SPECIAL DATA
	MOV.W	#DR15C,R4		; SET DRAFT 15 CPI CODE TABLE BASE ADDRESS
	BRA	CVAC_4			;
;
;	<< LQ 15 CPI >>
;
CVLQ15: LDC.B	#PAGE LQ15S,EP		; SET LQ 15 CPI SPECIAL CODE TABLE PAGE
	MOV.W	#LQ15S,R4		; SET LQ 15 CPI SPECIAL CODE TABLE BASE ADDRESS
	BTST.W	#QAKCDH,R1		;
	BNE	CVAC_4			; BR. IF DATA = SPECIAL DATA
	MOV.W	#LQ15C,R4		; SET LQ 15 CPI CODE TABLE BASE ADDRESS
CVAC_4: AND.B	#ZN-H'80,R1             ; CLEAR MSB
	SHLL.W	R1			; CODE x 2 (= TABLE OFFSET)
	MOV.B	R1,R4			;
	MOV.W	@R4,R1			; GET CHANGE KANJI CODE
;
; << SUB >>	SELECT CONVERSION CODE TO KANJI CG ADDRESS
;
;	IN	   R1 : CONVERSION KANJI CODE
;		   FP : TEXT BUFFER POINTER
;
;	OUT	EP R4 : KANJI ROM CG ADDRESS
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
GETACG: CLR.W	R3			; CLEAR OFFSET = H'00
	TST.W	R1			;
	BPL	GETA_2			; BR. IF OFFSET H'00
	MOV.W	#ZKCGCL*3,R3		; SET OFFSET H'48 (KANJI HIGH CG)
GETA_2: SWAP	R1			;
	AND.B	#ZN-H'80,R1             ; CLEAR MSB
	SWAP	R1			;
	JSR	@SELKCG 		; SELECT KANJI CG
	ADD.W	R3,R4			; + OFFSET
	CLR.W	R3			; SET KANJI CG FLAG
	RTS
	.PAGE
;
; << SUB >	SET DESTINATION POINTER 1	< EDIT BUFFER 1 >
;
;	OUT	DP R0 : EDIT BUFFER (1/2) POINTER
;
SETDS1: MOV.W	#EDBF1,R0		; SET EDIT BUFFER 1 POINTER
	BRA	SETD_2
;
; << SUB >	SET DESTINATION POINTER 2	< EDIT BUFFER 2 >
;
SETDS2: MOV.W	#EDBF2,R0		; SET EDIT BUFFER 2 POINTER
SETD_2: LDC.B	#PAGE EDBF1,DP		; SET EDIT PAGE
	CLR.W	@R0+			; CLEAR UNDERFLOW AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	RTS
;
; << SUB >	SET DESTINATION POINTER 3	< IMAGE BUFFER >
;
;	OUT	DP R0 : IMAGE BUFFER POINTER
;
SETDSA: BSR	STIMGP			; SET IMAGE BUFFER POINTER
	ADD.W	#IMGBF,R0		; ADDER IMAGE BUFFER BASE
	LDC.B	#PAGE IMGBF,DP		; SET IMAGE BUFFER PAGE
	RTS
;
; << SUB >>	SET IMAGE BUFFER START POINTER
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R0 : IMAGE BUFFER POINTER
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
STIMGP: MOV.W	R4,@-SP 		;+ SAVE PATTERN POINTER
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	@(YCLMCF,FP),R1 	; GET COLUMN COUNTER
	MOV.B	@(YSPDPF,FP),R3 	; GET SPEED/PITCH FLAG
	JSR	@GETIBP 		; GET IMAGE BUFFER POINTER (= R1)
	CLR.W	R2			; PRE. SPACE VALUE
	BTST.W	#QAKCDH,@(YCODEF,FP)	;
	BEQ	STIB_4			; BR. IF KATAKANA CODE
	TST.B	@(YCODEF+1,FP)		;
	BPL	STIB_4			; BR. IF STANDARD / GRAPHIC CODE
	MOV.W	R1,@-SP 		;+ SAVE IMAGE BUFFER POINTER
	PUSHEP				;+ SAVE < EP >
	JSR	@GETDLB 		; GET DOWNLOAD PATTERN ADDRESS (R2 = PRE. SPACE)
	POPEP				;+ UNSAVE < EP >
	MOV.W	@SP+,R1 		;+ UNSAVE IMAGE BUFFER POINTER
	MULXU.B #3,R2			; CALCULATE PRE. SPACE x 3 byte
	ADD.W	R2,R1			; + UPDATE IMAGE BUFFER POINTER
STIB_4: MOV.W	R1,R0			; SAVE IMAGE BUFFER POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	@SP+,R4 		;+ UNSAVE PATTERN POINTER
	RTS
	.PAGE
;
; << SUB >>	CHECK MODE FLAG & MAKE STYLE PATTERN
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	   R1 : JUMP TABLE OFFSET
;		EP R4 : EACH PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;	NO USE	EP R4
;
;		bit0	Emphasize
;		bit1	Horizontal Enlarge
;		bit2	Italic
;		bit3	LQ Mode
;		bit4->7 No Define
;
;		<< Note >>	OCR-B -> SAME DRAFT PROCESS
;
CHKMD:	CLR.W	R1			; CLEAR MODE OFFSET
	BSR	CKGRC			; CHECK GRAPHIC CODE
	BMI	MKMD_A			; BR. IF MATHEMATICS CHARACTER
	BNE	MKMD_2			; BR. IF GRAPHIC CODE (SKIP ITALIC)
MKMD_A: BTST.W	#QPITLC,@(YMODEF,FP)	;
	BEQ	MKMD_2			; BR. IF NOT ITALIC
	BSET.B	#2,R1			; SET ITALIC MODE
MKMD_2: BTST.W	#QPEMPH,@(YMODEF,FP)	;
	BEQ	MKMD_4			; BR. IF NOT EMPHASIZE
	BSET.B	#0,R1			; SET EMPHASIZE MODE
MKMD_4: BTST.W	#QPHENL,@(YMODEF,FP)	;
	BEQ	MKMD_6			; BR. IF NOT HORIZONTAL ENLARGE
	BSET.B	#1,R1			; SET HORIZONTAL ENLARGE MODE
MKMD_6: BTST.W	#QAPROP,@(YMODEF,FP)	;
	BNE	MKMD_C			; BR. IF PROPORTIONAL MODE
	BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	MKMD_8			; BR. IF DRAFT MODE
MKMD_C: BSET.B	#3,R1			; SET LQ MODE
MKMD_8: RTS
;
; << SUB >>	CHECK MODE FLAG
;
;	IN	R1 : CHARACTER CODE
;		FP : TEXT BUFFER POINTER
;
;	OUT	R1 : CHARACTER CODE
;		FP : TEXT BUFFER POINTER
;
;	<< Note !! >>	REMAKE MODE FLAG TO TEXT BUFFER
;
CKMODE: BTST.W	#QAKCDH,R1		;
	BNE	CKMD_6			; BR. IF GRAPHIC/DOWNLOAD CODE
	TST.B	R1			;
	BPL	MKMD_8			; BR. IF NORMAL CODE (H'000->H'07F)
	BCLR.W	#QAPROP,@(YMODEF,FP)	; REMAKE PROPORTIONAL MODE (RESET)
	BCLR.W	#QAP15C,@(YMODEF,FP)	; REMAKE 15 CPI MODE (RESET)
	BCLR.W	#QASUPS,@(YMODEF,FP)	; REMAKE SUPERSCRIPT MODE (RESET)
	BCLR.W	#QASUBS,@(YMODEF,FP)	; REMAKE SUBSCRIPT MODE (RESET)
	RTS
	;
CKMD_6: TST.B	R1			;
	BMI	MKMD_8			; BR. IF DOWNLOAD CODE (H'180->H'1FF)
	CMP.B	#H'30,R1                ;
	BCS	MKMD_8			; BR. IF NOT GRAPHIC CODE (H'100->H'12F)
	CMP.B	#H'60,R1                ;
	BCS	CKMD_8			; BR. IF GRAPHIC CODE (H'130->H'15F)
	CMP.B	#H'70,R1                ;
	BCS	MKMD_8			; BR. IF NOT GRAPHIC CODE (H'160->H'16F)
	CMP.B	#H'74,R1                ;
	BCS	CKMD_A			; BR. IF MATHEMATICS CODE (H'170->H'173)
	CMP.B	#H'75,R1                ;
	BHI	CKMD_A			; BR. IF MATHEMATICS CODE (H'176->H'17E)
CKMD_8: BCLR.W	#QPITLC,@(YMODEF,FP)	; REMAKE ITALIC MODE (RESET)
	BCLR.W	#QAUNDL,@(YMODEF,FP)	; REMAKE UNDERLINE MODE (RESET)
	BCLR.W	#QPOUTL,@(YMODEF,FP)	; REMAKE OUTLINE MODE (RESET)
	BCLR.W	#QPSHDW,@(YMODEF,FP)	; REMAKE SHADOW MODE (RESET)
CKMD_A: BCLR.W	#QASUPS,@(YMODEF,FP)	; REMAKE SUPERSCRIPT MODE (RESET)
	BCLR.W	#QASUBS,@(YMODEF,FP)	; REMAKE SUBSCRIPT MODE (RESET)
	RTS
	.ALIGN	2
;
;	<< 5FH CHARACTER LENGTH TABLE >>
;
LEN5F:	.DATA.W  12, 10,  8, 16, 16, 12,  8, 16 ; < DRAFT > PICA/ELITE/15CPI/CONDENSE
	.DATA.W  36, 30, 24, 42, 42, 36, 24, 42 ; < L	Q > PICA/ELITE/15CPI/CONDENSE
	.END

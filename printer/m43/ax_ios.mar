	.PROGRAM	aplios
	.HEADING	"M4324 I/O TASK USER OWN CODE MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 I/O SYSTEM APPLICATION OWN CODE MODULE	*
;							*
;	FILE NAME	AX_IOS.MAR			*
;	CREATED 	22/APR/1991			*
;							*
;********************************************************
;
	.EXPORT 	INTAER,INTFER,INTPON,INTUSR
	.EXPORT 	BZBEL, BZPSW, BZMDC, BZEON, BZEOF
	.EXPORT 	EESAVE,SCIEEP,SCIPAJ
	.EXPORT 	DSPALM,DSPPON,DSPSTA
	.EXPORT 	DSPNOR,DSPPAM,DSPCPM,DSPPFN
	.EXPORT 	DSPMDC,DSPCUR,DSPADS,DSPMEN,DSPLST
	.EXPORT 	DSPCHR,DSPCON,DSPCOF,DSPKCP,DSPDE2
	.EXPORT 	DSPHX1,DSPHX2,DSPHX4,DSPHXS

	.IMPORT 	SWPTCB,USERID,SIPTB, EEPTB
	.IMPORT 	MLALM, MGPER, MGCGC, MLPON, MLERR
	.IMPORT 	MLON,  MLONA, MLONB, MLONC, MLOND
	.IMPORT 	DP1ALM,D3LPKT

	.INCLUDE	"COMMON.H"
	.INCLUDE	"M43RTM.H"
	.INCLUDE	"ALARM.H"
	.INCLUDE	"SLVRAM.H"
	.INCLUDE	"SYSLIB.H"
	.INCLUDE	"SCIIOS.H"
	.INCLUDE	"PNLIOS.H"
	.INCLUDE	"PNLRAM.H"
	.INCLUDE	"EEPIOS.H"
	.INCLUDE	"SYSDP3.H"
	.INCLUDE	"GAIOP.H"
	.INCLUDE	"CPUIO.H"
	.INCLUDE	"SYSRAM.H"
	.INCLUDE	"AX_EEP.H"
	.INCLUDE	"AX_MON.H"
	.INCLUDE	"AX_RAM.H"
	.PAGE
;	.SECTION	APLRAM,DUMMY,LOCATE=H'FE00
;
;	AX I/O SYSTEM WORK AREA
;
	.ORG	H'FE10
ALMS:	.RES.W	  1			; ALARM ERROR CODE SAVE
DSPF:	.RES.B	  1			; LCD DISPLAY FLAG
Q7P0D:	.EQU	  0			;   1:NOT COPY ENHANCE MODE DISPLAY
Q7P1D:	.EQU	  1			;   1:COPY ENHANCE MODE DISPLAY
QADSD:	.EQU	  2			;   1:TOP SENSOR A/D DISPLAY MODE
;	.EQU	  3			;
;	.EQU	  4			;
;	.EQU	  5			;
;	.EQU	  6			;
Q100MS: .EQU	  7			;   1:100mS INTERVAL

DSPS1:	.RES.B	  1			; ONLINE/OFFLINE DISPLAY SAVE
QERRM:	.EQU	  7			;   1:ERROR
ZOFFM:	.EQU	  0			;     OFFLINE MODE
ZONM:	.EQU	  1			;     ONLINE MODE
ZHDCM:	.EQU	  2			;     HEAD COOLING MODE
ZERRM:	.EQU	128			;     ERROR MODE
;	.EQU	  0+ZERRM		;     PE EEROR BEFORE EJECT
;	.EQU	  1+ZEERM		;     PE ERROR AFTER  EJECT
;	.EQU	  2+ZERRM		;     INSERT ERROR
;	.EQU	  3+ZERRM		;     EJECT  ERROR
;	.EQU	  4+ZERRM		;     PAPER MODE ERROR
;	.EQU	  7+ZERRM		;     COVER OPEN ERROR

DSPS2:	.RES.B	  1			; DATA PROCESS MODE DISPLAY SAVE
;ZNDAP: .EQU	  0			;     NORMAL DATA PROCESS MODE
;ZSPRA: .EQU	  1			;     SELF PRINT A MODE
;ZSPRB: .EQU	  2			;     SELF PRINT B MODE
;ZSPRC: .EQU	  3			;     SELF PRINT C MODE
;ZHDPW: .EQU	  4			;     HEX DUMP WIDE MODE
;ZHDPN: .EQU	  5			;     HEX DUMP NARROW MODE

DSPS3:	.RES.B	  1			; PRINT SPEED DISPLAY SAVE
;ZPS10: .EQU	  0			;     NATIVE PRINT SPEED
;ZPS15: .EQU	  1			;     x1.5 PRINT SPEED
;ZPS20: .EQU	  2			;     x2.0 PRINT SPEED
;ZPS30: .EQU	  3			;     x3.0 PRINT SPEED

DSPS4:	.RES.B	  1			; PAPER MODE DISPLAY SAVE
;ZFORM: .EQU	  0			;     FORMS MODE
;ZFORMP:.EQU	  1			;     FORMS MODE   (PAPER HOTCHKISS)
;ZBTM:	.EQU	  2			;     BOTTOM MODE
;ZBTMP: .EQU	  3			;     BOTTOM MODE  (PAPER HOTCHKISS)
;ZSHT:	.EQU	  4			;     SHEET MODE
;ZACF0: .EQU	  5			;     ACSF0 MODE   (SF-260)
;ZACF1: .EQU	  6			;     ACSF1 MODE   (BIN 1)
;ZACF2: .EQU	  7			;     ACSF2 MODE   (BIN 2)
;ZACF3: .EQU	  8			;     ACSF3 MODE   (BIN 3)

DSPS5:	.RES.B	  1			; TOP SENSOR A/D STATUS DISPLAY SAVE
	.RES.B	  8			; RESERVED AREA
	.PAGE
;
	.INCLUDE	"AX_TMP.H"      ; 911226++
;
	.SECTION	APL1,CODE,ALIGN=16
;
;	USER TIMER INTERRUPT HANDLER
;
INTUSR: BTST.B	#QESCSU,@PNLCF:8	; RESET FORMS ESCAPE STOP REQUEST
	BNE	INTU_1			; BR IF FORMS ESACPE STOP REQUEST
	BTST.B	#QADSD,@DSPF:8		;
	BNE	INTU_2			; BR IF TOP SENSOR MONITOR MODE
	MOV.W	@CURDF:8,R2		; GET CURSOR DISPLAY FLAG
	BNE	INTU_6			; BR IF CURSOR CONTROL REQUEST
	RTS				;
					;
INTU_1: MOV.W	@DABDC:8,R0		;
	BNE	INTU_A			; BR IF EXIST DATA INPUT
	BTST.B	#QPRFST,@PRMDF:8	;
	BNE	INTU_A			; BR IF EXIST DATA FOR TEXT BUFFER
	MOV.W	#D3LPKT,R1		; SET DP3 PACKET POINTER
	CHKPKT				; CHECK DATA INTO PACKET
	CMP.B	#2,R2			;
	BCS	INTU_4			; BR IF NO PACKET DATA
INTU_A: BCLR.B	#QESCSU,@PNLCF:8	; RESET FORMS ESCAPE STOP REQUEST
	MOV.W	#DP3TCB,R1		;
	MOV.W	#FSTOP,R2		;
	ORFLG				; WAKE UP DP3 TASK FOR STOP ESCPAE
	RTS				;

INTU_2:
	TSTTSK	#QTWSLP,@SWPTCB 	;
	BEQ	INTU_4			; BR IF NOT SWP TASK SLEEP
	BNOT.B	#Q100MS,@DSPF:8 	;
	BEQ	INTU_5			; BR IF NOT 100mS INTERVAL
	MOV.B	@ADPS:8,R3		; GET TOP SENSOR A/D PORT VALUE
	CMP.B	@DSPS5:8,R3		;
	BEQ	INTU_3			; BR IF NOT VALUE CHANGE
	CALIOS	#DSPAD1 		; DISPLAY TOP SENSOR A/D VALUE
	RTS				;
					;
INTU_3: 				;
	CALIOS	#SCIADS 		; READ TOP SENSOR A/D PORT VALUE
INTU_4: RTS				;
					;
INTU_5: MOV.W	@CURDF:8,R2		; GET CURSOR DISPLAY FLAG
	BEQ	INTU_4			; BR IF NOT REQUEST
INTU_6: 				;
	TSTTSK	#QTWSLP,@SWPTCB 	;
	BEQ	INTU_4			; BR IF NOT SWP TASK SLEEP
	SWAP	R2			;
	BSET.B	#QCURON,R2		;
	CMP.B	@CURDF+1:8,R2		;
	BEQ	INTU_9			; BR IF NO MENU CURSOR CONTROL
	BTST.B	#QSW1,@SWSF+1:8 	;
	BEQ	INTU_9			; BR IF MENU SHIFT SW OFF
INTU_7: CMP.B	@LCDBF2+YLCDPC,R2	;
	BNE	INTU_8			; BR IF NOT SAME CURSOR POSITION
	CMP.B	#H'0D,@LCDBF2+YLCDMD    ;
	BEQ	INTU_4			; BR IF ALREADY CURSOR ON
INTU_8: 				;
	CALIOS	#DSPCUR 		; SET CURSOR POSITION
	RTS				;
					;
INTU_9: MOV.W	@CURDF:8,R2		;
	BMI	INTU_7			; BR IF CURSOR ON MODE
	CMP.B	#H'0D,@LCDBF2+YLCDMD    ;
	BNE	INTU_4			; BR IF ALREADY CURSOR OFF
	CALIOS	#DSPCOF 		; SET CURSOR DISPLAY OFF
	RTS				;
	.PAGE
;
;	USER POWER ON INTERRUPT HANDLER
;
;	IN	R0 : DIP SW STATUS
;		R1 : OPTION ATTACHMENT STATUS
;		R2 : PANEL SW STATUS
;
;	OUT	R2 : SPECIFICATION FLAG OF SLAVE CPU
;
INTPON: MOV.B	R0,@DIPF:8		; SET DIP SW STATUS
	MOV.B	R1,@OPTF:8		; SAVE OPTION ATTACHMENT STATUS
	AND.B	#XPIFD+XLBUSY,R1	;
	BEQ	INTP_1			; BR IF PIF OPTION ERROR
	SETALM	#ZEPIF			; SET PIF ALARM ERROR
INTP_1: CMP.W	#XSW5+XSW4,R2		;
	BEQ	INTP_3			; BR IF SERVICE MODE
	MOV.W	#QFACTM*ZH+1,R1 	;
	CMP.W	#XSW5+XSW3,R2		;
	BEQ	INTP_4			; BR IF FACTORY MODE
	MOV.B	#QPFCM,R1		;
	CMP.W	#XSW1,R2		;
	BEQ	INTP_5			; BR IF PRINT FORMAT CHANGE MODE
	MOV.B	#QSPCM,R1		;
	CMP.W	#XSW2,R2		;
	BEQ	INTP_5			; BR IF SPECIFICATION CHANGE MODE
	CMP.W	#XSW8+XSW7+XSW6,R2	;
	BNE	INTP_2			; BR IF EEPROM USER AREA RESET
	BSR	EEINI2			; INITIALIZE EEPROM USER DATA
	MOV.B	#2,@DSPS1:8		; SET POWER ON MESSAGE NO.
	BRA	INTP_6			;
					;
INTP_2: CMP.W	#XSW11+XSW8+XSW7+XSW6,R2;
	BNE	INTP_6			; BR IF NOT EEPROM RESET
	BSR	EEINI1			; INITIALIZE EEPROM DATA
INTP_3: MOV.W	#QSERVM*ZH+3,R1 	;
INTP_4: MOV.B	R1,@DSPS1:8		; SET POWER ON MESSAGE NO.
	SWAP	R1			;
INTP_5: BSET.B	R1,@MODEF:8		; SET POWER ON SELECT FUNCTION MODE
INTP_6: BSR	EELOAD			; LOAD EEPROM DATA TO BUFFER
	LDC.B	#PAGE SIPTB,EP		;
	MOV.W	#SIPTB,R4		; GET SLAVE CPU INITIAL PARAMETER TABLE
INTP_7: CLR.W	R5			;
	MOV.B	@R4+,R5 		; GET PARAMETER LENGTH
	BEQ	INTP_8			; BR IF PARAMETER END
	MOV.B	@R4+,R2 		;
	MOV.W	#SCIDAT,R1		;
	JSR	@SCICAL 		; SEND INITIAL PARAMETER
	BRA	INTP_7			;
					;
INTP_8: BSR	SCIEEP			; SEND EEPROM DATA TO SLAVE CPU
	MOV.B	#XLF12,R2		; SET LF MOTOR 1-2 PHASE MODE
	RTS				;
	.PAGE
;
;	SEND EEPROM DATA TO SLAVE CPU
;
;	IN	NONE
;
;	OUT	NONE
;
SCIEEP: MOV.B	@EEPBF+E2CON,R3 	;
	JSR	@LCDCON 		; SET LCD CONTRAST
	MOV.B	@EEPBF+E2ADV+1,R2	; GET TOP SENSOR THRESHOLD
	MOV.W	#SCIADV,R1		;
	JSR	@SCICAL 		; SEND TOP SENSOR THRESHOLD
	LDC.B	#PAGE EEPBF,EP		;
	MOV.W	#EEPBF+E2OPCS,R4	; GET PE CHECK COUNT POINTER
	MOV.W	#SCIPEC,R1		;
	JSR	@SCICAL 		; SEND PE CHECK COUNT
SCIPAJ: LDC.B	#PAGE EEPBF,EP		;
	MOV.W	#EEPBF+E2PRA1,R4	; GET PRINT ADJUST VALUE POINTER
	MOV.B	@EEPBF+E2PRAV,R2	; GET USER CORRECTION VALUE
	MOV.W	#SCIPRA,R1		;
	JMP	@SCICAL 		; SEND PRINT COLUMN ADJUST VALUE

;
;	INITIALIZE EEPROM DATA
;
;	IN	NONE
;
;	OUT	NONE
;
EEINI1: BSR	BZEEP:16		; EEPROM WRITE TONE ON
	MOV.W	#ZEEA1,R3		; SET EEPROM ADDRESS
	MOV.W	#ZEESZ,R5		; SET WRITE DATA SIZE
	BRA	EEIN_1			; WRITE ALL DATA TO EEPROM

EEINI2: BSR	BZEEP:16		; EEPROM WRITE TONE ON
	MOV.W	#ZEEA4,R3		; SET EEPROM ADDRESS
	MOV.W	#ZEEA6-ZEEA4,R5 	; WRITE EEPROM USER 1 DATA
EEIN_1: BSR	EELO_5			; GET DEFAULT EEPROM DATA
	MOV.W	#EEPBF,R4		; GET EEPROM BUFFER START POINTER
	ADD.W	R3,R4			; CALCULATE WRITE DATA POINTER
	ADD.W	R3,R4			;
	JSR	@EEWREN 		; SET EEPROM WRITE ENABLE
	JSR	@EEWRBF 		; WRITE DEFAULT EEPROM DATA
	JMP	@EEWRDI 		; SET EEPROM WRITE DISABLE
	.PAGE
;
;	LOAD EEPROM DATA
;
;	IN	NONE
;
;	OUT	NONE
;
EELOAD: MOV.B	#ZEEA1,R3		; SET EEPROM READ ADDRESS
	LDC.B	#PAGE EEPBF,EP		;
	MOV.W	#EEPBF,R4		; SET EEPROM BUFFER POINTER
	MOV.W	#ZEESZ,R5		; SET EEPROM WORD SIZE
	JSR	@EERDBF 		; READ EEPROM DATA TO SYSTEM BUFFER
	MOV.W	@EEPTB+E2ID,R2		; GET EEPROM ID CODE
	MOV.W	#EEPBF+E2ID,R4		;
	CMP.W	@R4,R2			;
	BNE	EELO_3			; BR IF ID CODE ERROR
	MOV.W	#ZEEA3-ZEEA2-1,R1	;
	BSR	EELO_7			; CHECK SYSTEM DATA
	CMP.W	@R4+,R2 		;
	BNE	EELO_3			; BR IF CHECK SUM ERROR
	MOV.W	@USERID,R2		; GET USER ID
	MOV.W	#EEPBF+E2UID,R4 	;
	CMP.W	@R4,R2			;
	BNE	EELO_4			; BR IF USER ID ERROR
	MOV.W	#ZEEA5-ZEEA4-1,R1	;
	BSR	EELO_7			; CHECK USER DATA
	CMP.W	@R4,R2			;
	BNE	EELO_4			; BR IF CHECK SUM ERROR
	RTS				;
					;
EELO_3: 				;
	SETALM	#ZEEEP			; SET EEPROM ALARM ERROR
	BRA	EELO_5			;
					;
EELO_4: 				;
	SETALM	#ZEEEU			; SET EEPROM USER ALARM ERROR
EELO_5: MOV.W	#EEPTB,R0		;
	LDC.B	#PAGE EEPBF,EP		;
	MOV.W	#EEPBF,R4		;
	MOV.W	#ZEESZ-1,R1		;
EELO_6: MOV.W	@R0+,R2 		; COPY EEPROM DEFAULT DATA
	MOV.W	R2,@R4+ 		;
	SCB/F	R1,EELO_6		;
	MOV.W	@USERID,R2		;
	MOV.W	R2,@EEPBF+E2UID 	; SET USER ID CODE
	MOV.W	#EEPBF+E2ID,R4		;
	MOV.W	#ZEEA3-ZEEA2-1,R1	;
	BSR	EELO_7			;
	MOV.W	R2,@R4+ 		; SET CHECK SUM OF SYSTEM DATA
	MOV.W	#ZEEA5-ZEEA4-1,R1	;
	BSR	EELO_7			;
	MOV.W	R2,@R4+ 		; SET CHECK SUM OF USER 1 DATA
	MOV.W	#ZEEA7-ZEEA6-1,R1	;
	BSR	EELO_7			;
	MOV.W	R2,@R4			; SET CHECK SUM OF USER 2 DATA
	RTS				;
	;
EELO_7: CLR.W	R2			; RESET CHECK SUM
EELO_8: ADD.W	@R4+,R2 		; CALCULATE CHECK SUM
	SCB/F	R1,EELO_8		;
	RTS				;
	.PAGE
;
;	SAVE DATA TO EEPROM
;
;	IN	NONE
;
;	OUT	NONE
;
EESAVE: BSR	BZEEP			; EEPROM WRITE TONE ON
	MOV.B	#ZEEA1,R3		; SET EEPROM START ADDRESS
	MOV.W	#EEPBF,FP		; GET EEPROM BUFFER POINTER
	MOV.W	#ZEEA2-ZEEA1-1,R5	;
	BSR	EESA_3			; SAVE ALARM CODE
	MOV.W	#ZEEA3-ZEEA2-1,R5	;
	BSR	EESA_1			; SAVE SYSTEM DATA
	MOV.W	#ZEEA5-ZEEA4-1,R5	;
	BSR	EESA_1			; SAVE USER 1 DATA
	MOV.W	#ZEEA7-ZEEA6-1,R5	;
	BSR	EESA_1			; SAVE USER 1 DATA
	JMP	@EEWRDI 		; SET EEPROM WRITE DISABLE
	;
EESA_1: BSR	EESA_3			; SAVE DATA TO EEPROM
	BEQ	EESA_2			; BR IF NO CHANGE DATA
	MOV.W	R4,R2			;
	MOV.W	R2,@FP			; SET CHECK SUM
	JSR	@EEWRWD 		; WRITE CHECK SUM TO EEPROM
EESA_2: ADD.B	#1,R3			; UPDATE EEPROM ADDRESS
	ADD.W	#2,FP			;
	RTS				;
	;
EESA_3: CLR.W	R4			; RESET CHECK SUM
	BSR	EESA_7			; CHECK DATA CHANGE OR NOT
	BEQ	EESA_6			; BR IF NO CHANGE DATA
	JSR	@EEWREN 		; SET EEPROM WRITE ENABLE
EESA_4: ADD.W	#-1,R3			; ADJUST EEPROM ADDRESS
	JSR	@EEWRWD 		; WRITE DATA TO EEPROM
	ADD.B	#1,R3			; UPDATE EEPROM ADDRESS
	ADD.W	#-1,R5			; ADJUST LOOP COUNTER
	BCC	EESA_5			; BR IF END
	BSR	EESA_7			; CHECK DATA CHANGE OR NOT
	BNE	EESA_4			; BR IF CHANGE DATA
EESA_5: MOV.B	#1,R0			; RESET Z-FLAG FOR DATA CHANGE
EESA_6: RTS				;
	;
EESA_7: JSR	@EERD			; READ DATA FROM EEPROM
	ADD.B	#1,R3			; UPDATE EEPROM ADDRESS
	MOV.W	R2,R0			;
	MOV.W	@FP+,R2 		; GET DATA FROM EEPROM BUFFER
	ADD.W	R2,R4			; CALCULATE CHECK SUM
	CMP.W	R0,R2			; CHECK DATA CHANGE
	SCB/NE	R5,EESA_7		; BR IF NOT CHANGE OR DATA END
	RTS				;
	.PAGE
;
;	EEPROM WRITE TONE
;
;	IN	NONE
;
;	OUT	NONE
;
BZEEP:	MOV.W	#400/ZTI2,R2		; SET 1ST BUZZER ON TIME
	MOV.W	R2,R3			; SET BUZZER ON TIME
	MOV.W	#200/ZTI2,R4		; SET BUZZER OFF TIME
	MOV.W	#2,R5			; SET BUZZER ON/OFF COUNT
	JMP	@BZINT2 		; START EEPROM WRITE TONE

;
;	BELL TONE / SW CLICK TONE
;
;	IN	NONE
;
;	OUT	NONE
;
BZBEL:	MOV.W	#1000/ZTI2,R2		; SET 1000mS
	JMP	@BZCON1 		; BELL TONE ON

BZPSW:	MOV.W	#50/ZTI2,R2		; SET 50mS
	JMP	@BZON2			; CLICK TONE ON

;
;	MODE CHANGE TONE
;
;	IN	NONE
;
;	OUT	NONE
;
BZMDC:	MOV.W	#200/ZTI2,R2		; SET 1ST BUZZER ON TIME
	MOV.W	R2,R3			; SET 2ND BUZZER ON TIME
	MOV.W	#100/ZTI2,R4		; SET BUZZER OFF TIME
	MOV.W	#3,R5			; SET BUZZER ON/OFF COUNT
	JMP	@BZINT1 		; START BUZZER ON/OFF
	.PAGE
;
;	CHECK ERROR TONE ON
;
;	IN	NONE
;
;	OUT	NONE
;
BZEON:	MOV.W	#2000/ZTI2,R2		; SET 1ST BUZZER ON TIME
	MOV.W	R2,R3			; SET 2ND BUZZER ON TIME
	MOV.W	#1000/ZTI2,R4		; SET BUZZER OFF TIME
	MOV.W	#10,R5			; SET BUZZER ON/OFF COUNT
	JMP	@BZINT1 		; START CHECK ERROR TONE

;
;	CHECK ERROR TONE OFF
;
;	IN	NONE
;
;	OUT	NONE
;
BZEOF:	MOV.W	#2000/ZTI2,R3		; SET BUZZER ON TIME
	MOV.W	#1000/ZTI2,R4		; SET BUZZER OFF TIME
	JMP	@BZOFF1 		; STOP CHECK ERROR TONE
	.PAGE
;
;	ALARM/FAITAL ERROR INTERRUPT HANDLER
;
;	IN	R0 : ALARM ERROR CODE
;		DP : 0
;
;	OUT	NONE
;
INTAER: MOV.W	R2,@-SP 		;
	MOV.W	R1,@-SP 		;
	MOV.B	@ALMS+1:8,R1		;
	BNE	INTA_1			; BR IF NOT 1ST ALARM ERROR
	MOV.W	R0,@ALMS:8		; SET ALARM ERROR CODE
	JSR	@DP1ALM 		; OUTPUT ALARM ERROR I/F SIGNAL
	CALMON	#FSALM+FACTF		; CALL ALARM ERROR MONITOR
INTA_1: MOV.W	@SP+,R1 		;
	MOV.W	@SP+,R2 		;
INTA_2: RTS				;

INTFER: MOV.W	R0,@ALMS:8		; SET ALARM ERROR CODE
	JSR	@DP1ALM 		; OUTPUT ALARM ERROR I/F SIGNAL
	JSR	@BZOFF			; STOP BUZZER
	BSR	DSPA_1			; DSIPALY FAITAL ERROR
	CMP.W	#ZEPRG,@ALMS:8		;
	BNE	INTA_2			; BR IF NOT PROGRAM ERROR
	MOV.W	#MGPER,R4		;
	JSR	@LCDSTR 		; DISPLAY "PC="
	MOV.W	@(4,SP),R3		;
	JSR	@LCDHX2 		; DISPLAY CP
	MOV.W	@(6,SP),R3		;
	JMP	@LCDHX4 		; DISPLAY PC
	.PAGE
;
;	DISPLAY ALARM ERROR
;
;	IN	NONE
;
;	OUT	NONE
;
DSPALM: MOV.W	#1000/ZTI2,R2		; SET 1ST BUZZER ON TIME
	MOV.W	R2,R3			; SET BUZZER ON TIME
	MOV.W	#500/ZTI2,R4		; SET BUZZER OFF TIME
	MOV.W	#10,R5			; SET BUZZER ON/OFF COUNT
	JSR	@BZINT1 		; START ALARM ERROR TONE
	LEDSET	#ZN-XLALM		; TURN ON ALARM LED ONLY
DSPA_1: JSR	@EEWREN 		; ENABLE EEPROM WRITE
	MOV.W	@ALMS:8,R2		; GET ALARM ERROR CODE
	MOV.B	#ZEEA1,R3		; SET EEPROM ADDRESS
	MOV.W	R2,@EEPBF		; SET ALARM ERROR CODE
	JSR	@EEWRWD 		; WRITE ALARM ERROR CODE TO EEPROM
	JSR	@EEWRDI 		; DISABLE EEPROM WRITE
	CLR.W	FP			; SET LCD DIRECT OUTPUT MODE
	MOV.B	#ZLON0,R2		;
	JSR	@LCDCHR 		; SET CURSOR DISPLAY OFF
	LDC.B	#PAGE MLALM,EP		;
	MOV.W	#MLALM,R4		; GET ALAM MESSAGE LIST
	MOV.B	@ALMS+1:8,R3		; GET ALARM ERROR CODE
	SUB.B	#ZERAM,R3		;
	JMP	@LCDLST 		; DISPLAY ALARM MESSAGE
	.PAGE
;
;	DISPLAY POWER ON MESSAGE
;
;	IN	NONE
;
;	OUT	NONE
;
DSPPON: MOV.B	@MODEF:8,R0		; GET FUNCTION MODE
	AND.B	#XSERVM+XFACTM,R0	;
	BEQ	DSPP_1			; BR IF SERVICE OR FACTORY MODE
	MOV.B	@ALMS+1:8,R4		;
	BNE	DSPP_3			; BR IF ALARM ERROR MODE
	MOV.B	#"0",R3                 ; SET DISPLAY BANK NO. HIGH
	BSR	DSPP_2			; DISPLAY STANDARD CG CHECK MESSAGE
	JSR	@CHKSCG 		; CHECK STANDARD CG ROM
	MOV.B	@ALMS+1:8,R4	;0312	;
	BNE	DSPP_3		;	; BR IF ALARM ERROR MODE
	MOV.B	#"1",R3         ;       ; SET DISPLAY BANK NO. HIGH
	BSR	DSPP_2		;	; DISPLAY OPTION CG CHECK MESSAGE
	JSR	@CHKOCG 	;	; CHECK OPTION CG ROM
DSPP_1: MOV.B	@ALMS+1:8,R4		;
	BNE	DSPP_3			; BR IF ALARM ERROR MODE
	MOV.B	@DSPS1,R3		; GET POWER ON MESSAGE NO.
	MOV.B	#ZN,R0			;
	MOV.B	R0,@DSPS1:8		; RESET DISPLAY MESSAGE FLAG
	MOV.B	R0,@DSPS2:8		;
	MOV.B	R0,@DSPS3:8		;
	MOV.B	R0,@DSPS4:8		;
	LEDSET	R0			; TURN OFF ALL LED
	LDC.B	#PAGE MLPON,EP		;
	MOV.W	#MLPON,R4		; GET POWER ON MESSAGE LIST
	CLR.W	FP			; SET LCD DIRECT OUTPUT MODE
	JMP	@LCDLST 		; DISPLAY POWER ONMESSAGE
					;
DSPP_2: LDC.B	#PAGE MGCGC,EP		;
	MOV.W	#MGCGC,R4		; GET STANDARD CG CHECK MESSAGE
	CLR.W	FP			; SET DIRECT OUPUT MODE
	JSR	@LCDS1			; DISPLAY CG ROM CHECK MESSAGE
	MOV.B	R3,R2			;
	JSR	@LCDCHR 		; DISPLAY CG BANK NO. HIGH
	MOV.B	#ZLPOS+15,R2		; SET CG BANK NO. DISPLAY POSITION
DSPP_3: RTS				;
	.PAGE
;
;	DISPLAY NORMAL MODE
;
;	IN	NONE
;
;	OUT	NONE
;
DSPNOR: MOV.B	@ALMS+1:8,R0		;
	BNE	DSPP_3			; BR IF ALARM ERROR MODE
	LDC.B	#PAGE MLON,EP		;
	MOV.B	@ERRF:8,R0		;
	BEQ	DSPN_2			; BR IF NO CHECK ERROR
	MOV.B	#ZERRM-1,R1		;
DSPN_1: ADD.B	#1,R1			; CALCULATE ERROR MESSAGE NO.
	SHLL.B	R0			;
	BCC	DSPN_1			;
	CMP.B	@DSPS1:8,R1		;
	BEQ	DSPN_9:16		; BR IF ALREADY DISPALY
	MOV.B	R1,@DSPS1:8		; SET DISPLAY MESSAGE NO.
	MOV.B	R1,@DSPS2:8		;
	BSR	BZEON			; CHECK ERROR TONE ON
	BSR	DSPOFF			; TURN OFF ONLINE LED
	LEDON	#QLCHK			; TURN ON CHECK LED
	MOV.W	#LCDBF1,FP		; SET LCD BUFFER POINTER
	MOV.B	@DSPS1:8,R3		;
	BCLR.B	#QERRM,R3		; GET ERROR MESSAGE NO.
	MOV.W	#MLERR,R4		; GET CHECK ERROR MESSAGE LIST
	JSR	@LCDLST 		; DISPLAY MESSAGE
	BTST.B	#QDCVR,@PSWDF:8 	;
	BNE	DSPO_2			; BR IF COVER ERROR
	BTST.B	#QPE2ER,@ERRF:8 	;
	BNE	DSPN_9			; BR IF NO PAPER
	BTST.B	#Q260ER,@ERRF:8 	;
	BEQ	DSPN_9			; BR IF NOT SF-260/COVER ERROR
DSPO_2: MOV.B	@PAMDF:8,R3		; GET CURRENT PAPER MODE
	BSR	DSPPAM:16		; DISPLAY PAPER MODE
	BRA	DSPN_9			;
					;
DSPOFF: JSR	@SWPT2S 		; SELECT PANEL SW TABLE 2
	LEDOFF	#QLON			; TURN OFF ONLINE LED
	BTST.B	#QDTPR,@PSWDF:8 	;
	BNE	DSPO_1			; BR IF TEST PRINT MODE
	BTST.B	#QINSM,@PRMDF:8 	;
	BNE	DSPO_1			; BR IF PAPER INSERT MODE
	LEDON	#QLLOAD 		; TURN ON LOAD LED
	RTS				;
					;
DSPO_1: 				;
	LEDOFF	#QLLOAD 		; TURN OFF LOAD LED
	RTS				;
					;
DSPN_2: BSR	BZEOF			; STOP CHECK ERROR TONE
	LEDOFF	#QLCHK			; TURN OFF CHECK LED
	MOV.W	#LCDBF1,FP		; SET LCD BUFFER POINTER
	BTST.B	#QPREM,@MODEF:8 	;
	BEQ	DSPN_5			; BR IF NOT PRINT ENABLE MODE
	MOV.B	@DPMDF:8,R0		;
	BEQ	DSPN_3			; BR IF NORAML MODE
	BTST.B	#QHDPM,R0		;
	BEQ	DSPN_4			; BR IF NOT HEX DUMP MODE
DSPN_3: 				;
	LEDON	#QLON			; TURN ON ONLINE LED
DSPN_4: 				;
	LEDOFF	#QLLOAD 		; TURN OFF LOAD LED
	JSR	@SWPT1S 		; SELECT PANEL SW TABLE 1
	MOV.B	#ZONM,R3		; DISPLAY ONLINE MODE
	BRA	DSPN_6			;
					;
DSPN_5: BSR	DSPOFF			; TURN OFF ONLINE LED
	MOV.B	#ZOFFM,R3		; DISPLAY OFFLINE MODE
DSPN_6: BTST.B	#QHDCM,@PRMDF:8 	;
	BEQ	DSPN_7			; BR IF NOT HEAD COLLING MODE
	MOV.B	#ZHDCM,R3		; DISPLAY HEAD COOLING MODE
	MOV.B	#ZN,@DSPS2:8		;
DSPN_7: CMP.B	@DSPS1:8,R3		;
	BEQ	DSPN_8			; BR IF ALREADY DISPLAY
	MOV.B	R3,@DSPS1:8		; SET DISPLAY MESSAGE NO.
	MOV.W	#MLON,R4		;
	JSR	@LCDLST 		; DISPLAY ONLINE/OFFLINE MESSAGE
DSPN_8: CMP.B	#2,@DSPS1:8		;
	BEQ	DSPN_9			; BR IF HEAD COOLING MODE
;911226 MOV.B	@DPMDF:8,R3		; GET DATA PROCESS MODE
;  "    CMP.B   @DSPS2:8,R3             ;
;  "    BEQ     DSPN_9                  ; BR IF ALREADY DISPLAY
	MOV.B	@UMOD04:8,R3		; 911226++
	MOV.B	R3,@DSPS2:8		; SET DISPLAY MESSAGE NO.
	MOV.W	#MLONA,R4		;
	JSR	@LCDLST 		; DISPLAY DATA PROCESS MODE
DSPN_9: MOV.B	@PSPDF:8,R3		; GET PRINT SPEED STATUS
	CMP.B	@DSPS3:8,R3		;
	BEQ	DSPC_3			; BR IF ALREADY DISPLAY
	MOV.B	R3,@DSPS3:8		; SET DISPLAY MESSAGE NO.
	MOV.W	#MLONB,R4		;
	MOV.W	#LCDBF1,FP		; SET LCD BUFFER POINTER
	JMP	@LCDLST 		; DISPLAY PRINT SPEED
	.PAGE
;
;	START NORAML DISPLAY
;
;	IN	R2 : PANEL SW TABLE POINTER
;
;	OUT	NONE
;
DSPSTA: BCLR.B	#QADSD,@DSPF:8		; RESET TOP SENSOR A/D DISPLAY MODE
	CLR.W	@CURDF:8		; RESET CURSOR DISPLAY FLAG
	JSR	@SWPEN			; SET SW PROCESS TABLE
	BSR	DSPNOR			; DISPLAY NORMAL MODE MESSAGE
	MOV.B	@PAMDF:8,R3		; GET PAPER MODE
	BSR	DSPPAM			; DISPLAY PAPER MODE
	BSR	DSPCPM			; DISPLAY COPY MODE
	MOV.B	@EEPBF+E2PFN,R2 	; GET PRINT FORMAT NO.
	BSR	DSPPFN			; DISPLAY PRINT FORMAT NO.
	JMP	@LCDBFS 		; SELECT LCD BUFFER

;
;	DISPLAY PAPER MODE
;
;	IN	R3 : PAPER MODE
;
;	OUT	NONE
;
DSPPAM: CMP.B	@DSPS4:8,R3		;
	BEQ	DSPC_3			; BR IF ALREADY DISPLAY
	MOV.B	R3,@DSPS4:8		; SET DISPLAY MESSAGE NO.
	MOV.B	#ZLPOS+16,R2		; SET DISPLAY POSITION
	LDC.B	#PAGE MLONC,EP		;
	MOV.W	#MLONC,R4		;
	MOV.W	#LCDBF1,FP		; SET LCD BUFFER POINTER
	JMP	@LCDLX			; DISPLAY PAPER MODE
	.PAGE
;
;	DISPLAY COPY MODE
;
;	IN	NONE
;
;	OUT	NONE
;
DSPCPM: BTST.B	#Q7PM,@PRMDF:8		;
	BEQ	DSPC_1			; BR IF 5P MODE
	MOV.B	#Q7P1D,R3		;
	BSET.B	R3,@DSPF:8		; SET 7P MODE DISPLAY
	BNE	DSPC_3			; BR IF ALREADY DISPLAY 7P MODE
	BCLR.B	#Q7P0D,@DSPF:8		; RESET 7P MODE DISPLAY
	BRA	DSPC_2			;
					;
DSPC_1: MOV.B	#Q7P0D,R3		;
	BSET.B	R3,@DSPF:8		; SET 5P MODE DISPLAY
	BNE	DSPC_3			; BR IF ALREADY DISPLAY 5P MODE
	BCLR.B	#Q7P1D,@DSPF:8		; RESET 7P MODE DISPLAY
DSPC_2: LDC.B	#PAGE MLOND,EP		;
	MOV.W	#MLOND,R4		;
	MOV.W	#LCDBF1,FP		; SET LCD BUFFER POINTER
	JMP	@LCDLST 		; DISPLAY COPY MODE
DSPC_3: RTS				;

;
;	DISPLAY PRINT FORMAT NO.
;
;	IN	R2 : PRINT FORMAT NO.
;
;	OUT	NONE
;
DSPPFN: ADD.B	#"0",R2                 ; CONVERT TO ASCII CODE
	MOV.W	#LCDBF1,FP		; SET LCD BUFFER POINTER
	CMP.B	@(31,FP),R2		;
	BEQ	DSPC_3			; BR IF ALREADY DISPLAY
	SWAP	R2			;
	MOV.B	#ZLPOS+31,R2		;
	SWAP	R2			;
	JMP	@LCDCX			; DISPLAY PRINT FORMAT NO.
	.PAGE
;
;	DISPLAY MODE CHANGE MESSAGE TO LCD BUFFER 2
;
;	IN	R2 : PANEL SW PROCESS TABLE
;	     EP R4 : MODE CHANGE MESSAGE
;
;	OUT	NONE
;
DSPMDC: JSR	@SWPEN			; SET SW PROCESS TABLE
	BSR	DSPCOF			; SET CURSOR DISPLAY OFF
	JSR	@LCDS1			; DISPLAY MODE CHANGE MESSAGE
	JMP	@LCDBFS 		; SELECT LCD BUFFER 2

;
;	DISPLAY TOP SENSOR A/D PORT VALUE
;
;	IN	NONE
;
;	OUT	NONE
;
DSPADS: MOV.W	#SCIADW,R1		;
	JSR	@SCICAL 		; READ TOP SENSOR A/D PORT VALUE
	BCLR.B	#Q100MS,@DSPF:8 	; RESET 100mS INTERVAL FLAG
	BSET.B	#QADSD,@DSPF:8		; SET TOP SENSOR A/D DISPLAY MODE
	MOV.B	@ADPS:8,R3		; GET TOP SENSOR A/D PORT VALUE
DSPAD1: MOV.B	R3,@DSPS5:8		; SET TOP SENSOR A/D PORT VALUE
	MOV.B	#ZLPOS+16,R2		; SET DISPLAY POSITION
	BRA	DSPHX2			; DISPLAY A/D PORT VALUE

;
;	DISPLAY BLINK CURSOR TO LCD BUFFER 2
;
;	IN	R2 : CURSOR POSITION
;
;	OUT	NONE
;
DSPCUR: MOV.B	@CURDF:8,R2		; GET MENU CURSOR POSITION
	BSET.B	#QCURON,R2		;
	CMP.B	@CURDF+1:8,R2		;
	BEQ	DSPC_8			; BR IF NO MENU CURSOR CONTROL
	MOV.W	@SWSF:8,R0		; GET PANEL SW STATUS
	BCLR.W	#QCVSW,R0		;
	CMP.W	#XSW1,R0		;
	BEQ	DSPC_9			; BR IF ONLY MENU SHIFT SW ON
	BTST.B	#QSW1,R0		;
	BNE	DSPC_3			; BR IF MENU SHIFT SW ON
DSPC_8: MOV.W	@CURDF:8,R2		; GET CURSOR DISPLAY FLAG
	BPL	DSPCOF			; SET BLINK CURSOR OFF MODE
DSPC_9: BSR	DSPCHR			; SET CURSOR POSITION
DSPCON: MOV.B	#ZLON2,R2		;
	BRA	DSPCHR			; SET BLINK CURSOR ON
	.PAGE
;
;	DISPLAY MENU TO LCD BUFFER 2
;
;	IN   EP R4 : MESSAGE/LIST POINTER
;
;	OUT	NONE
;
DSPMEN: BCLR.B	#QADSD,@DSPF:8		; RESET TOP SENSOR A/D DISPLAY MODE
	BSR	DSPCOF			; SET CURSOR DISPLAY OFF
	JMP	@LCDS1			; DISPLAY MENU

DSPLST: MOV.W	#LCDBF2,FP		; SELECT LCD BUFFER 2
	JMP	@LCDLST 		; DISPLAY MESSAGE LIST

;
;	DISPLAY CHRACTER TO LCD BUFFER 2
;
;	IN	R2 : CHARACTER
;
;	OUT	NONE
;
DSPCOF: MOV.B	#ZLON0,R2		; SET CURSOR DISPLAY OFF
DSPCHR: MOV.W	#LCDBF2,FP		; SELECT LCD BUFFER 2
	JMP	@LCDCHR 		; SET DISPLAY POSITION
	.PAGE
;
;	DISPLAY DECIMAL/HEX TO LCD BUFFER 2
;
;	IN	R2 : DISPLAY POSITION
;		R3 : VALUE
;
DSPKCP: BSR	DSPDE2			; DISPLAY KANJI CHARACTER PITCH
	MOV.B	#ZLPOS+29,R2		; GET ITEM CURSOR POSITION
	JMP	@LCDCHR 		; SET CURSOR POSITION

DSPDE2: BSR	DSPCHR			; SET DISPLAY POSITION
	MOV.B	#2,R4			; SET DIGIT SIZE
	JMP	@LCDDEC 		; DISPLAY 2 DIGIT DECMAL

DSPHX1: BSR	DSPCHR			; SET DISPLAY POSITION
	JMP	@LCDHX1 		; DISPLAY 2 DIGIT HEX

DSPHX2: BSR	DSPCHR			; SET DISPLAY POSITION
	JMP	@LCDHX2 		; DISPLAY 2 DIGIT HEX

DSPHX4: BSR	DSPCHR			; SET DISPLAY POSITION
	JMP	@LCDHX4 		; DISPLAY 4 DIGIT HEX

DSPHXS: BSR	DSPCHR			; SET DISPLAY POSITION
	MOV.B	#"+",R2                 ;
	BCLR.B	#QMSB,R3		; RESET SIGN BIT
	BEQ	DSPH_1			; BR IF PLUS VALUE
	MOV.B	#"-",R2                 ;
DSPH_1: TST.B	R3			;
	BNE	DSPH_2			; BR IF NOT ZERO
	MOV.B	#" ",R2                 ;
DSPH_2: JSR	@LCDCHR 		; DISPLAY SIGN
	JMP	@LCDHX2 		; DISPLAY 2 DIGIT HEX
	.END

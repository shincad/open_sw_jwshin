	.PROGRAM	sysprt
	.HEADING	"M4324 PRINT MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 PRINT SYSTEM MODULE			*
;							*
;	FILE NAME	SYSPRT.MAR			*
;	CREATED		22/APR/1991			*
;							*
;********************************************************
;
	.EXPORT		PRTINI,SETIBP,SETLNM,CLRLNM
	.EXPORT		SET10A,SET10B,SET10C,SET10D,SET15, SET20, SET30
	.EXPORT		CVCTP, CVPTC, GETLRP,GETLRC,CUTLR, CUTSP, CUTPR
	.EXPORT		CV123, CV321, COPY,  CPI2P, CPS2C, CP123, CP321
	.EXPORT		GETPCB,GETPRB,RELPRB,CLIMB

	.IMPORT		PRSFC, PRDPF, PRSBF, PCDBF1,PCDBF2,IMGBF, PRTBF
	.IMPORT		PCLMTB
	.IMPORT		GETDEL

	.INCLUDE	"COMMON.H"
	.INCLUDE	"SYSLIB.H"
	.INCLUDE	"SYSPRT.H"
	.INCLUDE	"GAHEAD.H"
	.INCLUDE	"CPUIO.H"
	.INCLUDE	"SYSRAM.H"

;	.SECTION	SYSRAM,DUMMY,LOCATE=H'FEC0
;
;	SYSTEM PRINT CONSTANT
;
ZCLM:	.EQU	  24/ZBYTE		; 1 COLUMN BYTE SIZE
					;
ZSKP1:	.EQU	 486*8			; SPACE SKIP   COLUMN COUNT
ZSKP2:	.EQU	 252*8			; SPEED CHANGE COLUMN COUNT

Q360D:	.EQU	   2			; 360DPI UNIT COLUMN BIT

;
;	SYSTEM PRINT WORK AREA
;
	.ORG	H'FEE1
PRTSF:	.RES.B	  1			; PRINT SPEED FLAG
QPRLNM:	.EQU	  0			;   1:LOW NOISE PRINT MODE
;	.EQU	  1			;
;	.EQU	  2			;
;	.EQU	  3			;
;	.EQU	  4			;
;QPSB:	.EQU	  5			;   1:PRINT SPEED B MODE
;QPSC:	.EQU	  6			;   1:PRINT SPEED B MODE
;QPSD:	.EQU	  7			;   1:PRINT SPEED B MODE
XPSB:	.EQU	H'20			;
XPSC:	.EQU	H'40			;
XPSD:	.EQU	H'80			;

IMGBP:	.RES.W	  1			; IMAGE BUFFER START POINTER
	.PAGE
	.SECTION	SYS2,CODE,ALIGN=16
;
;	PRINT PROCESS INITIALIZE
;
;	IN	NONE
;
;	OUT	NONE
;
PRTINI:	MOV.W	#IMGBF,R4		; SET DEFAULT IMAGE BUFFER POINTER
;	BRA	SETIBP			;

;
;	SET IMAGE BUFFER POINTER
;
;	IN	R4 : IMAGE BUFFER START POINTER
;
;	OUT	NONE
;
SETIBP:	MOV.W	R4,@IMGBP:8		; SET IMAGE BUFFER START POINTER
	RTS				;

;
;	SET/CLEAR LOW NOISE PRINT MODE
;
;	IN	NONE
;
;	OUT	NONE
;
SETLNM:	BSET.B	#QPRLNM,@PRTSF:8	; SET LOW NOISE PRINT MODE
	RTS				;

CLRLNM:	BCLR.B	#QPRLNM,@PRTSF:8	; CLEAR LOW NOISE PRINT MODE
	RTS				;
	.PAGE
;
;	SET PRINT SPEED
;
;	IN	R4 : LEFT  COLUMN
;		R5 : RIGHT COLUMN
;		DP : 0
;
;	OUT	NONE
;
SET10D:	BSET.B	#QPSD,@PRTSF:8		; SET PRINT SPEED D MODE
	BRA	SET10A			;

SET10C:	BSET.B	#QPSC,@PRTSF:8		; SET PRINT SPEED C MODE
	BRA	SET10A			;

SET10B:	BSET.B	#QPSB,@PRTSF:8		; SET PRINT SPEED B MODE
SET10A:	MOV.W	#0+ZH,R1		; SET PRINT SPEED 1.0
	BRA	SETS			;

SET15:	MOV.W	#1+ZH,R1		; SET PRINT SPEED 1.5
	BRA	SETS			;

SET20:	MOV.W	#2+ZH,R1		; SET PRINT SPEED 2.0
	BRA	SETS			;

SET30:	MOV.W	#3+ZH,R1		; SET PRINT SPEED 3.0
SETS:	MOV.W	#PRSBF-YPSSZ,FP		; GET PRINT SPEED BUFFER POINTER
	MOV.B	@PRSFC,R0		; GET PRINT FIELD COUNT
	BEQ	SETS_2			; BR IF FIRST FIELD
	MULXU.B	#YPSSZ,R0		;
	ADD.W	R0,FP			; GET LAST FIELD POINTER
	CMP.W	@(YPSFLC,FP),R4		;
	BCS	SETS_4			; BR IF LAST LEFT > NEW LEFT
	MOV.W	@(YPSFRC,FP),R0		; GET LAST RIGHT COLUMN
	MOV.W	R0,R2			;
	ADD.W	#ZSKP2,R0		; ADD COLUMN FOR SPEED CHANGE
	CMP.W	R4,R0			;
	BLS	SETS_2			; BR IF ENOUGH SPACE FOR SPEED CHANGE
	CMP.B	@(YPSSPD,FP),R1		;
	BCC	SETS_1			; BR IF OLD SPEED =< NEW SPEED
	MOV.B	R1,@(YPSSPD,FP)		; UPDATE PRINT SPEED
SETS_1:	CMP.W	R2,R5			;
	BLS	SETS_3			; BR IF OLD RIGHT >= NEW RIGHT
	MOV.W	R5,@(YPSFRC,FP)		; UPDATE RIGHT COLUMN
	RTS				;
					;
SETS_2:	MOV.W	R1,@(YPSFLG+YPSSZ,FP)	; SET PRINT SPEED
	MOV.W	R4,@(YPSFLC+YPSSZ,FP)	; SET LEFT COLUMN
	MOV.W	R5,@(YPSFRC+YPSSZ,FP)	; SET RIGHT COLUMN
	CLR.W	@(YPSSZ+YPSSZ,FP)	; SET END MARK
	ADD.B	#1,@PRSFC		; UPDATE PRINT FIELD COUNTER
SETS_3:	RTS				;
	.PAGE
					;
SETS_4:	CMP.W	#PRSBF,FP		;
	BLS	SETS_5			; BR IF BUFFER TOP
	SUBS.B	#YPSSZ,FP		; GET PREVIOUS FIELD POINTER
	CMP.W	@(YPSFLC,FP),R4		;
	BCS	SETS_4			; BR IF OLD LEFT > NEW LEFT
	MOV.W	@(YPSFRC,FP),R0		; GET OLD RIGHT COLUMN
	ADD.W	#ZSKP2,R0		; ADD COLUMN FOR SPEED CHANGE
	CMP.W	R4,R0			;
	BHI	SETS_6			; BR IF NOT ENOUGH FRONT SPACE
	ADDS.B	#YPSSZ,FP		; GET NEXT FIELD POINTER
SETS_5:	MOV.W	R5,R0			; GET NEW RIGHT COLUMN
	ADD.W	#ZSKP2,R0		; ADD COLUMN FOR SPEED CHANGE
	CMP.W	@(YPSFLC,FP),R0		;
	BLS	SETS_C			; BR IF ENOUGH REAR SPACE
	MOV.W	R4,@(YPSFLC,FP)		; UPDATE LEFT COLUMN
SETS_6:	CMP.B	@(YPSSPD,FP),R1		;
	BCC	SETS_7			; BR IF OLD SPEED =< NEW SPEED
	MOV.B	R1,@(YPSSPD,FP)		; UPDATE PRINT SPEED
SETS_7:	CMP.W	@(YPSFRC,FP),R5		;
	BLS	SETS_3			; BR IF OLD RIGHT >= NEW RIGHT
	MOV.W	R5,R0			; GET NEW RIGHT COLUMN
	ADD.W	#ZSKP2,R0		; ADD COLUMN FOR SPEED CHANGE
	MOV.W	FP,R2			; SAVE CURRENT FIELD POINTER
SETS_8:	MOV.W	@(YPSFLG+YPSSZ,FP),R1	; GET SPEED OF NEXT FIELD
	BEQ	SETS_9			; BR IF BUFFER END
	CMP.W	@(YPSFLC+YPSSZ,FP),R0	;
	BLS	SETS_9			; BR IF ENOUGH REAR SPACE
	ADD.B	#-1,@PRSFC		; UPDATE FIELD COUNT
	ADDS.B	#YPSSZ,FP		; GET NEXT FIELD POINTER
	CMP.B	@(YPSSPD,R2),R1		;
	BCC	SETS_8			; BR IF OLD SPEED =< NEW SPEED
	MOV.B	R1,@(YPSSPD,R2)		; UPDATE PRINT SPEED
	BRA	SETS_8			;
					;
SETS_9:	MOV.W	@(YPSFRC,FP),R0		; GET OLD RIGHT COLUMN
	CMP.W	R0,R5			;
	BCC	SETS_A			; BR IF OLD RIGHT =< NEW RIGHT
	MOV.W	R0,R5			;
SETS_A:	MOV.W	R5,@(YPSFRC,R2)		; UPDATE RIGHT COLUMN
	CMP.W	R2,FP			;
	BLS	SETS_E			; BR IF NO DELETE FIELD
	ADDS.B	#YPSSZ,R2		;
	ADDS.B	#YPSSZ,FP		;
SETS_B:	MOV.W	@FP+,R0			;
	MOV.W	R0,@R2+			;
	BEQ	SETS_E			; BR IF COPY END
	MOV.W	@FP+,R0			; COPY FOR DELETE
	MOV.W	R0,@R2+			;
	MOV.W	@FP+,R0			;
	MOV.W	R0,@R2+			;
	BRA	SETS_B			;
	.PAGE
					;
SETS_C:	MOV.W	FP,R2			; SAVE CURRENT FIELD POINTER
	MOV.B	@PRSFC,FP		; GET PRINT FIELD COUNT
	MULXU.B	#YPSSZ,FP		;
	ADD.W	#PRSBF,FP		; GET LAST FIELD POINTER
	CLR.W	@FP			; SET END MARK
SETS_D:	MOV.W	@-FP,R0			;
	MOV.W	R0,@(YPSSZ,FP)		;
	MOV.W	@-FP,R0			; COPY FOR INSERT
	MOV.W	R0,@(YPSSZ,FP)		;
	MOV.W	@-FP,R0			;
	MOV.W	R0,@(YPSSZ,FP)		;
	CMP.W	R2,FP			;
	BHI	SETS_D			; BR IF NOT COPY END
	MOV.W	R1,@(YPSFLG,FP)		; SET PRINT SPEED
	MOV.W	R4,@(YPSFLC,FP)		; SET LEFT COLUMN
	MOV.W	R5,@(YPSFRC,FP)		; SET RIGHT COLUMN
	ADD.B	#1,@PRSFC		; UPDATE PRINT FIELD COUNTER
SETS_E:	RTS				;
	.PAGE
;
;	CONVERT COLUMN TO IMAGE BUFFER POINTER
;
;	IN	R1 : COLUMN
;		R3 : PRINT DPI NO.
;
;	OUT	R1 : POINTER
;		R2 : NOT CHANGE
;		R3 : UNIT COLUMN
;	     R4-FP : NOT CHNAGE
;
CVCTP:	EXTU	R3			;
	MOV.B	@(PCLMTB,R3),R3		; GET UNIT COLUMN
CVCTP1:	CLR.W	R0			;
	DIVXU.W	R3,R0			;
	MOV.W	R1,R0			;
	SHLL.W	R0			;
	ADD.W	R0,R1			; CALCULATE IMAGE BUFFER OFFSET
	ADD.W	@IMGBP:8,R1		; ADD IMAGE BUFFER START
	RTS				;

;
;	GET LEFT/RIGHT POINTER
;
;	IN	R3 : PRINT DPI NO.
;		R4 : LEFT COLUMN
;		R5 : RIGHT COLUMN
;
;	OUT	R1 : RIGHT POINTER
;		R2 : NOT CHANGE
;		R3 : UNIT COLUMN
;		R4 : LEFT POINTER
;		R5 : RIGHT POINTER
;		FP : NOT CHANGE
;
GETLRP:	MOV.W	R4,R1			;
	BSR	CVCTP			; GET LEFT POINTER
	MOV.W	R1,R4			;
	MOV.W	R5,R1			;
	BSR	CVCTP1			; GET RIGHT POINTER
	MOV.W	R1,R5			;
	RTS				;
	.PAGE
;
;	CONVERT IMAGE BUFFER POINTER TO COLUMN
;
;	IN	R1 : POINTER
;		R2 : COLUMN CORRECTION VALUE
;		R3 : PRINT DPI NO.
;
;	OUT	R1 : COLUMN
;		R2 : NOT CHNAGE
;		R3 : UNIT COLUMN
;	     R4-FP : NOT CHNAGE
;
CVPTC:	EXTU	R3			;
	MOV.B	@(PCLMTB,R3),R3		; GET UNIT COLUMN
CVPTC1:	CLR.W	R0			;
	SUB.W	@IMGBP:8,R1		; CALCULATE IMAGE BUFFER OFFSET
	DIVXU.W	#ZCLM,R0		;
	MOV.W	R1,R0			;
	MULXU.W	R3,R0			;
	ADD.W	R2,R1			; CORRECT COLUMN
CVPT_1:	RTS				;

;
;	GET LEFT/RIGHT COLUMN
;
;	IN	R1 : COLUMN
;		R3 : PRINT DPI NO.
;		R4 : LEFT POINTER
;		R5 : RIGHT POINTER
;
;	OUT	R1 : RIGHT COLUMN
;		R2 : COLUMN CORRECTION VALUE
;		R3 : UNIT COLUMN
;		R4 : LEFT COLUMN
;		R5 : RIGHT COLUMN
;		FP : NOT CHANGE
;
GETLRC:	EXTU	R3			;
	MOV.B	@(PCLMTB,R3),R3		; GET UNIT COLUMN
GETLR1:	CLR.W	R0			;
	DIVXU.W	R3,R0			; CALCULATE COLUMN CORRECTION VALUE
	MOV.W	R0,R2			;
	MOV.W	R4,R1			;
	BSR	CVPTC1			; GET LEFT COLUMN
	MOV.W	R1,R4			;
	MOV.W	R5,R1			;
	BSR	CVPTC1			; GET RIGHT COLUMN
	MOV.W	R1,R5			;
	RTS				;
	.PAGE
;
;	CUT LEFT, RIGHT USELESS SPACE FROM PRINT BUFFER
;
;	IN	NONE
;
;	OUT	NONE
;
CUTPR:	MOV.B	@PRSFC,FP		; GET PRINT FIELD COUNT
	MULXU.B	#YPSSZ,FP		;
	ADD.W	#PRSBF+YPSFLC,FP	; GET LAST FIELD POINTER
	MOV.B	@PRDPF,R3		; GET PRINT DPI
	MOV.W	@PRSBF+YPSFLC,R4	; GET FIRST LEFT COLUMN
	MOV.W	@(YPSFRC-YPSFLC-YPSSZ,FP),R5
	BSR	GETLRP			; GET IMAGE BUFFER LEFT/RIGHT POINTER
	SUB.W	@IMGBP:8,R4		;
	ADD.W	#PRTBF,R4		; GET PRINT BUFFER POINTER
	SUB.W	@IMGBP:8,R5		;
	ADD.W	#PRTBF,R5		; GET PRINT BUFFER POINTER
	LDC.B	#PAGE PRTBF,EP		;
	MOV.B	#XWC0,@WCR		; SET PROGRAMABLE WAIT MODE
CUTP_1:	MOV.B	@-R5,R0			;
	OR.B	@-R5,R0			;
	OR.B	@-R5,R0			;
	BEQ	CUTP_1			; BR IF SPACE COLUMN
CUTP_2:	MOV.B	@R4+,R0			;
	OR.B	@R4+,R0			;
	OR.B	@R4+,R0			;
	BEQ	CUTP_2			; BR IF SPACE COLUMN
	MOV.B	#XWMS1+XWMS0+XWC0,@WCR	; SET AUTO WAIT MODE
	SUB.W	#PRTBF+ZCLM,R4		;
	ADD.W	@IMGBP:8,R4		; GET IMAGE BUFFER POINTER
	SUB.W	#PRTBF-ZCLM,R5		;
	ADD.W	@IMGBP:8,R5		; GET IMAGE BUFFER POINTER
	BRA	CUTS_1			;
	.PAGE
;
;	CUT LEFT, RIGHT USELESS SPACE
;
;	IN	R4 : LEFT POINTER
;		R5 : RIGHT POINTER
;
;	OUT  R2-R3 : NOT CHNAGE
;		R4 : NEW LEFT POINTER
;		R5 : NEW RIGHT POINTER
;		FP : NOT CHANGE
;		EP : IMAGE BUFFER PAGE
;		 C : 1=NO PRINT DATA
;
CUTLR:	LDC.B	#PAGE IMGBF,EP		;
	MOV.B	@-R4,R1			;
	MOV.B	#ZN,@R4			; SET DUMMY PRINT DATA
CUTL_1:	MOV.B	@-R5,R0			;
	OR.B	@-R5,R0			;
	OR.B	@-R5,R0			;
	BEQ	CUTL_1			; BR IF SPACE COLUMN
	MOV.B	R1,@R4+			; UNSAVE PRINT DATA
	CMP.W	R4,R5			;
	BCS	CUTL_3			; BR IF ALL SPACE
CUTL_2:	MOV.B	@R4+,R0			;
	OR.B	@R4+,R0			;
	OR.B	@R4+,R0			;
	BEQ	CUTL_2			; BR IF SPACE COLUMN
	SUBS.B	#ZCLM,R4		;
	ADDS.B	#ZCLM,R5		;
CUTL_3:	RTS				;
	.PAGE
;
;	CUT LEFT, RIGHT USELESS SPACE FROM IMAGE BUFFER
;
;	IN	R3 : PRINT DPI NO.
;
;	OUT	EP : PRINT BUFFER PAGE
;		 Z : 1=NO PRINT DATA
;
CUTSP:	MOV.B	@PRSFC,FP		; GET PRINT FIELD COUNT
	BEQ	CUTL_3			; BR IF NO PRINT DATA
	MOV.B	R3,@PRDPF		; SET PRINT DPI
	MULXU.B	#YPSSZ,FP		;
	ADD.W	#PRSBF+YPSFLC,FP	; GET LAST FIELD POINTER
	MOV.W	@PRSBF+YPSFLC,R4	; GET FIRST LEFT COLUMN
	MOV.W	@(YPSFRC-YPSFLC-YPSSZ,FP),R5
	BSR	GETLRP			; GET IMAGE BUFFER LEFT/RIGHT POINTER
	BSR	CUTLR			; CUT LEFT/RIGHT SPACE
	BCS	CUTS_8			; BR IF ALL SPACE
CUTS_1:	MOV.W	@(YPSFRC-YPSFLC-YPSSZ,FP),R1
	BSR	GETLR1			; GET LEFT/RIGHT COLUMN
	MOV.B	@PRSFC,R3		; GET PRINT FIELD COUNT
	ADD.B	#2,R3			;
CUTS_4:	ADD.B	#-1,R3			; UPDATE PRINT FIELD COUNTER
	SUBS.B	#YPSSZ,FP		;
	CMP.W	@FP,R5			;
	BLS	CUTS_4			; BR IF LEFT >= LAST COLUMN
	MOV.W	R5,@(YPSFRC-YPSFLC,FP)	; CORRECT RIGHT COLUMN
	CLR.W	@(YPSSZ-YPSFLC,FP)	; SET END MARK
	MOV.W	#PRSBF-YPSSZ,FP		; GET PRINT SPEED BUFFER POINTER
CUTS_5:	ADD.B	#-1,R3			; UPDATE PRINT FIELD COUNTER
	ADDS.B	#YPSSZ,FP		;
	CMP.W	@(YPSFRC,FP),R4		;
	BCC	CUTS_5			; BR IF RIGHT =< FIRST COLUMN
	MOV.W	R4,@(YPSFLC,FP)		; CORRECT LEFT COLUMN
	MOV.W	#PRSBF,R1		;
	MOV.W	#ZNN,R4			; SET DUMMY MIN. SPACE COLUMN
	CMP.W	R1,FP			;
	BEQ	CUTS_G			; BR IF NEED NOT MOVE
CUTS_7:	MOV.W	@FP+,R0			;
	MOV.W	R0,@R1+			; COPY PRINT SPEED BUFFER
	BEQ	CUTS_B			; BR IF COPY END
	MOV.W	@FP+,R0			;
	MOV.W	R0,@R1+			;
	MOV.W	@FP+,R0			;
	MOV.W	R0,@R1+			;
	BRA	CUTS_7			;
	.PAGE
					;
CUTS_8:	BCLR.B	#QPSB,@PRTSF:8		; RESET PRINT SPEED B
	BCLR.B	#QPSC,@PRTSF:8		; RESET PRINT SPEED C
	BCLR.B	#QPSD,@PRTSF:8		; RESET PRINT SPEED D
	CLR.W	R0			;
	MOV.B	R0,@PRSFC		; RESET PRINT SPEED BUFFER
	MOV.W	R0,@PRSBF		;
	RTS				;
					;
CUTS_A:	MOV.B	R3,@PRSFC		; SET PRINT FIELD COUNT
	RTS				;
					;
CUTS_B:	MOV.W	#PRSBF,FP		; GET PRINT SPEED BUFFER POINTER
	BRA	CUTS_G			;
					;
CUTS_C:	CMP.B	#5,R3			; CHECK PRINT FIELD COUNT
	BLS	CUTS_A			; BR IF CORRECTION END
	MOV.W	#ZNN,R4			; SET DUMMY MIN. SPACE COLUMN
	MOV.W	R5,FP			;
	MOV.W	@(YPSFLG+YPSSZ,FP),R1	; GET NEXT PRINT SPEED
	CMP.B	@(YPSSPD,FP),R1		;
	BCC	CUTS_D			; BR IF OLD SPEED =< NEW SPEED
	MOV.B	R1,@(YPSSPD,FP)		; SET NEW SPEED
CUTS_D:	MOV.W	@(YPSFRC+YPSSZ,FP),R0	;
	MOV.W	R0,@(YPSFRC,FP)		; UPDATE RIGHT COLUMN
	MOV.W	FP,R1			;
	MOV.W	#PRSBF,FP		; GET PRINT SPEED BUFFER POINTER
	BRA	CUTS_H			;
					;
CUTS_E:	CMP.W	R0,R4			;
	BLS	CUTS_F			; BR IF CURR. >= MIN.
	MOV.W	R0,R4			; UPDATE MIN. SPACE COLUMN
	MOV.W	FP,R5			; UPDATE FIELD POINTER SAVE
CUTS_F:	ADDS.B	#YPSSZ,FP		; GET NEXT FIELD POINTER
CUTS_G:	MOV.W	@(YPSFLG+YPSSZ,FP),R1	; GET NEXT PRINT SPEED
	BEQ	CUTS_C			; BR IF BUFFER END
	MOV.W	@(YPSFLC+YPSSZ,FP),R0	; GET NEXT LEFT COLUMN
	SUB.W	@(YPSFRC,FP),R0		; CALCULATE SPACE COLUMN
	CMP.W	#ZSKP1,R0		;
	BCC	CUTS_E			; BR IF ENOUGH SPACE
	CMP.B	@(YPSSPD,FP),R1		;
	BNE	CUTS_E			; BR IF PRINT SPEED CHANGE
	MOV.W	@(YPSFRC+YPSSZ,FP),R0	;
	MOV.W	R0,@(YPSFRC,FP)		; UPDATE RIGHT COLUMN
	MOV.W	FP,R1			; SAVE FIELD POINTER
CUTS_H:	ADD.B	#-1,R3			; UPDATE FIELD COUNT
	ADDS.B	#YPSSZ,R1		; GET NEXT FIELD POINTER
CUTS_I:	MOV.W	@(YPSSZ,R1),R0		;
	MOV.W	R0,@R1+			;
	BEQ	CUTS_G			; BR IF COPY END
	MOV.W	@(YPSSZ,R1),R0		; COPY FOR DELETE
	MOV.W	R0,@R1+			;
	MOV.W	@(YPSSZ,R1),R0		;
	MOV.W	R0,@R1+			;
	BRA	CUTS_I			;
	.PAGE
;
;	CONVERT 180 DPI TO 360 DPI
;
;	IN	EP : PRINT BUFFER PAGE
;
;	OUT	NONE
;
CV123:	MOV.B	#ZDP360,R3		;
	MOV.B	R3,@PRDPF		; CHANGE 180 DPI TO 360 DPI
	MOV.B	@PRSFC,FP		; GET PRINT FIELD COUNT
	MULXU.B	#YPSSZ,FP		;
	ADD.W	#PRSBF-YPSSZ,FP		; GET PRINT SPEED BUFFER POINTER
CV12_1:	MOV.W	@(YPSFRC,FP),R1		; GET RIGHT COLUMN
	MOV.B	#ZDP360,R3		;
	BSR	CVCTP			; GET NEW RIGHT POINTER
	MOV.W	R1,R4			;
	MOV.W	@(YPSFRC,FP),R1		; GET RIGHT COLUMN
	MOV.B	#ZDP180,R3		;
	BSR	CVCTP			; GET RIGHT POINTER
	MOV.W	R1,R5			;
	MOV.W	R3,R0			; SET UNIT COLUMN
	MOV.W	@(YPSFRC,FP),R3		; GET RIGHT COLUMN
	SUB.W	@(YPSFLC,FP),R3		; CALCULATE COLUMN COUNT
	CLR.W	R2			;
	DIVXU.W	R0,R2			; CALCUALTE LOOP COUNT
	ADD.W	#-1,R3			; ADJUST FOR LOOP
	CLR.B	R1			;
CV12_2:	MOV.B	@-R5,R0			;
	MOV.B	R1,@R5			; CLEAR ORIGINAL PATTERN
	MOV.B	R0,@-R4			; CONVERT 180 DPI TO 360 DPI PATTERN
	MOV.B	R0,@(-ZCLM,R4)		;
	MOV.B	@-R5,R0			;
	MOV.B	R1,@R5			;
	MOV.B	R0,@-R4			;
	MOV.B	R0,@(-ZCLM,R4)		;
	MOV.B	@-R5,R0			;
	MOV.B	R1,@R5			;
	MOV.B	R0,@-R4			;
	MOV.B	R0,@(-ZCLM,R4)		;
	SUBS.B	#ZCLM,R4		;
	SCB/F	R3,CV12_2		;
	SUBS.B	#YPSSZ,FP		; GET NEXT PRINT SPEED BUFFER POINTER
	CMP.W	#PRSBF,FP		;
	BCC	CV12_1			; BR IF NOT PRINT FIELD END
	RTS				;
	.PAGE
;
;	CONVERT 360 DPI TO 180 DPI
;
;	IN	EP : PRINT BUFFER PAGE
;
;	OUT	NONE
;
CV321:	MOV.B	#ZDP180,R3		;
	MOV.B	R3,@PRDPF		; CHANGE 360 DPI TO 180 DPI
	MOV.W	#PRSBF,FP		; GET PRINT SPEED BUFFER POINTER
CV32_1:	MOV.W	@(YPSFLC,FP),R1		; GET LEFT COLUMN
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.B	#ZDP180,R3		;
	BSR	CVCTP			; GET NEW LEFT POINTER
	MOV.W	R1,R4			;
	MOV.W	@(YPSFLC,FP),R1		; GET LEFT COLUMN
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.W	R1,@(YPSFLC,FP)		; SET NEW LEFT COLUMN
	MOV.B	#ZDP360,R3		;
	BSR	CVCTP			; GET LEFT POINTER
	MOV.W	R1,R5			;
	MOV.W	R3,R0			; SET UNIT COLUMN
	MOV.W	@(YPSFRC,FP),R3		; GET RIGHT COLUMN
	SUB.W	@(YPSFLC,FP),R3		; CALCULATE COLUMN COUNT
	CLR.W	R2			;
	DIVXU.W	R0,R2			; CALCUALTE LOOP COUNT
	ADD.W	#-1,R3			; ADJUST FOR ODD
	SHLR.W	R3			; / 2
CV32_2:	MOV.B	@(ZCLM,R5),R0		;
	OR.B	@R5+,R0			; CONVERT 360 DPI TO 180 DPI PATTERN
	MOV.B	R0,@R4+			;
	MOV.B	@(ZCLM,R5),R0		;
	OR.B	@R5+,R0			;
	MOV.B	R0,@R4+			;
	MOV.B	@(ZCLM,R5),R0		;
	OR.B	@R5+,R0			;
	MOV.B	R0,@R4+			;
	ADDS.B	#ZCLM,R5		;
	SCB/F	R3,CV32_2		;
	MOV.W	@(YPSFRC,FP),R0		;
	MOV.W	R0,R1			; SAVE OLD RIGHT COLUMN
	ADDS.B	@PCLMTB+ZDP360,R0	;
	BCLR.B	#Q360D,R0		; MAKE EVEN COLUMN
	MOV.W	R0,@(YPSFRC,FP)		; SET NEW RIGHT COLUMN
	MOV.B	#ZDP360,R3		;
	BSR	CVCTP			; GET OLD RIGHT POINTER
	MOV.W	R1,R5			;
	SUB.W	R4,R5			; CALCULATE BYTE SIZE
	CALSYS	#CLRBFW			; CLEAR IMAGE BIUFFER
	ADDS.B	#YPSSZ,FP		; GET NEXT PRINT SPEED BUFFER POINTER
	MOV.B	@(YPSFLG,FP),R0		;
	BNE	CV32_1			; BR IF NOT PRINT FIELD END
	RTS				;
	.PAGE
;
;	COPY IMAGE BUFFER TO PRINT BUFFER
;
;	IN	R5 : COPY ENTRY
;		FP : PRINT COMMAND BUFFER POINTER
;
;	OUT	FP : NOT CHNAGE
;		 Z : 1=NO PRINT DATA
;
COPY:	MOV.B	@PRDPF,R0		; GET PRINT DPI NO.
COPY1:	MOV.B	@PRTSF:8,R1		;
	AND.B	#XPSD+XPSC+XPSB,R1	; GET PRINT SPEED MODE
	OR.B	R0,R1			;
	MOV.B	R1,@(YPCDPI,FP)		; SET PRINT DPI NO.
	SHLL.B	R0			; x 2
	SHLL.B	R0			; x 4
	MOV.W	FP,@-SP			; SAVE PRINT COMMAND BUFFER POINTER
	MOV.W	R5,@-SP			; SAVE COPY ENTRY
	MOV.W	#PRSBF,FP		; GET PRINT SPEED BUFFER
COPY_1:	MOV.W	@FP,R1			; GET PRINT SPEED
	BEQ	COPY_3			; BR IF PRINT FIELD END
	JSR	@GETDEL			; GET DUTY/DELETE TABLE
	MOV.B	R5,@OVLT1		; SET DUTY LIMIT
	SWAP	R5			;
	MOV.B	R5,@OVLT2		;
	BTST.B	#QPRLNM,@PRTSF:8	;
	BEQ	COPY_2			; BR IF NOT LOW NOISE PRINT MODE
	ADD.W	#1,R1			;
COPY_2:	MOV.B	@R1,R5			;
	MOV.B	R5,@UNCNT		; SET PRINT DOT DELETE TYPE
	MOV.W	@SP,R5			;
	MOV.W	R0,@-SP			;
	JSR	@R5			; COPY IMAGE BUFFER TO PRINT BUFFER
	MOV.W	@SP+,R0			;
	ADDS.B	#YPSSZ,FP		; GET NEXT FIELD POINTER
	CLR.B	R5			;
	.AREPEAT	10		;
	MOV.B	R5,@R4			; WRITE DUMMY 0
	MOV.B	R5,@R4			;
	MOV.B	R5,@R4			;
	.AENDR				;
	BTST.B	#QOVDF,@OVD		;
	BEQ	COPY_1			; BR IF NOT OVER DUTY
	BSET.B	#QDOVR,@PRBFF:8		; SET OVER DUTY FLAG
	BRA	COPY_1			;
					;
COPY_3:	MOV.W	@SP+,R5			;
	MOV.W	@SP+,FP			; UNSAVE PRINT COMMAND BUFFER POINTER
	MOV.B	@PRBFF:8,R0		;
	AND.B	#XPBBS+XDOVR,R0		; GET PRINT OPTION
	MOV.B	R0,@(YPCF1,FP)		; SET OPTION FLAG 1
	CLR.W	R0			;
	MOV.B	R0,@(YPCF2,FP)		; RESET OPTION FLAG 2
	MOV.W	@DCR0,R0		; READ PRINT DOT COUNT
	SWAP	R0			;
	MOV.W	R0,@(YPCDOT,FP)		; SET PRINT DOT COUNT
	BEQ	COPY_4			; BR IF NO PRINT DATA
	BCLR.B	#QPBEN,@PRBFF:8		; RESET PRINT BUFFER ENABLE (Z-OFF)
COPY_4:	RTS				;
	.PAGE
;
;	COPY IMAGE BUFFER TO PRINT BUFFER
;
;	IN	FP : PRINT COMMAND BUFFER POINTER
;		EP : PRINT BUFFER PAGE
;
;	OUT	FP : NOT CHNAGE
;
CPI2P:	MOV.W	#CPI2_2,R5		; SET COPY ENTRY
	BSR	COPY			; COPY IMAGE BUFFER TO PRINT BUFFER
	MOV.B	@PRDPF,R3		; GET PRINT DPI
CPS2C:	MOV.W	@PRSBF+YPSFLC,R1	; GET LEFT COLUMN
	BSR	CVCTP			; GET LEFT POINTER
	SUB.W	@IMGBP:8,R1		;
	ADD.W	#PRTBF,R1		; GET PRINT BUFFER POINTER
	MOV.W	R1,@(YPCBLP,FP)		; SET BUFFER LEFT POINTER
	MOV.W	FP,R2			;
	ADDS.B	#YPCFC,R2		; GET PRINT FIELD COUNT POINTER
	CLR.W	R5			;
	MOV.B	@PRSFC,R5		;
	MOV.B	R5,@R2+			; SET PRINT FIELD COUNT
	ADD.W	#-1,R5			; ADJUST FOR LOOP
	MOV.W	#PRSBF,R0		; GET PRINT SPEED BUFFER
CPS2_1:	MOV.W	@R0+,R1			;
	MOV.B	R1,@R2+			; SET PRINT SPEED
	MOV.W	@R0+,R1			;
	MOV.B	R1,@R2+			; SET LEFT COLUMN
	SWAP	R1			;
	MOV.B	R1,@R2+			;
	MOV.W	@R0+,R1			;
	MOV.B	R1,@R2+			; SET RIGHT COLUMN
	SWAP	R1			;
	MOV.B	R1,@R2+			;
	SCB/F	R5,CPS2_1		;
	SWAP	R1			;
	BSR	CVCTP1			; GET RIGHT POINTER
	SUB.W	@IMGBP:8,R1		;
	ADD.W	#PRTBF,R1		; GET PRINT BUFFER POINTER
	MOV.W	R1,@(YPCBRP,FP)		; SET BUFFER RIGHT POINTER
	RTS				;
					;
CPI2_2:	MOV.B	@PRDPF,R3		; GET PRINT DPI
	MOV.W	@(YPSFLC,FP),R4		; GET LEFT COLUMN
	MOV.W	@(YPSFRC,FP),R5		; GET RIGHT COLUMN
	BSR	GETLRP			; GET LEFT/RIGHT POINTER
	MOV.W	R4,R3			; SET COPY SOURCE POINTER
	SUB.W	@IMGBP:8,R4		;
	ADD.W	#PRTBF,R4		; GET PRINT BUFFER POINTER
	SUB.W	R3,R5			; CALCULATE COPY SIZE
	LDC.B	#PAGE IMGBF,DP		;
	CALSYS	#COPYBF			; COPY IMAGE BUFFER TO PRINT BUFFER
	LDC.B	#0,DP			;
	RTS				;
	.PAGE
;
;	COPY IMAGE BUFFER (180 DPI) TO PRINT BUFFER (360 DPI)
;
;	IN	FP : PRINT COMMAND BUFFER POINTER
;		EP : PRINT BUFFER PAGE
;
;	OUT	FP : NOT CHNAGE
;
CP123:	MOV.B	#ZDP360,R0		; GET PRINT DPI NO.
	MOV.W	#CP12_2,R5		; SET COPY ENTRY
	BSR	COPY1			; IMAGE BUFFER TO PRINT BUFFER
	MOV.B	#ZDP360,R3		;
	BRA	CPS2C			; COPY PRINT SPEED BUFFER
					;
CP12_2:	MOV.W	@(YPSFLC,FP),R1		; GET LEFT COLUMN
	MOV.B	#ZDP360,R3		; GET PRINT DPI
	BSR	CVCTP			; GET NEW LEFT POINTER
	MOV.W	R1,R4			;
	SUB.W	@IMGBP:8,R4		;
	ADD.W	#PRTBF,R4		; GET PRINT BUFFER POINTER
	MOV.W	@(YPSFLC,FP),R1		; GET LEFT COLUMN
	MOV.B	#ZDP180,R3		;
	BSR	CVCTP			; GET LEFT POINTER
	MOV.W	R1,R5			;
	MOV.W	R3,R0			; SET UNIT COLUMN
	MOV.W	@(YPSFRC,FP),R3		; GET RIGHT COLUMN
	SUB.W	@(YPSFLC,FP),R3		; CALCULATE COLUMN COUNT
	CLR.W	R2			;
	DIVXU.W	R0,R2			; CALCUALTE LOOP COUNT
	ADD.W	#-1,R3			; ADJUST FOR LOOP
CP12_3:	MOV.B	@R5+,R0			;
	MOV.B	R0,@R4+			; COPY IMAGE BUFFER TO PRINT BUFFER
	MOV.B	@R5+,R1			;
	MOV.B	R1,@R4+			;
	MOV.B	@R5+,R2			;
	MOV.B	R2,@R4+			;
	MOV.B	R0,@R4+			;
	MOV.B	R1,@R4+			;
	MOV.B	R2,@R4+			;
	SCB/F	R3,CP12_3		;
	RTS				;
	.PAGE
;
;	COPY IMAGE BUFFER (360 DPI) TO PRINT BUFFER (180 DPI)
;
;	IN	FP : PRINT COMMAND BUFFER POINTER
;		EP : PRINT BUFFER PAGE
;
;	OUT	FP : NOT CHNAGE
;
CP321:	MOV.B	#ZDP180,R0		;
	MOV.W	#CP32_2,R5		; SET COPY ENTRY
	BSR	COPY1			; SET PRINT DPI
	MOV.W	@PRSBF+YPSFLC,R1	; GET LEFT COLUMN
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.B	#ZDP180,R3		;
	BSR	CVCTP			; GET LEFT POINTER
	SUB.W	@IMGBP:8,R1		;
	ADD.W	#PRTBF,R1		; GET PRINT BUFFER POINTER
	MOV.W	R1,@(YPCBLP,FP)		; SET BUFFER LEFT POINTER
	MOV.W	FP,R2			;
	ADDS.B	#YPCFC,R2		; GET PRINT FIELD COUNT POINTER
	CLR.W	R5			;
	MOV.B	@PRSFC,R5		;
	MOV.B	R5,@R2+			; SET PRINT FIELD COUNT
	ADD.W	#-1,R5			; ADJUST FOR LOOP
	MOV.W	#PRSBF,R0		; GET PRINT SPEED BUFFER
CP32_1:	MOV.W	@R0+,R1			;
	MOV.B	R1,@R2+			; SET PRINT SPEED
	MOV.W	@R0+,R1			;
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.B	R1,@R2+			; SET LEFT COLUMN
	SWAP	R1			;
	MOV.B	R1,@R2+			;
	MOV.W	@R0+,R1			;
	ADDS.B	@PCLMTB+ZDP360,R1	;
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.B	R1,@R2+			; SET RIGHT COLUMN
	SWAP	R1			;
	MOV.B	R1,@R2+			;
	SCB/F	R5,CP32_1		;
	SWAP	R1			;
	BSR	CVCTP1			; GET RIGHT POINTER
	SUB.W	@IMGBP:8,R1		;
	ADD.W	#PRTBF,R1		; GET PRINT BUFFER POINTER
	MOV.W	R1,@(YPCBRP,FP)		; SET BUFFER RIGHT POINTER
	RTS				;
					;
CP32_2:	MOV.W	@(YPSFLC,FP),R1		; GET LEFT COLUMN
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.B	#ZDP180,R3		; GET PRINT DPI
	BSR	CVCTP			; GET NEW LEFT POINTER
	MOV.W	R1,R4			;
	SUB.W	@IMGBP:8,R4		;
	ADD.W	#PRTBF,R4		; GET PRINT BUFFER POINTER
	MOV.W	@(YPSFLC,FP),R1		; GET LEFT COLUMN
	BCLR.B	#Q360D,R1		; MAKE EVEN COLUMN
	MOV.W	R1,R2			;
	MOV.B	#ZDP360,R3		;
	BSR	CVCTP			; GET LEFT POINTER
	MOV.W	R1,R5			;
	MOV.W	R3,R0			; SET UNIT COLUMN
	MOV.W	@(YPSFRC,FP),R3		; GET RIGHT COLUMN
	SUB.W	R2,R3			; CALCULATE COLUMN COUNT
	CLR.W	R2			;
	DIVXU.W	R0,R2			; CALCUALTE LOOP COUNT
	ADD.W	#-1,R3			; ADJUST FOR LOOP
	SHLR.W	R3			; / 2
CP32_3:	MOV.B	@(ZCLM,R5),R0		;
	OR.B	@R5+,R0			;
	MOV.B	R0,@R4+			; COPY IMAGE BUFFER TO PRINT BUFFER
	MOV.B	@(ZCLM,R5),R0		;
	OR.B	@R5+,R0			;
	MOV.B	R0,@R4+			;
	MOV.B	@(ZCLM,R5),R0		;
	OR.B	@R5+,R0			;
	MOV.B	R0,@R4+			;
	ADDS.B	#ZCLM,R5		;
	SCB/F	R3,CP32_3		;
	RTS				;
	.PAGE
;
;	GET PRINT BUFFER
;
;	IN	NONE
;
;	OUT	FP : PRINT COMMAND BUFFER POINTER
;		 Z : 0=PRINT BUFFER BUSY
;
GETPCB:	MOV.W	#PCDBF1,FP		;
	BTST.B	#QPBBS,@PRBFF:8		;
	BEQ	GETP_2			; BR IF PRINT BUFFER RAM A
	MOV.W	#PCDBF2,FP		;
GETP_1:	MOV.B	#0,R0			; SET Z-FLAG FOR BUFFER GET
GETP_2:	RTS				;
					;
GETPRB:	BTST.B	#QPBEN,@PRBFF:8		;
	BNE	GETPCB			; BR IF ALREADY ENABLE
	BTST.B	#QPBDI,@PRBFF:8		;
	BNE	GETP_2			; BR IF PRINT BUFFER CHANGE DISABALE
	BTST.B	#QPBBP,@PRBFF:8		;
	BEQ	GETP_4			; BR IF PREVIOUS BUFFER = A
	BTST.B	#QPBAB,@PRBFF:8		;
	BEQ	GETP_5			; BR IF BUFFER A READY
	BTST.B	#QPBBB,@PRBFF:8		;
	BNE	GETP_2			; BR IF BOTH BUFFER BUSY
GETP_3:	MOV.W	#PCDBF2,FP		; SET PRINT COMMAND BUFFER 2 POINTER
	BSET.B	#QPBBB,@PRBFF:8		; SET BUFFER B BUSY
	BSET.B	#QPBBS,@PRBFF:8		; SET BUFFER B SELECT
	BSET.B	#QRAMS,@CTRL		; SELECT PRINT BUFFER RAM B
	BRA	GETP_6			;
					;
GETP_4:	BTST.B	#QPBBB,@PRBFF:8		;
	BEQ	GETP_3			; BR IF BUFFER B READY
	BTST.B	#QPBAB,@PRBFF:8		;
	BNE	GETP_2			; BR IF BOTH BUFFER BUSY
GETP_5:	MOV.W	#PCDBF1,FP		; SET PRINT COMMAND BUFFER 1 POINTER
	BSET.B	#QPBAB,@PRBFF:8		; SET BUFFER A BUSY
	BCLR.B	#QPBBS,@PRBFF:8		; SET BUFFER A SELECT
	BCLR.B	#QRAMS,@CTRL		; SELECT PRINT BUFFER RAM A
GETP_6:	BSET.B	#QCTRS,@CTRL		; CLREA DOT COUNTER
	BSET.B	#QPBDI,@PRBFF:8		; SET PRINT BUFFER DISABLE
	BSET.B	#QPBEN,@PRBFF:8		; SET PRINT BUFFER ENABLE
	MOV.W	@(YPCBLP,FP),R4		; GET PRINT BUFFER LEFT POINTER
	MOV.W	@(YPCBRP,FP),R5		; GET PRINT BUFFER RIGHT POINTER
	SUB.W	R4,R5			; CALCULATE BYTE SIZE
	BLS	GETP_7			; BR IF START >= END
	CLR.W	R0			;
	MOV.W	R0,@(YPCBLP,FP)		; RESET PRINT BUFFER LEFT POINTER
	MOV.W	R0,@(YPCBRP,FP)		; RESET PRINT BUFFER RIGHT POINTER
	LDC.B	#PAGE PRTBF,EP		;
	CALSYS	#CLRBF			; CLEAR PRINT BIUFFER
GETP_7:	MOV.B	#0,R0			; SET Z-FLAG FOR BUFFER GET
	RTS				;
	.PAGE
;
;	RELEASE PRINT BUFFER
;
;	IN	R0 : PRINT BUFFER SELECT
;
;	OUT	NONE
;
RELPRB:	BCLR.B	#QPBDI,@PRBFF:8		; RESET PRINT BUFFER CHANGE DISABLE
	BTST.B	#QPBBS,R0		;
	BNE	RELP_1			; BR IF RELEASE BUFFER B
	BCLR.B	#QPBAB,@PRBFF:8		; RESET BUFFER A BUSY
	RTS				;
					;
RELP_1:	BCLR.B	#QPBBB,@PRBFF:8		; RESET BUFFER B BUSY
	RTS				;

;
;	CLEAR IMAGE BUFFER
;
;	IN	NONE
;
;	OUT	FP : NOT CHNAGE
;
CLIMB:	MOV.B	@PRSFC,R0		;
	BEQ	CLIM_2			; BR IF NO PRINT DATA
	MULXU.B	#YPSSZ,R0		;
	ADD.W	#PRSBF+YPSFRC-YPSSZ,R0	; GET LAST FIELD POINTER
	MOV.B	@PRDPF,R3		; GET PRINT DPI
	MOV.W	@PRSBF+YPSFLC,R4	; GET FIRST LEFT COLUMN
	MOV.W	@R0,R5			;
	BSR	GETLRP			; GET IMAGE BUFFER LEFT/RIGHT POINTER
	SUB.W	R4,R5			; CALCULATE BYTE SIZE
	BLS	CLIM_1			; BR IF START >= END
	LDC.B	#PAGE IMGBF,EP		;
	CALSYS	#CLRBFW			; CLEAR IMAGE BIUFFER
CLIM_1:	CLR.W	R0			;
	MOV.B	R0,@PRSFC		; RESET PRINT FIELD COUNT
	MOV.W	R0,@PRSBF		; RESET PRINT SPEED BUFFER
	BCLR.B	#QPSB,@PRTSF:8		; RESET PRINT SPEED B
	BCLR.B	#QPSC,@PRTSF:8		; RESET PRINT SPEED C
	BCLR.B	#QPSD,@PRTSF:8		; RESET PRINT SPEED D
	BCLR.B	#QDOVR,@PRBFF:8		; RESET DUTY OVER PRINT
CLIM_2:	RTS				;
	.END

	.PROGRAM	aplprt
	.HEADING	"M4324 PRINT MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 PRINT APPLICATION MODULE			*
;							*
;	FILE NAME	AX_PRT.MAR			*
;	CREATED 	02/APR/1991			*
;							*
;********************************************************
;
	.EXPORT 	PRINT, PRINT1,PRINT2,BCDPR, SETSPD

	.IMPORT 	PRSFC, PRSBF, TXTBF, IMGBF, PRWBF
	.IMPORT 	LDANK1,LDANK2,LDANK3
	.IMPORT 	LDKNJ1,LDKNJ2,OLNKNJ,ULNKNJ
	.IMPORT 	BJ13LD,BJ08LD,BCDBLD,BC39LD
	.IMPORT 	OJ13LD,OJ08LD,OCDBLD,OC39LD
	.IMPORT 	SET10A,SET10B,SET10C,SET10D,SET15, SET20, SET30
	.IMPORT 	GETLRC,GETLRP,CUTLR, CUTSP, CUTPR
	.IMPORT 	CV123, CV321, COPY,  CPI2P, CPS2C, CP123, CP321
	.IMPORT 	GETRSA,GETPRB,CLIMB, CHKMD, LFCAN
	.IMPORT 	VELTB1,VELTB2,VX3TB1,VX5TB1,VX5TB2,VX5TB3
	.IMPORT 	VX7TB1,VX7TB2,VX7TB3,VX7TB4,VX7TB5,BOCTB, PCLMTB
;
	.IMPORT 	LDKNJY, LDKNJX			; 920312 CONNECT
	.IMPORT 	MX21,MX22,MX31,MX32,MX33,MX41,MX42,MX43
	.IMPORT 	MX44,MX51,MX52,MX53,MX54,MX55,MX61,MX62
	.IMPORT 	MX63,MX64,MX65,MX66,MX71,MX72,MX73,MX74
	.IMPORT 	MX75,MX76,MX77,MX81,MX82,MX83,MX84,MX85
	.IMPORT 	MX86,MX87,MX88


	.INCLUDE	"COMMON.H"
	.INCLUDE	"SYSPRT.H"
	.INCLUDE	"SYSLIB.H"
	.INCLUDE	"AX_EEP.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"AX_LF.H"
	.INCLUDE	"AX_DP3.H"
	.INCLUDE	"AX_RAM.H"
	.INCLUDE	"AX_DP2.H"
	.PAGE
;	.SECTION	DP2RAM,DUMMY,LOCATE=H'FE60
;
;	AX_DP2 WORK AREA REFERENCED BY AX_PRT
;
;APL0F: .RES.B	  1			; APPLICATION 0 FLAG
;QPRTON:.EQU	  6			;   1:PRINT AT ONLINE

;APL2F: .RES.B	  1			; APPLICATION 2 FLAG
;QPRTCR:.EQU	  1			;   1:PRINT BY CR/LF/VT/FF

;COLORF:.RES.B	  1			; 1 LINE COLOR SAVE FLAG
;QCOLMP:.EQU	  0			;   1:MAGENTA DATA PRESENT
;QCOLCP:.EQU	  1			;   1:CYAN    DATA PRESENT
;QCOLYP:.EQU	  2			;   1:YELLOW  DATA PRESENT
;QCOLBP:.EQU	  3			;   1:BLACK   DATA PRESENT
;QCP7P: .EQU	  6			;   1:COPY ENHANCE MODE PRINT
;QCLMLT:.EQU	  7			;   1:MULTI COLOR PRINT

;PRPTCF:.RES.B	  1			; 1 LINE PRINT PITCH SAVE FLAG
;QPT360:.EQU	  0			;   1:1/360 inch
;QPT240:.EQU	  1			;   1:1/240 inch
;QPT180:.EQU	  2			;   1:1/180 inch
;QPT120:.EQU	  3			;   1:1/120 inch
;QPRRVS:.EQU	  5			;   1:PRINT REVERSE
;QUDPMD:.EQU	  7			;   1:PRINT UNI-DIRECTION

;PRMODF:.RES.B	  1			; PRINT VARIATION FLAG
;QDBSTP:.EQU	  0			;   1:DOUBLE-STRIKE PRESENT
;QDBST2:.EQU	  1			;   1:DOUBLE-STRIKE PRESENT MULTI
;QAKVEP:.EQU	  2			;   1:ANK VERTICAL ENLARGE PRESENT
;QAKRLP:.EQU	  3			;   1:ANK RULED LINE PRESENT
;QKJVEP:.EQU	  4			;   1:KANJI VERTICAL ENLARGE PRESENT
;QKJULP:.EQU	  5			;   1:KANJI UNDERLINE PRESENT
;QKJOLP:.EQU	  6			;   1:KANJI OVERLINE PRESENT

;PNLELS:.RES.B	  1			; CURRENT PANEL ENLARGE SIZE SAVE AREA
;LMARGS:.RES.W	  1			; LEFT MARGIN SAVE AREA
;RMARGS:.RES.W	  1			; RIGHT MARGIN SAVE AREA
	.PAGE
;
;	PRINT LOCAL WORK AREA
;
ZCLM:	.EQU	  24/ZBYTE		; 1 COLUMN BYTE SIZE
ZWBF:	.EQU	  64			; PRWBF-PRSFC

	.ORG	H'FE90-2
PRLFXS: .RES.W	  1			; PRINT FEED COUNT SAVE FOR xN PRINT
TXBPS:	.RES.W	  1			; TEXT BUFFER POINSTER SAVE
LDTBP:	.RES.W	  1			; LOAD TABLE POINTER
PRLFS:	.RES.W	  1			; PRINT FEED COUNT SAVE
PRCLMS: .RES.W	  1			; PRINT START COLUMN SAVE
PRTF:	.RES.B	  1			; PRINT FLAG
QPRDN:	.EQU	  0			;   1:PRINT DONE
QPRSD:	.EQU	  1			;   1:PRINT SAME DIRECTION
Q1BLK:	.EQU	  2			;   1:SINGLE PRINT BLOCK
QPRXN:	.EQU	  3			;   1:xN SIZE PRINT
QFXDIR: .EQU	  4			;   1:FIX DIRECTION
;	.EQU	  5			;
;	.EQU	  6			;
QCNTP:	.EQU	  7			;   1:PRINT CONTINUE

PRTF1:	.RES.B	  1			; PRINT FLAG 1
;	.EQU	  0			;
;QDBSP: .EQU	  1			;   1:DOUBLE STRIKE PRINT
;QPRSA: .EQU	  2			;   1:PHYSICAL RIBBON ADDRESS
;	.EQU	  3			;
;	.EQU	  4			;
;	.EQU	  5			;
;	.EQU	  6			;
;QPSNC: .EQU	  7			;   1:PRINT SPEED NOT CHNAGE

PRTF2:	.RES.B	  1			; PRINT FLAG 2
;QRBSM: .EQU	  0			;   1:MAGENTA COLOUR
;QRBSC: .EQU	  1			;   1:CYAN    COLOUR
;QRBSY: .EQU	  2			;   1:YELLOW  COLOUR
;QRBSB: .EQU	  3			;   1:BLACK   COLOUR
;QPFWD: .EQU	  4			;   1:FORWARD PRINT
;QPREV: .EQU	  5			;   1:REVERSE PRINT
;QPSAM: .EQU	  6			;   1:SAME DIRECTION PRINT
QPDBSP: .EQU	  7			;   1:DOUBLE STRIKE PRINT PASS

PRDPIF: .RES.B	  1			; PRINT DPI FLAG
;ZDP360:.EQU	  0			;     360 DPI
;ZDP240:.EQU	  1			;     240 DPI
;ZDP180:.EQU	  2			;     180 DPI
;ZDP120:.EQU	  3			;     120 DPI

PRWKS:	.RES.B	  2			; WORK SAVE AREA
PRMCS:	.RES.B	  2			; PRINT MAX COLUMN FOR xN SIZE PRINT
	.PAGE
;
	.ORG	H'FEA8                  ; 921211
LFS:	.RES.W	  1			; 921211
	.PAGE
;
	.SECTION	APL2,CODE,ALIGN=16

;
;	IMAGE DATA PROCESS
;
;	IN	FP : TEXT BUFFER POINTER
;
;	OUT	FP : NOT CHANGE
;
PRIMG:	MOV.W	@(YIMGST,FP),R4 	; GET IMAGE DATA START COLUMN
	MOV.W	@(YIMGED,FP),R5 	; GET IMAGE DATA END COLUMN
	JSR	@CUTLR			; CUT LEFT/RIGHT SPACE
	BCC	SETSP1			; BR IF NOT ALL SPACE
	RTS				;

;
;	SET PRINT SPEED
;
;	IN	R0 : PRINT SPEED/PITCH FLAG
;		R4 : IMAGE BUFFER LEFT	POINTER
;		R5 : IMAGE BUFFER RIGHT POINTER
;
;	OUT	NONE
;
SETSP1: MOV.B	@(YSPDPF,FP),R0 	; GET PRINT PITCH/SPEED
SETSPD: MOV.W	@PRCLMS:8,R1		; GET START COLUMN
	MOV.B	R0,R3			;
	SHLR.B	R3			; GET PRINT PITCH
	SHLR.B	R3			;
	SHLR.B	R3			;
	SHLR.B	R3			;
	MOV.W	R0,@-SP 		;
	JSR	@GETLRC 		; GET LEFT/RIGHT COLUMN
	MOV.W	@SP+,R0 		;
	BTST.B	#QPRXN,@PRTF:8		;
	BNE	SETS_3			; BR IF NOT x1 CHARACTER SIZE
;
	MOV.B	@PSPDFS:8,R0	; +0610T
	ADDS.B	#4,R0		; +0610T
;
	AND.B	#ZSPDMK,R0		; GET PRINT SPEED
	BNE	SETS_2			; BR IF NOT IMAGE 1.0 SPEED
SETS_1: BTST.B	#QIM150,@EEPBF+E2CPF2	;
	BNE	SETS_2			; BR IF IMAGE 150CPS MODE
	MOV.B	#Z10CSP,R0		; SET 140CPS 1.0C PRINT SPEED
SETS_2: MULXU.B #3,R0			;
	JMP	@(SETS_9:16,R0) 	; SET PRINT SPEED
					;
SETS_3: AND.B	#ZSPDMK,R0		; GET PRINT SPEED
	CMP.B	#Z15SPD,R0		;
	BCC	SETS_2			; BR IF NOT 1.0 SPEED
	MOV.B	#Z10SPD,R0		; SET IMAGE 1.0 PRINT SPEED
	BRA	SETS_1			;
					;
SETS_9: JMP	@SET10A 		; 0  1.0A  (IMAGE DATA)
	JMP	@SET10A 		; 1  1.0A
	JMP	@SET10B 		; 2  1.0B
	JMP	@SET10C 		; 3  1.0C
	JMP	@SET10D 		; 4  1.0D
	JMP	@SET15			; 5  1.5
	JMP	@SET20			; 6  2.0
	JMP	@SET30			; 7  3.0
	.PAGE
;
;	SET PRINT MODE
;
;	IN	R0 : CHARACTER SIZE
;
;	OUT	R0 : CHARACTER SIZE
;		FP : TEXT BUFFER START POINTER
;
SETMD:	CMP.B	#8,R0			;
	BHI	SETMD1			; BR IF TOO BIG SIZE
	BTST.B	#QSERVM,@MODEF:8	;
	BNE	SETMD1			; BR IF SERVICE MODE
	CMP.B	#ZSPRC,@DPMDF:8 	;
	BCS	SETM_1			; BR IF NOT SELFT PRINT C, HEX DUMP
SETMD1: MOV.B	#1,R0			; SET CHARACTER SIZE = 1
SETM_1: BSET.B	#QPRTA,@PRMDF:8 	; SET PRINT JOB ACTIVE
	CLR.W	R1			;
	MOV.W	R1,@PRLFS:8		; RESET PRINT FEED COUNT
	MOV.W	R1,@PRLFXS:8		; RESET PRINT FEED COUNT FOR xN PRINT
	BTST.B	#QPRTON,@APL0F:8	;
	BEQ	SETM_2			; BR IF PRINT BY OFFLINE SW
;	CMP.B	#1,R0			;
;	BEQ	SETM_3			; BR IF CHARACTER SIZE = 1
	BTST.B	#QPRTCR,@APL2F:8	;
	BNE	SETM_3			; BR IF PRINT BY PRINT COMMAND
SETM_2: BSET.W	#QCNTP+ZBYTE,R1 	; SET PRINT CONTINUE
SETM_3: BTST.B	#QCP7P,@COLORF:8	;
	BEQ	SETM_4			;
	BSET.B	#Q7PP,R1		; SET COPY ENHANCE MODE
SETM_4: BTST.B	#QDBST2,@PRMODF:8	;
	BNE	SETM_6			; BR IF DOUBLE STRIKE MULTI PASS
	BTST.B	#QDBSTP,@PRMODF:8	;
	BEQ	SETM_5			; BR IF NO DOUBLE STRIKE DATA
	BSET.B	#QDBSP,R1		; SET DOUBLE STRIKE MODE
SETM_5: BTST.B	#QCLMLT,@COLORF:8	;
	BNE	SETM_6			; BR IF COLOUR PRINT MULTI PASS
	MOV.W	#BOCTB,R2		; GET ON BIT COUNT TABLE POINTER
	MOV.B	@PRPTCF:8,R2		; SET PRINT PITCH STATUS
	AND.B	#XPT120+XPT180+XPT240+XPT360,R2
	CMP.B	#1,@R2			;
	BNE	SETM_6			; BR IF PRINT PITCH MULTI PASS
	BSET.W	#Q1BLK+ZBYTE,R1 	; SET SINGLE PRINT BLOCK MODE
SETM_6: CMP.B	#2,R0			;
	BCS	SETM_7			; BR IF NOT xN SIZE PRINT
	BSET.W	#QPRXN+ZBYTE,R1 	; SET xN SIZE PRINT MODE
SETM_7: BTST.B	#QCLMLT,@COLORF:8	;
	BNE	SETM_C			; BR IF COLOR MULTI MODE
	MOV.B	@PRMODF:8,R2		; GET PRINT MODE
	AND.B	#XKJVEP+XAKRLP+XAKVEP+XDBST2,R2 ;
	BEQ	SETM_D			; BR IF NOT MULTI PASS PRINT
SETM_C: BSET.W	#QFXDIR+ZBYTE,R1	; SET FIX DIRECTION FLAG
SETM_D: MOV.W	R1,@PRTF:8		; SET PRTF AND PRTF1
	MOV.B	#XPREV,R1		;
	BTST.B	#QPRRVS,@PRPTCF:8	;
	BNE	SETM_8			; BR IF REVERSE PRINT MODE
	MOV.B	#XPFWD,R1		;
	BTST.B	#QUDPMD,@PRPTCF:8	;
	BNE	SETM_8			; BR IF FORWARD PRINT MODE
	MOV.B	#0,R1			;
SETM_8: MOV.B	R1,@PRTF2:8		;
	MOV.W	#TXTBF,FP		; GET TEXT BUFFER START POINTER
;	BRA	SETM_A			; continue to nex page
	.PAGE
					;
SETM_A: MOV.B	@(YFMATF,FP),R1 	; GET FORMAT ID
	CMP.B	#ZIMGFM,R1		;
	BLS	SETM_B			; BR IF END/ANK/KANJI/IMAGE DATA
	CMP.B	#ZFEDFM,R1		;
	BCC	SETM_B			; BR IF FEED COMMAND/BAR CODE DATA
	ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA
	BRA	SETM_A			;
					;
SETM_B: MOV.W	FP,@TXBPS:8		; SET TEXT BUFFER POINTER
SETM_E: RTS				;
	.PAGE
;
;	LOAD AND PRINT OUT  (MULTI COLOUR)
;
;	IN	NONE
;
;	OUT	FP : LAST PRINT DATA POINTER
;
PRLD:	MOV.W	@TXBPS:8,FP		; GET TEXT BUFFER START POINTER
PRLD_1: MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	SETM_E			; BR IF TEXT BUFFER END
	CMP.B	#ZIMGFM,R0		;
	BLS	PRLD_3			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BEQ	SETM_E			; BR IF FEED COMMAND
PRLD_2: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA
	BRA	PRLD_1			;
					;
PRLD_3: MOV.B	@(YCOLRF,FP),R4 	; GET PRINT COLOUR
	MOV.B	@PRTF2:8,R5		; GET CURRENT PASS CONDITION
	AND.B	#ZN-XPSAM-XPREV-XPFWD,R5;
	AND.B	R5,R4			;
	CMP.B	R5,R4			;
	BNE	PRLD_2			; BR IF NOT COLOUR MATCH
	MOV.B	@(YSPDPF,FP),R4 	; GET PRINT SPEED/PITCH
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	MOV.B	R4,@PRDPIF:8		; SET PRINT DPI NO.
	MOV.W	@(YCLMCF,FP),R1 	; GET START COLUMN
	MOV.W	R1,@PRCLMS:8		; SAVE START COLUMN POISTION
	BTST.B	#QDBST2,@PRMODF:8	;
	BNE	PRLD_4			; BR IF DOUBLE STRIKE MULTI PASS
	BSR	PRLD_6			; PRINT DATA
	BRA	PRLD_1			;
					;
PRLD_4: MOV.W	FP,@-SP 		;
	BSR	PRLD_6			; PRINT DOUBLE STRIKE 1ST PASS
	MOV.W	@SP+,FP 		;
	BSET.B	#QPDBSP,@PRTF2:8	; SET DOUBLE STRIKE 2ND PASS
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BSR	PRLD_5			; PRINT DOUBLE STRIKE 2ND PASS
	BCLR.B	#QPDBSP,@PRTF2		; RESET DOUBLE STRIKE PASS
	BRA	PRLD_1			;
	.PAGE
					;
PRLD_5: MOV.B	@(YCOLRF,FP),R4 	; GET PRINT COLOUR
	MOV.B	@PRTF2:8,R5		; GET CURRENT PASS CONDITION
	AND.B	#ZN-XPSAM-XPREV-XPFWD,R5;
	AND.B	R5,R4			;
	CMP.B	R5,R4			;
	BNE	PRLD_7			; BR IF NOT COLOUR MATCH
PRLD_6: MULXU.B #3,R0			;
	ADD.W	@LDTBP:8,R0		;
	MOV.W	FP,@-SP 		;
	JSR	@R0			; LOAD CG PATTERN
	MOV.W	@SP+,FP 		;
PRLD_7: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA POINTER
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PRLD_P			; BR IF TEXT BUFFER END
	MOV.B	@(YSPDPF,FP),R4 	; GET PRINT SPEED/PITCH
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	CMP.B	@PRDPIF:8,R4		;
	BNE	PRLD_P			; BR IF PRINT DPI CHANGE
	CMP.B	#ZIMGFM,R0		;
	BLS	PRLD_5			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BNE	PRLD_7			; BR IF NOT FEED COMMAND
	BRA	PRLD_P			; PRINT OUT DATA
	.PAGE
;
;	LOAD AND PRINT OUT  (SINGLE COLOUR)
;
;	IN	NONE
;
;	OUT	FP : LAST PRINT DATA POINTER
;
PRLD1:	BTST.B	#Q1BLK,@PRTF:8		;
	BEQ	PRLD			; BR IF MULTI PRINT BLOCK
	MOV.W	@TXBPS:8,FP		; GET TEXT BUFFER START POINTER
PRLD_A: MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PREN_1			; BR IF TEXT BUFFER END
	CMP.B	#ZIMGFM,R0		;
	BLS	PRLD_B			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BEQ	PREN_1			; BR IF FEED COMMAND
	ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA
	BRA	PRLD_A			;
					;
PRLD_B: MOV.B	@(YSPDPF,FP),R4 	; GET PRINT SPEED/PITCH
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	MOV.B	R4,@PRDPIF:8		; SET PRINT DPI NO.
	MOV.W	@(YCLMCF,FP),R1 	; GET START COLUMN
	MOV.W	R1,@PRCLMS:8		; SAVE START COLUMN POISTION
PRLD_C: MULXU.B #3,R0			;
	ADD.W	@LDTBP:8,R0		;
	MOV.W	FP,@-SP 		;
	JSR	@R0			; LOAD CG PATTERN
	MOV.W	@SP+,FP 		;
PRLD_D: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA POINTER
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PRLD_P			; BR IF TEXT BUFFER END
	CMP.B	#ZIMGFM,R0		;
	BLS	PRLD_C			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BNE	PRLD_D			; BR IF NOT FEED COMMAND
PRLD_P: MOV.W	FP,@-SP 		;
	BSR	PROUT			; PRINT OUT BUFFER
	JSR	@CLIMB			; CLEAR IMAGE BUFFER
	MOV.W	@SP+,FP 		;
	RTS				;
	.PAGE
;
;	SEND PRINT START/END PACKET TO DP3
;
;	IN	NONE
;
;	OUT	R3 : NOT CHNAGE
;		FP : NOT CHNAGE
;
PRSTA:	BTST.B	#QPRDN,@PRTF:8		;
	BNE	PREN_1			; BR IF ALREADY PRINT STRAT
	MOV.W	@PRLFS:8,R4		; GET PRINT FEED COUNT
	BPL	PRST_1			; BR IF NOT REVERSE FEED PRINT
	JSR	@LFCAN			; CANCEL LF COMMAND
PRST_1: 				;
	CALDP3	#ZPPRS			; START PRINT
	RTS				;

PREND:	BTST.B	#QPRDN,@PRTF:8		;
	BEQ	PREN_1			; BR IF NOT PRINT DONE
	MOV.B	@PRTF:8,R4		; GET PRINT TYPE
	CALDP3	#ZPPRE			; SEND PRINT END PACKET TO DP3
PREN_1: RTS				;

;
;	GET PRINT BUFFER
;
;	IN	NONE
;
;	OUT	FP : PRINT COMMAND BUFFER
;
GETP_1: JSR	@CHKMD			; CHECK MODE CHANGE
GETPBF: JSR	@GETPRB 		; GET PRINT BUFFER
	BNE	GETP_1			; BR IF PRINT BUFFER BUSY
	RTS				;
	.PAGE
;
;	PRINT OUT BUFFER
;
;	IN	NONE
;
;	OUT	NONE
;
PROUT:	MOV.B	@PRDPIF:8,R3		; GET CURRENT PRINT DPI
	JSR	@CUTSP			; CUT USELESS SPACE
	BEQ	PROU_4			; BR IF NO PRINT DATA
	BSR	PRSTA			; START PRINT
	MOV.B	@PRSBF+YPSSPD,R1	; GET PRINT SPEED
	MOV.B	@PRDPIF:8,R0		;
	BNE	PROU_1			; BR IF NOT 360 DPI
	CMP.B	#ZPS20,R1		;
	BCS	PROUT2			; BR IF 1.0 OR 1.5 PRINT SPEED
	BSR	GETPBF			; GET PRINT BUFFER
	JSR	@CP321			; CONVERT 360 DPI TO 180 DPI
	BRA	PROUT3			;
					;
PROU_1: CMP.B	#ZDP180,R0		;
	BNE	PROUT2			; BR IF NOT 180 DPI
	CMP.B	#ZPS15,R1		;
	BNE	PROUT2			; BR IF NOT 1.5 PRINT SPEED
	BSR	GETPBF			; GET PRINT BUFFER
	JSR	@CP123			; CONVERT 180 DPI TO 360 DPI
	BRA	PROUT3			;
					;
PROUT1: MOV.B	@PRDPIF:8,R3		; GET CURRENT PRINT DPI
	JSR	@CUTSP			; CUT USELESS SPACE
	BEQ	PROU_4			; BR IF NO PRINT DATA
PROUT2: BSR	GETPBF			; GET PRINT BUFFER
	JSR	@CPI2P			; COPY IMAGE BUFFER TO PRINT BUFFER
PROUT3: MOV.B	@(YPCF1,FP),R0		;
	OR.B	@PRTF1:8,R0		; SET PRINT OPTION FLAG 1
	MOV.B	R0,@(YPCF1,FP)		;
	MOV.B	@PRTF2,R0		;
	BCLR.B	#QPDBSP,R0		; RESET DOUBLE STIKE PASS FLAG
	BTST.B	#QPRSD,@PRTF:8		;
	BEQ	PROU_2			; BR IF FIRST PRINT START
	AND.B	#ZN-XPREV-XPFWD,R0	; RESET PRINT DIRECTION BIT
	BSET.B	#QPSAM,R0		; SET SAME DIRECTION PRINT
PROU_2: MOV.B	R0,@(YPCF2,FP)		; SET PRINT OPTION FLAG 2
	BTST.B	#QPRSA,@PRTF1:8 	;
	BEQ	PROU_3			; BR IF PHYSICAL RIBBON ADDRESS
	MOV.B	@PRWKS:8,R0		;
	MOV.B	R0,@(YPCRSA,FP) 	; SET RIBBON SHIFT ADDRESS
PROU_3: MOV.W	FP,R3			;
	MOV.W	@PRLFS:8,R4		; GET FEED COUNT BEFORE PRINT
	BSET.B	#QPRDN,@PRTF:8		; SET PRINT DONE
	BTST.B	#QPRXN,@PRTF:8		;
	BNE	PROU_6			; BR IF xN PRINT MODE
	BTST.B	#QFXDIR,@PRTF:8 	;
	BEQ	PROU_5			; BR IF NOT MULTI PASS PRINT MODE
PROU_6: BSET.B	#QPRSD,@PRTF:8		; SET SAME DIRECTION FROM NEXT PRINT
PROU_5:
	CALDP3	#ZPPRT			; SEND PRINT BUFFER TO DP3 TASK
PROU_4: RTS				;
	.PAGE
;
;	PRINT COLOUR/DOUBLE STRIKE
;
;	IN	R0 : LOAD TABLE POINTER
;		R1 : PRINT FEED COUNT
;
;	OUT	FP : LAST PRINT DATA
;
PRCOL:	CLR.W	R1			; RESET PRINT FEED COUNT
PRCOL1: MOV.W	R0,@LDTBP:8		; SET LOAD TABLE POINTER
	MOV.W	R1,@PRLFS:8		; SET PRINT FEED COUNT
	BTST.B	#QCLMLT,@COLORF:8	;
	BNE	PRCO_1			; BR IF COLOUR PRINT MULTI PASS
	MOV.B	@COLORF:8,R0		;
	AND.B	#XCOLBP+XCOLYP+XCOLCP+XCOLMP,R0
	OR.B	@PRTF2:8,R0		;
	MOV.B	R0,@PRTF2:8		; SET PRINT COLOUR
	BSR	PRLD1			; LOAD AND PRINT
	MOV.B	@PRTF2:8,R0		;
	AND.B	#ZN-XCOLBP-XCOLYP-XCOLCP-XCOLMP,R0
	MOV.B	R0,@PRTF2:8		;
	RTS				;
					;
PRCO_1: BTST.B	#QCOLYP,@COLORF:8	;
	BEQ	PRCO_2			; BR IF NO YELLOW PRINT DATA
	BSET.B	#QRBSY,@PRTF2:8 	;
	BSR	PRLD			; LOAD AND PRINT YELLOW DATA
	BCLR.B	#QRBSY,@PRTF2:8 	;
PRCO_2: BTST.B	#QCOLMP,@COLORF:8	;
	BEQ	PRCO_3			; BR IF NO MAGENTA PRINT DATA
	BSET.B	#QRBSM,@PRTF2:8 	;
	BSR	PRLD			; LOAD AND PRINT MAGENTA DATA
	BCLR.B	#QRBSM,@PRTF2:8 	;
PRCO_3: BTST.B	#QCOLCP,@COLORF:8	;
	BEQ	PRCO_4			; BR IF NO CYAN PRINT DATA
	BSET.B	#QRBSC,@PRTF2:8 	;
	BSR	PRLD			; LOAD AND PRINT CYAN DATA
	BCLR.B	#QRBSC,@PRTF2:8 	;
PRCO_4: BTST.B	#QCOLBP,@COLORF:8	;
	BEQ	PRCO_5			; BR IF NO BLACK PRINT DATA
	BSET.B	#QRBSB,@PRTF2:8 	;
	BSR	PRLD			; LOAD AND PRINT BLACK DATA
	BCLR.B	#QRBSB,@PRTF2:8 	;
PRCO_5: RTS				;
	.PAGE
;
;	TEST PRINT 1  (PRINT POSITION ADJUST)
;
;	IN	NONE
;
;	OUT	NONE
;
PRINT1: BSR	SETMD1			; SET PRINT MODE
	BSET.B	#QPSNC,@PRTF1:8 	; SET PRINT SPEED NOT CHNAGE MODE
	BRA	PRINTS			;

;
;	TEST PRINT 2  (RIBBON SHIFT ADJUST)
;
;	IN	R3 : RIBBON SHIFT ADDRESS
;
;	OUT	NONE
;
PRINT2: BSR	SETMD1			; SET PRINT MODE
	JSR	@GETRSA 		; GET PHYSICAL RIBBON SHIFT ADDRESS
	MOV.B	R0,@PRWKS:8		; SAVE IT
	BSET.B	#QPRSA,@PRTF1:8 	; SET PHYSICAL RIBBON ADDRESS MODE
	BRA	PRINTS			;
	.PAGE
;
;	ANK/KANJI/IMAGE PRINT
;
;	IN	R0 : CHARACTER SIZE
;
;	OUT	NONE
;
ANKDL:	JMP	@ANKDHL
ANKDU:	JMP	@ANKDHU
;
PRINT:	BSR	SETMD			; SET PRINT MODE
	CMP.B	#2,R0			;
	BCC	PRXN:16 		; BR IF xN SIZE PRINT
PRINTS: BTST.B	#QAKVEP,@PRMODF:8	; 920406
	BNE	PRIN_1			; 920406
	BTST.B	#QKEIVP,@UMOD01:8	;\ 920312 CONNECT
	BNE	PRKNJ2:16		;\BR IF KANJI KEISEN SETSUZOKU PRINT
	MOV.B	@PRMODF:8,R0		;
	AND.B	#XKJOLP+XKJULP+XKJVEP,R0;
	BNE	PRKNJ			; BR IF KANJI VERTICAL ENLARGE PRINT
PRIN_1: BTST.B	#QAKVEP,@PRMODF:8	;
	BNE	PRIN_2			; BR IF ANK VERTICAL ENLARGE PRINT
	MOV.W	#PRALD2,R0		; SET LOAD TABLE
	BSR	PRCOL			; PRINT ANK
	BTST.B	#QAKRLP,@PRMODF:8	;
	BNE	PRIN_3			; BR IF RULED LINE PRESENT
	BRA	PRIN_4			;
PRIN_2: BTST.B	#ZUPPRO,@PTMD5F:8	;
	BNE	ANKDU			;
	BTST.B	#ZLOPRO,@PTMD5F:8	;
	BNE	ANKDL			;
	CMP.B	#6,@UMOD04:8		; 920408+
	BEQ	PRIN_21 		; 920408+
;
	MOV.W	#-48,R1 		; 930325
	MOV.W	#PRALD1,R0		; SET LOAD TABLE
	BSR	PRCOL1			;\ PRINT ANK VERTICAL ENLARGE 1ST PASS
	MOV.W	#PRALD2,R0		;\ SET LOAD TABLE
	BSR	PRCOL			;\ PRINT ANK VERTICAL ENLARGE 2ND PASS
	BRA	PRIN_3			;
;
PRIN2X: MOV.W	#36,R3			;921219
	BSR	PRLF:16
	MOV.W	#-48,R1
	MOV.W	#PRALD1,R0		;
	BSR	PRCOL1			;
	BRA	PRIN2Y			;  "
;
PRIN_21:				;
	MOV.W	@LFS:8,R3		;921211
	SUB.W	#45,R3			;  "
	BMI	PRIN2X			;921215
	BSR	PRLF:16 		;921211
	MOV.W	#PRALD1,R0		;
	BSR	PRCOL			;
	MOV.W	#45,R3			;
	BSR	PRLF:16 		;
PRIN2Y: MOV.W	#PRALD2,R0		;
	BSR	PRCOL			;
PRIN_3: MOV.W	#PRALD3,R0		; SET LOAD TABLE
	MOV.W	#ZF24P,R1		; SET FEED COUNT
	BSR	PRCOL1			; PRINT ANK VERTICAL ENLARGE 3RD PASS
PRIN_4: MOV.B	@(YFMATF,FP),R0 	; GET NEXT DATA
	BEQ	PRIN_5			; BR IF DATA END
	BSR	PRFDC:16		; SEND FEED PACKET TO DP3
	BNE	PRIN_1			; BR IF NOT DATA END
PRIN_5: BSR	PREND			; SEND PRINT END PACKET TO DP3
	BCLR.B	#QPRTA,@PRMDF:8 	; RESET PRINT JOB ACTIVE
	RTS				;
	.PAGE
;
;	KANJI VERTICAL ENALRGE PRINT
;
PRKN_1: BSR	PRFDC:16		; SEND FEED PACKET TO DP3
	BEQ	PRIN_5			; BR IF DATA END
PRKNJ:	BTST.B	#QKJOLP,@PRMODF:8	;
	BEQ	PRKN_2			; BR IF NO KANJI OVERLINE PRINT
	MOV.W	#PRKLD1,R0		; SET LOAD TABLE
	BSR	PRCOL			; PRINT KANJI OVERLINE
	MOV.W	#ZF4P,R3		; SET FEED COUNT
	BSR	PRLF:16 		; FEED TO NEXT PRINT POSITION
	BCLR.B	#QPRSD,@PRTF:8		; RESET SAME DIRECTION PRINT
PRKN_2: BTST.B	#QKJVEP,@PRMODF:8	;
	BEQ	PRKN_3			; BR IF NOT VERTICAL ENLARGE PRINT
	BTST.B	#ZUPPRO,@PTMD5F:8	;
	BNE	KNJDHU			;
	BTST.B	#ZLOPRO,@PTMD5F:8	;
	BNE	KNJDHL			;
	CMP.B	#6,@UMOD04:8		; 920408+
	BEQ	PRKN_21 		; 920408+
;
	MOV.W	#-48,R1 		; 920325 DOUBLE
	MOV.W	#PRKLD2,R0		; SET LOAD TABLE
	BSR	PRCOL1			; PRINT KANJI VERTICAL ENLARGE 1ST PASS
	BRA	PRKN_3			;
;
PRKN2X: MOV.W	#36,R3			;921219
	BSR	PRLF:16
	MOV.W	#-48,R1
	MOV.W	#PRKLD2,R0		;
	BSR	PRCOL1			;
	BRA	PRKN_3			;
;
PRKN_21:				;
	MOV.W	@LFS:8,R3		;921211
	SUB.W	#45,R3			;  "
	BMI	PRKN2X			;921215
	BSR	PRLF:16 		;921211
	MOV.W	#PRKLD2,R0		;
	BSR	PRCOL			;
	MOV.W	#45,R3			;
	BSR	PRLF:16 		;
PRKN_3: MOV.W	#PRKLD3,R0		; SET LOAD TABLE
	BSR	PRCOL			; PRINT KANJI VERTICAL ENLARGE 2ND PASS
	BTST.B	#QKJULP,@PRMODF:8	;
	BEQ	PRKN_4			; BR IF NO KANJI UNDERLINE PRINT
	BTST.B	#QKJVEP,@PRMODF:8	; 921130
	BEQ	PRIN_8			; 921130
	MOV.W	#10,R3			; SET FEED COUNT
PRIN_9: BSR	PRLF:16 		; FEED TO NEXT PRINT POSITION
	BCLR.B	#QPRSD,@PRTF:8		; RESET SAME DIRECTION PRINT
	MOV.W	#PRKLD4,R0		; SET LOAD TABLE
	BSR	PRCOL			; PRINT KANJI UNDERLINE
PRKN_4: MOV.B	@(YFMATF,FP),R0 	;
	BNE	PRKN_1			; BR IF NOT DATA END
PRINTE: BSR	PREND			; SEND PRINT END PACKET TO DP3
	BCLR.B	#QPRTA,@PRMDF:8 	; RESET PRINT JOB ACTIVE
	RTS				;
	.PAGE
;
PRIN_8: MOV.W	#ZF4P,R3		; 921130
	BRA	PRIN_9
;******************** KANJI DOUBLE PROCESS *************
KNJDHU: MOV.W	#PRKLD2,R0		; SET LOAD TABLE
KNJDH0: BSR	PRCOL			;
	MOV.B	@(YFMATF,FP),R0 	;
	BEQ	PRKED1			; BR IF DATA END
	BSR	PRFDC:16		; SEND FEED PACKET TO DP3
	BNE	PRKNJ
	BRA	PRKED1			;
KNJDHL: MOV.W	#PRKLD3,R0		;
	BRA	KNJDH0
;********************* ANK DOUBLE PROCESS **************
ANKDHU: MOV.W	#PRALD1,R0		; SET LOAD TABLE
ANKDH0: BSR	PRCOL			;
	MOV.B	@(YFMATF,FP),R0 	; GET NEXT DATA
	BEQ	PRKED1			; BR IF DATA END
	BSR	PRFDC:16		; SEND FEED PACKET TO DP3
	BNE	PRIN_1			; BR IF NOT DATA END
	BRA	PRKED1			;
ANKDHL: MOV.W	#PRALD2,R0		;
	BRA	ANKDH0
;*******************************************************
PRKED1: BRA	PRINTE
	.PAGE
;---------------------------------------
;920312 CONNECT
;	KANJI KEISEN SETSUZOKU PRINT
;
PRKN_5: BSR	PRFDC			;\SEND FEED PACKET TO DP3
	BEQ	PRINTE			;\BR IF DATA END
PRKNJ2: BTST.B	#QKJOLP,@PRMODF:8	;\
	BEQ	PRKN_6			;\BR IF NO KANJI OVERLINE PRINT
	MOV.W	#PRKLD1,R0		;\SET LOAD TABLE
	BSR	PRCOL			;\PRINT KANJI OVERLINE
	MOV.W	#ZF4P,R3		;\SET FEED COUNT
	BSR	PRLF			;\FEED TO NEXT PRINT POSITION
	BCLR.B	#QPRSD,@PRTF:8		;\RESET SAME DIRECTION PRINT
PRKN_6: BTST.B	#QKJVEP,@PRMODF:8	;\
	BEQ	PRKN_7			;\BR IF NOT VERTICAL ENLARGE PRINT
	BTST.B	#ZUPPRO,@PTMD5F:8	;
	BNE	KNJDHU			;
	BTST.B	#ZLOPRO,@PTMD5F:8	;
	BNE	KNJDHL			;
	MOV.W	#-48,R1 		; 920325 DOUBLE
	MOV.W	#PRKLD2,R0		;\SET LOAD TABLE
	BSR	PRCOL1			;\PRINT KANJI VERTICAL ENLARGE 1ST PASS
PRKN_7: MOV.W	#PRKLDX,R0		;\SET LOAD TABLE
	BSR	PRCOL			;\PRINT KANJI VERTICAL ENLARGE 2ND PASS
	BTST.B	#QKEIVP,@UMOD01:8	;\
	BEQ	PRKN_9			;\ BR IF NO KANJI KEISEN SETSUZOKU PRINT
	MOV.W	#PRKLDY,R0		;\SET LOAD TABLE
	MOV.W	#ZF24P,R1		;\SET FEED COUNT
	BSR	PRCOL1			;\PRINT KANJI VERTICAL ENLARGE 1ST PASS
PRKN_9: BTST.B	#QKJULP,@PRMODF:8	;\
	BEQ	PRKN_8			;\BR IF NO KANJI UNDERLINE PRINT
	BTST.B	#QKJVEP,@PRMODF:8	; 921130
	BEQ	PRZN_8			; 921130
	MOV.W	#10,R3			;\SET FEED COUNT
PRZN_9: BSR	PRLF			;\FEED TO NEXT PRINT POSITION
	BCLR.B	#QPRSD,@PRTF:8		;\RESET SAME DIRECTION PRINT
	MOV.W	#PRKLD4,R0		;\SET LOAD TABLE
	BSR	PRCOL			;\PRINT KANJI UNDERLINE
PRKN_8: MOV.B	@(YFMATF,FP),R0 	;\
	BNE	PRKN_5			;\BR IF NOT DATA END
	BRA	PRINTE
	.PAGE
PRZN_8: MOV.W	#ZF4P,R3		; 921130
	BRA	PRZN_9			; 921130
;---------------------------------------
;
;	FEED COMMAND PROCESS
;
;	IN	FP : TEXT BUFFER POINTER
;
;	OUT	R0 : FORMAT ID
;		FP : NEXT DATA POINTER
;		 Z : 1=PRINT DATA END
;
PRFD_1: CMP.B	#ZFEDFM,R0		;
	BNE	PRFD_2			; BR IF NOT FEED COMMAND
PRFDC:	BCLR.B	#QPRDN,@PRTF:8		; RESET PRINT DONE
	MOV.B	@(YPKTCD,FP),R2 	; GET FEED PACKET CODE
	MOV.W	@(YABSFD,FP),R3 	; GET FEED PARAMETER
	TRAPA	#12			; SEND FEED PACKET TO DP3
PRFD_2: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA POINTER
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	CMP.B	#ZIMGFM,R0		;
	BHI	PRFD_1			; BR IF NOT END/ANK/KANJI/IMAGE DATA
	MOV.W	FP,@TXBPS:8		; SET TEXT BUFFER POINTER
	CMP.B	#ZENDMK,R0		; CHECK DATA END OR NOT
	RTS				;

;
;	FEED TO NEXT PRINT POSITION
;
;	IN	R3 : FEED COUNT
;
;	OUT	R3 : NOT CHNAGE
;		FP : NOT CHNAGE
;
PRLF:	BSR	PRSTA			; START PRINT
PRLF1:	TST.W	R3			;
	BEQ	PRLF_2			; BR IF NO FEED
	MOV.B	@PRTF:8,R4		;
	BPL	PRLF_1			; BR IF NOT PRINT CONTINUE
	BSET.B	#QPRDN,@PRTF:8		; SET PRINT DONE
PRLF_1: 				;
	CALDP3	#ZPPRF			; FEED TO NEXT PRINT POSITION
PRLF_2: RTS				;

PRLF24: MOV.W	#ZF24P,R3		; SET 24 PIN FEED COUNT
PRLFX:	BTST.B	#QCNTP,@PRTF:8		;
	BEQ	PRLF1			; BR IF NOT PRINT CONTINUE
	ADD.W	@PRLFXS:8,R3		;
	MOV.W	R3,@PRLFXS:8		; UPDATE PRINT FEED COUNT FOR xN PRINT
	RTS				;

PRLF4X: MOV.B	@PNLELS:8,R3		;
	MULXU.B #ZF4P,R3		; CALCULATE 4 PIN x N FEED COUNT
	BRA	PRLFX			;
	.PAGE
;
;	ANK/KANJI/IMAGE LOAD TABLE
;
PRALD1: 				;
	RTS3				;  0  (dummy)
	JMP	@LDANK1 		;  1  ANK
	RTS3				;  2  KANJI
	RTS3				;  3  KANJI COMBINE
	RTS3				;  4  IMAGE

PRKLD3: 				;
PRALD2: 				;
	RTS3				;  0  (dummy)
	JMP	@LDANK2 		;  1  ANK
	JMP	@LDKNJ2 		;  2  KANJI
	JMP	@LDKNJ2 		;  3  KANJI COMBINE
	BRA	PRIMG:16		;  4  IMAGE

PRALD3: 				;
	RTS3				;  0  (dummy)
	JMP	@LDANK3 		;  1  ANK
	RTS3				;  2  KANJI
	RTS3				;  3  KANJI COMBINE
	RTS3				;  4  IMAGE

PRKLD1: 				;
	RTS3				;  0  (dummy)
	RTS3				;  1  ANK
	JMP	@OLNKNJ 		;  2  KANJI
	JMP	@OLNKNJ 		;  3  KANJI COMBINE
	RTS3				;  4  IMAGE

PRKLD2: 				;
	RTS3				;  0  (dummy)
	RTS3				;  1  ANK
	JMP	@LDKNJ1 		;  2  KANJI
	JMP	@LDKNJ1 		;  3  KANJI COMBINE
	RTS3				;  4  IMAGE

PRKLD4: 				;
	RTS3				;  0  (dummy)
	RTS3				;  1  ANK
	JMP	@ULNKNJ 		;  2  KANJI
	JMP	@ULNKNJ 		;  3  KANJI COMBINE
	RTS3				;  4  IMAGE
	.PAGE
;
;---------
;920312 CONNECT
PRKLDY: 				;\
	RTS3				;\ 0  (dummy)
	RTS3				;\ 1  ANK
	JMP	@LDKNJY 		;\ 2  KANJI
	JMP	@LDKNJY 		;\ 3  KANJI COMBINE
	RTS3				;\ 4  IMAGE

PRKLDX: 				;\
	RTS3				;\ 0  (dummy)
	JMP	@LDANK2 		;\ 1  ANK
	JMP	@LDKNJX 		;\ 2  KANJI
	JMP	@LDKNJX 		;\ 3  KANJI COMBINE
	RTS3				;\ 4  IMAGE
	.PAGE
;---------
;
;	BAR CODE/OCR-B PRINT
;
;	IN	R0 : BAR CODE HEIGHT
;
;	OUT	NONE
;
BCDPR:	MOV.B	R0,@PRWKS:8		; SET BAR CODE PRINT COUNT
	BSR	SETMD1			; SET PRINT MODE
	MOV.W	@(YCLMCF,FP),R0 	; GET START COLUMN
	MOV.W	R0,@PRCLMS:8		; SAVE START COLUMN POISTION
	MOV.B	#XPFWD+XRBSB,R0 	; SET FORWARD/BLCAK PRINT
	MOV.B	R0,@PRTF2:8		;
	MOV.B	#ZDP180,R0		; SET 180 DPI
	MOV.B	R0,@PRDPIF:8		;
	MOV.W	#BCDLD,R0		; SET BAR CODE LOAD TABLE
	BSR	BCDP_4			; PRINT BAR CODE
BCDP_1: ADD.B	#-1,@PRWKS:8		;
	BEQ	BCDP_2			; BR IF BAR CODE PRINT END
	MOV.W	#ZF24P,R3		; SET 24 PIN FEED COUNT
	BSR	PRLF1			; FEED TO NEXT PRINT POSITION
	BTST.B	#QPRDN,@PRTF:8		;
	BEQ	BCDP_1			; BR IF NO PRINT DATA
	MOV.W	FP,@-SP 		;
	BSR	PROUT2			; PRINT OUT BUFFER
	MOV.W	@SP+,FP 		;
	BRA	BCDP_1			;
					;
BCDP_2: MOV.W	#Z6LPI,R3		;
	BSR	PRLF1			; FEED TO NEXT PRINT POSITION
	JSR	@CLIMB			; CLEAR IMAGE BUFFER
	MOV.W	#OCRLD,R0		; SET OCR LOAD TABLE
	BSR	BCDP_4			; PRINT OCR-B CODE
	BTST.B	#QCNTP,@PRTF:8		;
	BNE	BCDP_3			; BR IF PRINT CONTINUE
	CALDP3	#ZPPRG			; FEED TO NEXT PRINT POSITION
BCDP_3: JSR	@CLIMB			; CLEAR IMAGE BUFFER
	BRA	PRINTE			;
	.PAGE
					;
BCDP_4: MOV.W	R0,@LDTBP:8		; SET LOAD TABLE POINTER
	MOV.W	@TXBPS:8,FP		; GET TEXT BUFFER START POINTER
BCDP_5: MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	BCDP_7			; BR IF DATA END
	SUB.B	#ZJ13FM,R0		;
	BCS	BCDP_6			; BR IF NOT BAR CODE DATA
	MULXU.B #3,R0			;
	ADD.W	@LDTBP:8,R0		;
	MOV.W	FP,@-SP 		;
	JSR	@R0			; LOAD BAR CODE
	MOV.W	@SP+,FP 		;
	CLR.W	R0			;
	MOV.B	@(YBSPDF,FP),R0 	; GET BAR CODE DATA SIZE
	ADD.W	R0,FP			;
	ADDS.B	#YSPDPF,FP		; GET NEXT DATA POINTER
	BRA	BCDP_5			;
					;
BCDP_6: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA POINTER
	BRA	BCDP_5			;
					;
BCDP_7: MOV.W	FP,@-SP 		;
	BSR	PROUT1			; PRINT OUT BUFFER
	MOV.W	@SP+,FP 		;
	RTS				;
					;
BCDLD:	JMP	@BJ13LD 		;  8  BAR-CODE JAN 13
	JMP	@BJ08LD 		;  9  BAR-CODE JAN 08
	JMP	@BCDBLD 		; 10  BAR-CODE CODER BAR
	JMP	@BC39LD 		; 11  BAR-CODE CODE 39

OCRLD:	JMP	@OJ13LD 		;  8  BAR-CODE JAN 13
	JMP	@OJ08LD 		;  9  BAR-CODE JAN 08
	JMP	@OCDBLD 		; 10  BAR-CODE CODER BAR
;930403 JMP	@OC39LD 		; 11  BAR-CODE CODE 39
	RTS3				; 930403
	.PAGE
;
;	LOAD AND PRINT OUT  (MULTI PRINT BLOCK)
;
;	IN	NONE
;
;	OUT	FP : LAST PRINT DATA POINTER
;
PXLD:	MOV.W	@TXBPS:8,FP		; GET TEXT BUFFER START POINTER
PXLD_1: MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PXLD_0			; BR IF TEXT BUFFER END
	CMP.B	#ZIMGFM,R0		;
	BLS	PXLD_3			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BEQ	PXLD_0			; BR IF FEED COMMAND
PXLD_2: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA
	BRA	PXLD_1			;
					;
PXLD_0: RTS				;
					;
PXLD_3: MOV.B	@(YCOLRF,FP),R4 	; GET PRINT COLOUR
	MOV.B	@PRTF2:8,R5		; GET CURRENT PASS CONDITION
	AND.B	#ZN-XPSAM-XPREV-XPFWD,R5;
	AND.B	R5,R4			;
	CMP.B	R5,R4			;
	BNE	PXLD_2			; BR IF NOT COLOUR MATCH
	MOV.B	@(YSPDPF,FP),R4 	; GET PRINT SPEED/PITCH
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	MOV.B	R4,@PRDPIF:8		; SET PRINT DPI NO.
	MOV.W	@(YCLMCF,FP),R1 	; GET START COLUMN
	MOV.W	R1,@PRCLMS:8		; SAVE START COLUMN POISTION
	BTST.B	#QDBST2,@PRMODF:8	;
	BNE	PXLD_4			; BR IF DOUBLE STRIKE MULTI PASS
	BSR	PXLD_6			; PRINT DATA
	BRA	PXLD_1			;
					;
PXLD_4: MOV.W	FP,@-SP 		;
	BSR	PXLD_6			; PRINT DOUBLE STRIKE 1ST PASS
	MOV.W	@SP+,FP 		;
	BSET.B	#QPDBSP,@PRTF2:8	; SET DOUBLE STRIKE 2ND PASS
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BSR	PXLD_5			; PRINT DOUBLE STRIKE 2ND PASS
	BCLR.B	#QPDBSP,@PRTF2		; RESET DOUBLE STRIKE PASS
	BRA	PXLD_1			;
	.PAGE
					;
PXLD_5: MOV.B	@(YCOLRF,FP),R4 	; GET PRINT COLOUR
	MOV.B	@PRTF2:8,R5		; GET CURRENT PASS CONDITION
	AND.B	#ZN-XPSAM-XPREV-XPFWD,R5;
	AND.B	R5,R4			;
	CMP.B	R5,R4			;
	BNE	PXLD_7			; BR IF NOT COLOUR MATCH
PXLD_6: MOV.W	@(YCLMCF,FP),R4 	; GET COLUMN POSITION
	CMP.W	@PRMCS:8,R4		;
	BCC	PXLD_7			; BR IF MAX COLUMN OVER
	MULXU.B #3,R0			;
	ADD.W	@LDTBP:8,R0		;
	MOV.W	FP,@-SP 		;
	JSR	@R0			; LOAD CG PATTERN
	MOV.W	@SP+,FP 		;
PXLD_7: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA POINTER
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PXLD_8			; BR IF TEXT BUFFER END
	MOV.B	@(YSPDPF,FP),R4 	; GET PRINT SPEED/PITCH
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	CMP.B	@PRDPIF:8,R4		;
	BNE	PXLD_8			; BR IF PRINT DPI CHANGE
	CMP.B	#ZIMGFM,R0		;
	BLS	PXLD_5			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BNE	PXLD_7			; BR IF NOT FEED COMMAND
PXLD_8: MOV.W	FP,@-SP 		;
	BSR	PXOUT			; PRINT OUT BUFFER
	JSR	@CLIMB			; CLEAR IMAGE BUFFER
	MOV.W	@SP+,FP 		;
PXLD_9: RTS				;
	.PAGE
;
;	LOAD AND PRINT OUT  (SINGLE PRINT BLOCK)
;
;	IN	NONE
;
;	OUT	FP : LAST PRINT DATA POINTER
;
PXLD1:	BTST.B	#Q1BLK,@PRTF:8		;
	BEQ	PXLD			; BR IF MULTI PRINT BLOCK
	MOV.W	@TXBPS:8,FP		; GET TEXT BUFFER START POINTER
PXLD_A: MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PXLD_9			; BR IF TEXT BUFFER END
	CMP.B	#ZIMGFM,R0		;
	BLS	PXLD_B			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BEQ	PXLD_9			; BR IF FEED COMMAND
	ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA
	BRA	PXLD_A			;
					;
PXLD_B: MOV.B	@(YSPDPF,FP),R4 	; GET PRINT SPEED/PITCH
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	SHLR.B	R4			;
	MOV.B	R4,@PRDPIF:8		; SET PRINT DPI NO.
	MOV.W	@(YCLMCF,FP),R1 	; GET START COLUMN
	MOV.W	R1,@PRCLMS:8		; SAVE START COLUMN POISTION
PXLD_C: MOV.W	@(YCLMCF,FP),R4 	; GET COLUMN POSITION
	CMP.W	@PRMCS:8,R4		;
	BCC	PXLD_D			; BR IF MAX COLUMN OVER
	MULXU.B #3,R0			;
	ADD.W	@LDTBP:8,R0		;
	MOV.W	FP,@-SP 		;
	JSR	@R0			; LOAD CG PATTERN
	MOV.W	@SP+,FP 		;
PXLD_D: ADDS.B	#ZFMTSZ,FP		; GET NEXT DATA POINTER
	MOV.B	@(YFMATF,FP),R0 	; GET FORMAT ID
	BEQ	PXLD_E			; BR IF TEXT BUFFER END
	CMP.B	#ZIMGFM,R0		;
	BLS	PXLD_C			; BR IF PRINT DATA
	CMP.B	#ZFEDFM,R0		;
	BNE	PXLD_D			; BR IF NOT FEED COMMAND
PXLD_E: MOV.W	FP,@-SP 		;
	BSR	PXOUT			; PRINT OUT BUFFER
	MOV.W	@SP+,FP 		;
PXLD_Z: RTS				;
	.PAGE
;
;	COPY IMAGE BUFFER TO PRINT BUFFER
;
;	IN	NONE
;
;	OUT	NONE
;
PXOUT:	MOV.B	@PRDPIF:8,R3		; GET CURRENT PRINT DPI
	MOV.W	@PRMCS:8,R4		; GET MAX COLUMN
	MOV.W	@RMARGS:8,R5		; GET RIGHT MARGIN COLUMN
	JSR	@GETLRP 		; GET IMAGE BUFFER LEFT/RIGHT POINTER
	SUB.W	R4,R5			; CALCULATE BYTE SIZE
	BLS	PXOU_1			; BR IF START >= END
	LDC.B	#PAGE IMGBF,EP		;
	CALSYS	#CLRBFW 		; CLEAR IMAGE BIUFFER
PXOU_1: TST.B	@PRSFC			;
	BEQ	PXLD_Z			; BR IF NO PRINT DATA
	MOV.B	@PRDPIF:8,R3		; GET CURRENT PRINT DPI
	JSR	@CUTSP			; CUT USELESS SPACE
	BEQ	PXLD_Z			; BR IF NO PRINT DATA
	MOV.B	@PRSBF+YPSSPD,R1	; GET PRINT SPEED
	MOV.B	@PRDPIF:8,R0		;
	BNE	PXOU_2			; BR IF NOT 360 DPI
	CMP.B	#ZPS20,R1		;
	BCS	PXOUT1			; BR IF 1.0 OR 1.5 PRINT SPEED
	JSR	@CV321			; CONVERT 360 DPI TO 180 DPI
	MOV.B	#ZDP180,R0		; SET 180 DPI
	BRA	PXOU_3			;
					;
PXOU_2: CMP.B	#ZDP180,R0		;
	BNE	PXOUT1			; BR IF NOT 180 DPI
	CMP.B	#ZPS15,R1		;
	BNE	PXOUT1			; BR IF NOT 1.5 PRINT SPEED
	JSR	@CV123			; CONVERT 180 DPI TO 360 DPI
	MOV.B	#ZDP360,R0		; SET 360 DPI
PXOU_3: MOV.B	R0,@PRDPIF:8		;
PXOUT1: TST.B	@PRSFC			;
	BEQ	PXLD_Z			; BR IF NO PRINT DATA
	MOV.W	@PRLFXS:8,R3		;
	BSR	PRLF1			; FEED TO PRINT START POSITION
	CLR.W	@PRLFXS:8		; RESET PRINT FEED COUNT FOR xN PRINT
	MOV.W	@PRSFC,R0		;
	MOV.W	R0,@PRWBF		; SAVE PRINT FIELD COUNT
	BSR	GETPBF			; GET PRINT BUFFER
	MOV.W	#MAKXN,R5		; GET COPY ENTRY
	JSR	@COPY			; COPY IMAGE BUFFER TO PRINT BUFFER
	BEQ	PXOU_4			; BR IF NO PRINT DATA
	MOV.W	FP,@-SP 		; SAVE PRINT COMMAND BUFFER POINTER
	JSR	@CUTPR			; CUT USELESS SPACE FROM @PRINT BUFFER
	MOV.W	@SP+,FP 		;
	MOV.B	@PRDPIF:8,R3		;
	JSR	@CPS2C			; COPY PRINT SPEED TO COMMAND BUFFER
	BSR	PXOU_4			; UNSAVE PRINT SPEED BUFFER
	BRA	PROUT3			;
					;
PXOU_4: MOV.W	#PRWBF,R1		;
	MOV.W	#PRSFC,R2		;
	MOV.W	@R1+,R5 		;
	MOV.W	R5,@R2+ 		; UNSAVE FIELD COUNT
	SWAP	R5			;
	EXTU	R5			;
	ADD.W	#-1,R5			; ADJUST FOR LOOP
PXOU_5: MOV.W	@R1+,R0 		;
	MOV.W	R0,@R2+ 		; UNSAVE PRINT SPEED BUFFER
	MOV.W	@R1+,R0 		;
	MOV.W	R0,@R2+ 		;
	MOV.W	@R1+,R0 		;
	MOV.W	R0,@R2+ 		;
	SCB/F	R5,PXOU_5		;
	CLR.W	@R2			; SET END MARK
	RTS				;
	.PAGE
;
;	PRINT COLOUR/DOUBLE STRIKE
;
;	IN	R0 : LOAD TABLE POINTER
;
;	OUT	FP : LAST PRINT DATA
;
PXCOL:	MOV.W	@PRWKS:8,R1		;
	ADDS.B	#3,R1			; UPDATE COPY ENTRY
	MOV.W	R1,@PRWKS:8		;
PXCOL1: MOV.W	R0,@LDTBP:8		; SET LOAD TABLE POINTER
PXCO_0: BTST.B	#QCLMLT,@COLORF:8	;
	BNE	PXCO_1			; BR IF COLOUR PRINT MULTI PASS
	MOV.B	@COLORF:8,R0		;
	AND.B	#XCOLBP+XCOLYP+XCOLCP+XCOLMP,R0
	OR.B	@PRTF2:8,R0		;
	MOV.B	R0,@PRTF2:8		; SET PRINT COLOUR
	BSR	PXLD1			; LOAD AND PRINT
	BTST.B	#Q1BLK,@PRTF:8		;
	BNE	PXCO_5			; BR IF SINGLE PRINT BLOCK
	MOV.B	@PRTF2:8,R0		;
	AND.B	#ZN-XCOLBP-XCOLYP-XCOLCP-XCOLMP,R0
	MOV.B	R0,@PRTF2:8		;
	RTS				;
					;
PXCOL2: MOV.W	@PRWKS:8,R1		;
	ADDS.B	#3,R1			; UPDATE COPY ENTRY
	MOV.W	R1,@PRWKS:8		;
	BTST.B	#Q1BLK,@PRTF:8		;
	BEQ	PXCO_0			; BR IF MULTI PRINT BLOCK
	MOV.W	FP,@-SP 		;
	BSR	PXOUT1			; PRINT OUT BUFFER
	MOV.W	@SP+,FP 		;
	RTS				;
					;
PXCO_1: BTST.B	#QCOLYP,@COLORF:8	;
	BEQ	PXCO_2			; BR IF NO YELLOW PRINT DATA
	BSET.B	#QRBSY,@PRTF2:8 	;
	BSR	PXLD			; LOAD AND PRINT YELLOW DATA
	BCLR.B	#QRBSY,@PRTF2:8 	;
PXCO_2: BTST.B	#QCOLMP,@COLORF:8	;
	BEQ	PXCO_3			; BR IF NO MAGENTA PRINT DATA
	BSET.B	#QRBSM,@PRTF2:8 	;
	BSR	PXLD			; LOAD AND PRINT MAGENTA DATA
	BCLR.B	#QRBSM,@PRTF2:8 	;
PXCO_3: BTST.B	#QCOLCP,@COLORF:8	;
	BEQ	PXCO_4			; BR IF NO CYAN PRINT DATA
	BSET.B	#QRBSC,@PRTF2:8 	;
	BSR	PXLD			; LOAD AND PRINT CYAN DATA
	BCLR.B	#QRBSC,@PRTF2:8 	;
PXCO_4: BTST.B	#QCOLBP,@COLORF:8	;
	BEQ	PXCO_5			; BR IF NO BLACK PRINT DATA
	BSET.B	#QRBSB,@PRTF2:8 	;
	BSR	PXLD			; LOAD AND PRINT BLACK DATA
	BCLR.B	#QRBSB,@PRTF2:8 	;
PXCO_5: RTS				;
	.PAGE
;
;	PRINT xN SIZE
;
;	IN	R0 : CHARCTER SIZE
;
;	OUT	NONE
;
PRXN:	LDC.B	#0,DP			;
	EXTU	R0			;
	CLR.W	R1			;
	MOV.B	@PRDPIF:8,R1		; GET CURRENT PRINT DPI
	MOV.B	@(PCLMTB,R1),R1 	; ADJUST CURRENT MIN. PRINT COLUMN
	CLR.W	R4			;
	MOV.W	@RMARGS:8,R5		; GET RIGHT MARGIN
	SUB.W	@LMARGS:8,R5		;
	DIVXU.W R0,R4			; CALCULATE EFFECTIVE MARGIN
	TST.W	R4			;
	BEQ	PRXN_9			; BR IF REMAINDER = 0
	ADD.W	R1,R5			; ADJUST CURRENT MIN. PRINT COLUMN
PRXN_9: ADD.W	R1,R5			; ADJUST FOR UNIT COLUMN REMAINDER
	ADD.W	#-1,R5			;
	ADD.W	@LMARGS:8,R5		; ADD LEFT MARGIN
	MOV.W	R5,@PRMCS:8		; SET MAX COLUMN
PRXN_1: MOV.W	#PRX2,R1		;
	CMP.B	#2,R0			;
	BEQ	PRXN_2			; BR x2 SIZE
	MOV.W	#PRX3,R1		;
	CMP.B	#3,R0			;
	BEQ	PRXN_2			; BR x3 SIZE
	MOV.W	#PRX4,R1		;
	CMP.B	#4,R0			;
	BEQ	PRXN_2			; BR x4 SIZE
	MOV.W	#PRX5,R1		;
	CMP.B	#5,R0			;
	BEQ	PRXN_2			; BR x5 SIZE
	MOV.W	#PRX6,R1		;
	CMP.B	#6,R0			;
	BEQ	PRXN_2			; BR x6 SIZE
	MOV.W	#PRX7,R1		;
	CMP.B	#7,R0			;
	BEQ	PRXN_2			; BR x7 SIZE
	MOV.W	#PRX8,R1		;
PRXN_2: MOV.W	R1,@PRWKS:8		; SET COPY ENTRY
	BTST.B	#QKJOLP,@PRMODF:8	;
	BEQ	PRXN_3			; BR IF NO KANJI OVERLINE PRINT
	MOV.W	#PRKLD1,R0		; SET LOAD TABLE
	BSR	PXCOL1			; PRINT KANJI OVERLINE
	BSR	PRLF4X			; FEED TO NEXT PRINT POSITION
	JSR	@CLIMB			; CLEAR IMAGE BUFFER
	BCLR.B	#QPRSD,@PRTF:8		; RESET SAME DIRECTION PRINT
PRXN_3: MOV.W	#PRKLD3,R0		; SET LOAD TABLE
	BSR	PXCOL1			; PRINT xN SIZE 1ST PASS
	CLR.W	R0			;
	MOV.B	@PNLELS:8,R0		; GET xN SIZE
	ADD.W	#-2,R0			; ADJUST FOR LOOP
PRXN_4: MOV.W	R0,@-SP 		;
	BSR	PRLF24			; FEED TO NEXT PRINT POSITION
	BSR	PXCOL2			; PRINT xN SIZE 2ND PASS
	MOV.W	@SP+,R0 		;
	SCB/F	R0,PRXN_4		;
	JSR	@CLIMB			; CLEAR IMAGE BUFFER
	BTST.B	#QKJULP,@PRMODF:8	;
	BEQ	PRXN_5			; BR IF NO KANJI UNDERLINE PRINT
	BSR	PRLF4X			; FEED TO NEXT PRINT POSITION
	BCLR.B	#QPRSD,@PRTF:8		; RESET SAME DIRECTION PRINT
	MOV.W	#PRKLD4,R0		; SET LOAD TABLE
	BSR	PXCOL1			; PRINT KANJI UNDERLINE
	JSR	@CLIMB			; CLEAR IMAGE BUFFER
PRXN_5: BTST.B	#QAKRLP,@PRMODF:8	;
	BEQ	PRXN_8			; BR IF RULED LINE PRESENT
	MOV.B	@PNLELS:8,R3		; GET xN SIZE
	CMP.B	#5,R3			;
	BCC	PRXN_6			; BR IF N > 4
	ADD.B	#-1,R3			;
	MULXU.B #6,R3			; CALCULATE FEED COUNT FOR RULED LINE
	BSR	PRLFX			; FEED TO RULED LINE CONNECT POSITION
	MOV.W	#ZF24P,R0		; GET 24 PIN FEED COUNT
	SUB.W	R3,R0			;
	MOV.W	R0,@PRLFS:8		; SET PRINT FEED COUNT
	MOV.W	#PRALD3,R0		; SET LOAD TABLE
	BSR	PXCOL			; PRINT ANK RULED LINE
	BRA	PRXN_7			;
					;
PRXN_6: BSR	PRLF24			; FEED TO NEXT PRINT POSITION
	MOV.W	#PRALD3,R0		; SET LOAD TABLE
	BSR	PXCOL			; PRINT ANK RULED LINE 1ST PASS
	MOV.B	@PNLELS:8,R3		; GET xN SIZE
	SUB.B	#5,R3			;
	MULXU.B #6,R3			; CALCULATE FEED COUNT FOR RULED LINE
	BSR	PRLFX			; FEED TO RULED LINE CONNECT POSITION
	MOV.W	#ZF24P,R0		; GET 24 PIN FEED COUNT
	SUB.W	R3,R0			;
	MOV.W	R0,@PRLFS:8		; SET PRINT FEED COUNT
	BSR	PXCOL2			; PRINT ANK RULED LINE 2ND PASS
PRXN_7: JSR	@CLIMB			; CLEAR IMAGE BUFFER
	CLR.W	@PRLFS:8		; RESET PRINT FEED COUNT
PRXN_8: MOV.B	@(YFMATF,FP),R0 	;
	BEQ	PRINTE			; BR IF DATA END
	BSR	PRFDC			; SEND FEED PACKET TO DP3
	MOV.B	@PNLELS:8,R0		; GET xN SIZE
	BRA	PRXN_1			;
	.PAGE
;
;	COPY JUMP TABLE FOR xN SIZE
;
PRX2:	BRA    MMX21:16 		; 1ST PASS
	BRA    MMX22:16 		; 2ND PASS
	BRA    MMX21:16 		; RULED LINE PASS

PRX3:	BRA    MMX31:16 		; 1ST PASS
	BRA    MMX32:16 		; 2ND PASS
	BRA    MMX33:16 		; 3RD PASS
	BRA    MMX31:16 		; RULED LINE PASS

PRX4:	BRA    MMX41:16 		; 1ST PASS
	BRA    MMX42:16 		; 2ND PASS
	BRA    MMX43:16 		; 3RD PASS
	BRA    MMX44:16 		; 4TH PASS
	BRA    MMX41:16 		; RULED LINE PASS

PRX5:	BRA    MMX51:16 		; 1ST PASS
	BRA    MMX52:16 		; 2ND PASS
	BRA    MMX53:16 		; 3RD PASS
	BRA    MMX54:16 		; 4TH PASS
	BRA    MMX55:16 		; 5TH PASS
	BRA    MMX51:16 		; RULED LINE 1ST PASS
	BRA    MMX52:16 		; RULED LINE 2ND PASS
	.PAGE
					;
PRX6:	BRA    MMX61:16 		; 1ST PASS
	BRA    MMX62:16 		; 2ND PASS
	BRA    MMX63:16 		; 3RD PASS
	BRA    MMX64:16 		; 4TH PASS
	BRA    MMX65:16 		; 5TH PASS
	BRA    MMX66:16 		; 6TH PASS
	BRA    MMX61:16 		; RULED LINE 1ST PASS
	BRA    MMX62:16 		; RULED LINE 2ND PASS

PRX7:	BRA    MMX71:16 		; 1ST PASS
	BRA    MMX72:16 		; 2ND PASS
	BRA    MMX73:16 		; 3RD PASS
	BRA    MMX74:16 		; 4TH PASS
	BRA    MMX75:16 		; 5TH PASS
	BRA    MMX76:16 		; 6TH PASS
	BRA    MMX77:16 		; 7TH PASS
	BRA    MMX71:16 		; RULED LINE 1ST PASS
	BRA    MMX72:16 		; RULED LINE 2ND PASS

PRX8:	BRA    MMX81:16 		; 1ST PASS
	BRA    MMX82:16 		; 2ND PASS
	BRA    MMX83:16 		; 3RD PASS
	BRA    MMX84:16 		; 4TH PASS
	BRA    MMX85:16 		; 5TH PASS
	BRA    MMX86:16 		; 6TH PASS
	BRA    MMX87:16 		; 7TH PASS
	BRA    MMX88:16 		; 8TH PASS
	BRA    MMX81:16 		; RULED LINE 1ST PASS
	BRA    MMX82:16 		; RULED LINE 2ND PASS
	.PAGE
;
;	MAKE xN PATTERN
;
;	IN	FP : PRINT SPEED BUFFER POINTER
;
;	OUT	FP : NOT CHNAGE
;
MAKXN:	MOV.W	@(YPSFLG,FP),R0 	;
	MOV.W	R0,@(YPSFLG+ZWBF,FP)	; SAVE PRINT SPEED
	MOV.W	@(YPSFLC,FP),R0 	;
	MOV.W	R0,@(YPSFLC+ZWBF,FP)	; SAVE LEFT COLUMN
	MOV.W	R0,R5			;
	CLR.W	R2			;
	MOV.B	@PNLELS:8,R2		; GET xN SIZE
	SUB.W	@LMARGS:8,R0		; SUB LEFT MARGIN COLUMN
	MULXU.W R2,R0			; CALCULATE DESITINATION COLUMN
	ADD.W	@LMARGS:8,R1		; ADD LEFT MARGIN COLUMN
	MOV.W	R1,@(YPSFLC,FP) 	; SET NEW LEFT COLUMN
	MOV.W	R1,R4			;
	MOV.B	@PRDPIF:8,R3		; GET PRINT DPI
	JSR	@GETLRP 		; GET LEFT/RIGHT POINTER
	BSET.W	#QMSBW,R4		; SET COPY DESTINATION POINTER
	MOV.W	@(YPSFRC,FP),R0 	;
	MOV.W	R0,@(YPSFRC+ZWBF,FP)	; SAVE RIGHT COLUMN
	SUB.W	@LMARGS:8,R0		; SUB LEFT MARGIN COLUMN
	CMP.B	#1440/180,R3		;
	BEQ	MAKX_1			; BR IF 180 DPI
	ADD.W	R3,R0			; ADJUST 1 COLUMN
MAKX_1: MULXU.W R2,R0			; CALCULATE DESITINATION COLUMN
	ADD.W	@LMARGS:8,R1		; ADD LEFT MARGIN COLUMN
	MOV.W	R1,@(YPSFRC,FP) 	; SET NEW RIGHT COLUMN
	MOV.W	R3,R0			; SET UNIT COLUMN
	MOV.W	@(YPSFRC+ZWBF,FP),R3	; GET RIGHT COLUMN
	SUB.W	@(YPSFLC+ZWBF,FP),R3	; CALCULATE COLUMN COUNT
	CLR.W	R2			;
	DIVXU.W R0,R2			; CALCUALTE LOOP COUNT
	CMP.B	#1440/180,R0		;
	BNE	MAKX_2			; BR IF NOT 180 DPI
	ADD.W	#-1,R3			; ADJUST FOR LOOP
MAKX_2: MOV.W	FP,@-SP 		;
	MOV.W	@PRWKS:8,R1		; GET COPY ENTRY
	JSR	@R1			; COPY IAMGE BUFFER TO PRINT BUFFER
	MOV.W	@SP+,FP 		;
	RTS				;
	.PAGE
;
;******************************************
;	911220+
;******************************************
MMX21:	PJSR	@MX21
	RTS
MMX22:	PJSR	@MX22
	RTS
MMX31:	PJSR	@MX31
	RTS
MMX32:	PJSR	@MX32
	RTS
MMX33:	PJSR	@MX33
	RTS
MMX41:	PJSR	@MX41
	RTS
MMX42:	PJSR	@MX42
	RTS
MMX43:	PJSR	@MX43
	RTS
MMX44:	PJSR	@MX44
	RTS
MMX51:	PJSR	@MX51
	RTS
MMX52:	PJSR	@MX52
	RTS
MMX53:	PJSR	@MX53
	RTS
MMX54:	PJSR	@MX54
	RTS
MMX55:	PJSR	@MX55
	RTS
MMX61:	PJSR	@MX61
	RTS
MMX62:	PJSR	@MX62
	RTS
MMX63:	PJSR	@MX63
	RTS
MMX64:	PJSR	@MX64
	RTS
MMX65:	PJSR	@MX65
	RTS
MMX66:	PJSR	@MX66
	RTS
MMX71:	PJSR	@MX71
	RTS
MMX72:	PJSR	@MX72
	RTS
MMX73:	PJSR	@MX73
	RTS
MMX74:	PJSR	@MX74
	RTS
MMX75:	PJSR	@MX75
	RTS
MMX76:	PJSR	@MX76
	RTS
MMX77:	PJSR	@MX77
	RTS
MMX81:	PJSR	@MX81
	RTS
MMX82:	PJSR	@MX82
	RTS
MMX83:	PJSR	@MX83
	RTS
MMX84:	PJSR	@MX84
	RTS
MMX85:	PJSR	@MX85
	RTS
MMX86:	PJSR	@MX86
	RTS
MMX87:	PJSR	@MX87
	RTS
MMX88:	PJSR	@MX88
	RTS
;
	.END

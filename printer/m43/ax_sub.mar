	.PROGRAM	aplsub
	.HEADING	"M4324 AX MISCELLANEOUS SUBROUTINE MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX MISCELLANEOUS SUBROUTINE MODULE	*
;							*
;	FILE NAME	AX_SUB.MAR			*
;	CREATED 	15/MAY/1991			*
;							*
;********************************************************
;
	.EXPORT 	CHGDAT,DIV32, GPTPM, GETWTF
	.EXPORT 	GETPC1,GETPC3,INBFC, INBFP
	.EXPORT 	CPCHG, SELKCG,STCRM, INBFP2
	.EXPORT 	GPTTB			; 920321
;
	.IMPORT 	CWETB, INCTB, USATB
	.IMPORT 	STDCG, CHKJST,SJSTP1
	.IMPORT 	OPTCG			; 911206
;
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_RAM.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
	.INCLUDE	"GAIOP.H"
;
;	<< EACH CONSTANT >>
;
;
;
ZINTCD: .EQU	 12			; INTERNATIONAL CHARACTER CODE COUNTER
QAKCDH: .EQU	  8			; EXPAND ANK HIGH CODE BIT
QAOCRB: .EQU	 15			; OCR-B CHARACTER BIT
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
; << SUB >>	CHANGE DATA CODE
;
;	IN	R0 : DATA CODE
;
;	OUT	R0 : CHANGE DATA CODE
;			bit08 -> EXPAND ANK HIGH CODE
;				STANDARD CG : H'000->H'07F
;				KATAKANA CG : H'080->H'0FF
;				GRAPHIC  CG : H'100->H'17F
;				DOWNLOAD CG : H'180->H'1FF
;		R3 : NOT = 0 ... IGNORE DATA
;
;	USE	R0->FP,EP
;
CHGDAT: BCLR.B	#QDWLCH,@PTMD2F:8	; RESET DOWNLOAD CHARACTER FLAG
	BCLR.B	#QNOULC,@PTMD2F:8	; RESET NO LINE CHARACTER FLAG
	BCLR.B	#QCGGRP,@PTMD2F:8	; RESET GRAPHIC CHARACTER FLAG
	CLR.W	R1			; RESET EXPAND ANK CODE
	TST.B	R0			;
	BMI	CHGD_C:16		; BR. IF DATA >= H'80
	BTST.B	#QDLSEL,@PTMD0F:8	;
	BNE	CHGD_6			; BR. IF DOWNLOAD MODE
;
;	<< CHECK INTERNATIONAL CHARACTER CODE >>
;
CHGD_2: CLR.W	R4			; CLEAR OFFSET
	LDC.B	#PAGE USATB,EP		; SET INTERNATIONAL CHARACTER TABLE PAGE
CHGD_3: CMP.B	@(USATB,R4),R0		;
	BEQ	CHGD_4			; BR. IF SAME INTERNATIONAL CHARACTER CODE
	BCS	CHGD_5			; BR. IF NOT INTERNATIONAL CHARACTER CODE
	ADD:Q.W #1,R4			; UPDATE OFFSET
	CMP.B	#ZINTCD,R4		;
	BLS	CHGD_3			; BR. IF NOT CHECK END
	BRA	CHGD_5
	;
CHGD_4: MOV.B	@APL1F:8,R5		; GET APPLICATION FLAG 1 ( = INTERNATIONAL CHARACTER FLAG)
	AND.B	#XINTCG,R5		; GET INTERNATIONAL CHARACTER FLAG
	XCH	R4,R5			; CHANGE FLAG TO OFFSET
	EXTU	R4			;
	EXTU	R5			;
	SHLL.W	R4			; FLAG x 2 = TABLE OFFSET
	LDC.B	#PAGE INCTB,EP		; SET TABLE PAGE
	MOV.W	@(INCTB,R4),R4		; GET TARGET INTERNATIONAL CHARACTER TABLE BASE POINTER
	ADD.W	R5,R4			; TABLE BASE + CHECK CODE OFFSET
	MOV.B	@R4,R0			; GET INTERNATIONAL CHARACTER CODE
	BPL	CHGD_5			; BR. IF EXIST STANDARD CG TABLE
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	BSET.W	#QAKCDH,R1		; SET EXPAND ANK CODE FLAG
CHGD_5: BTST.B	#QOCRMD,@PTMD2F:8	;
	BEQ	CHGD_8			; BR. IF NOT OCR-B MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BEQ	CHGD_8			; BR. IF DRAFT MODE
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	CHGD_8			; BR. IF PROPORTIONAL MODE
	BTST.B	#QCONDE,@PTMD1F:8	;
	BNE	CHGD_8			; BR. IF CONDENSE MODE
	BTST.B	#QPIT15,@PTMD1F:8	;
	BNE	CHGD_8			; BR. IF 15 CPI MODE
	BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	CHGD_8			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BNE	CHGD_8			; BR. IF SUBSCRIPT MODE
	MOV.W	R0,@-SP 		;
	MOV.W	R1,@-SP 		;
	JSR	@CHKJST 		; CHECK JUSTIFICATION
	MOV.B	R1,R2			;
	MOV.W	@SP+,R1 		;
	MOV.W	@SP+,R0 		;
	TST.B	R2			;
	BNE	CHGD_8			; BR. IF JUSTIFICATION MODE (1->3)
	BSET.W	#QAOCRB,R1		; SET OCR-B MODE FLAG (ONLY PICA & ELITE)
	BRA	CHGD_8
;
;	<< DOWNLOAD MODE >>
;
CHGD_6: LDC.B	#PAGE DLDID,EP		; SET ID AREA PAGE
	MOV.W	#DLDID,R4		; SET ID AREA ADDRESS
	TST.B	@(YDLID0,R4)		;
	BMI	CHGD_2			; BR. IF NOT DEFINE DOWNLOAD (NORMAL DATA)
	BSR	STCRM:16		; SET CURRENT MODE (= R5)
	CMP.B	@(YDLID0,R4),R5 	; CHECK CURRENT MODE & DEFINE MODE
	BNE	CHGD_2			; BR. IF INVALID DOWNLOAD
	BTST.B	#QROMCP,@(YDLID1,R4)	;
	BNE	CHGD_7			; BR. IF CG COPY TO DOWNLOAD AREA
	BTST.B	#QDSLON,@(YDLID1,R4)	;
	BEQ	CHGD_2			; BR. IF INVALID DLSEL FLAG
CHGD_7: MOV.B	#01,R3			; SET IGNORE DATA FLAG
	CMP.B	#H'15,R0                ;
	BEQ	CHGD_A			; BR. IF IGNORE DATA (DOWNLOAD MODE FOR H'15)
	BSET.B	#QDWLCH,@PTMD2F:8	; SET DOWNLOAD CHARACTER FLAG
	BSET.W	#QAKCDH,R1		; SET EXPAND ANK CODE FLAG
	BSET.B	#7,R0			; SET MSB (H'180->H'1FF)
CHGD_8: TST.B	R1			;
	BNE	CHGD_9			; BR. IF GRAPHIC / DOWNLOAD CHARACTER CODE
	TST.B	R0			;
	BMI	CHGD_9			; BR. IF KATAKANA CHARACTER CODE
	CMP.B	#"0",R0                 ;
	BNE	CHGD_9			; BR. IF NOT ZERO CHARACTER CODE (H'30)

;---------------------------------- Non Slash Zero Code 2001/03/20 +Shin --;
;   BTST.B  #QZEROS,@APL0F:8    ;
;   BEQ     CHGD_9                  ; BR. IF NOT SLASH TO ZERO
;   SUBS.B  #"0",R0                 ; SET SLASH TO ZERO CHARACTER CODE
;--------------------------------------------------------------------------;

CHGD_9: EXTU    R0          ;
	OR.W	R1,R0			; SET EXPAND ANK HIGH CODE
	CLR.B	R3			; SET VALID CODE FLAG
CHGD_A: TST.B	R3			;
	RTS
	.PAGE
;
;	<< H'80 =< DATA =< H'FF >>
;
CHGD_C: BTST.B	#QGRPTB,@APL0F:8	;
	BNE	CHGD_E			; BR. IF SELECT GRAPHIC TABLE
	CMP.B	#H'FF,R0                ;
	BNE	CHGD_D			; BR. IF NOT H'FF
	MOV.W	#01,R3			; SET IGNORE CODE (KATAKANA H'FF)
	BRA	CHGD_A
	;
CHGD_D: MOV.B	#01,R3			; SET INVALID CODE FLAG (KATAKANA TABLE)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	CHGD_A			; BR. IF PROPORTIONAL MODE
	BTST.B	#QPIT15,@PTMD1F:8	;
	BNE	CHGD_A			; BR. IF 15 CPI MODE
	BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	CHGD_A			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BNE	CHGD_A			; BR. IF SUBSCRIPT MODE
	BSET.B	#7,R0			; SET MSB (H'080->H'0FF)
	CMP.B	#" ",R0                 ;
	BEQ	CHGD_8			; BR. IF KATAKANA SPACE (H'A0)
	BRA	CHGD_8
;
;	<< GRAPHIC TABLE >>
;
CHGD_E: CMP.B	#H'FF,R0                ;
	BNE	CHGD_F			; BR. IF NOT H'FF
	MOV.W	#ZSP,R0 		; SET GRAPHIC SPACE (H'FF)
	BRA	CHGD_8
	;
CHGD_F: BSET.W	#QAKCDH,R1		; SET EXPAND ANK CODE FLAG
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#H'30,R0                ;
	BCS	CHGD_8			; BR. IF DATA < H'B0
	CMP.B	#H'60,R0                ;
	BCC	CHGD_G			; BR. IF DATA >= H'E0
	BSET.B	#QCGGRP,@PTMD2F:8	; SET GRAPHIC CHARACTER FLAG
	BSET.B	#QNOULC,@PTMD2F:8	; SET NO UNDERLINE CHARACTER FLAG (H'B0->H'DF)
	BRA	CHGD_8
	;
CHGD_G: CMP.B	#H'70,R0                ;
	BCS	CHGD_8			; BR. IF DATA < H'F0
	BSET.B	#QCGGRP,@PTMD2F:8	; SET GRAPHIC CHARACTER FLAG
	CMP.B	#H'73,R0                ;
	BLS	CHGD_8			; BR. IF DATA =< H'F3
	CMP.B	#H'75,R0                ;
	BHI	CHGD_8			; BR. IF DATA > H'F5
	BSET.B	#QNOULC,@PTMD2F:8	; SET NO UNDERLINE CHARACTER FLAG
	BRA	CHGD_8
	.PAGE
;
; << SUB >>	GET CHARACTER PITCH
;
;	IN	R0 : DATA CODE (H'000->H'1FF)
;		GETPC0 : NO EFFECT ENLARGE	< P.S.->PICA/P.C.->ELITE-CONDENSE >
;		GETPC1 :    EFFECT ENLARGE	< P.S.->PICA/P.C.->ELITE-CONDENSE >
;		GETPC3 :    EFFECT ENLARGE	< ADJUST DOT SPACE >
;		GETPC8 : NO EFFECT ENLARGE
;
;	OUT	R2 : CHARACTER PITCH
;
;	USE	R0->R5,EP
;
GETPC0:
;-0609+ BTST.B	#QKJMD,@PTMD5F:8	;
;-0609+ BNE	GETPC9:16		; BR. IF KANJI MODE
	BTST.B	#QKCSWA,@UMOD01:8	; +0609+
	BEQ	GETPC9:16		; +0609+
GETY_Q: CLR.W	R3			; SET DOT SPACE COLUMN NO ADJUST FLAG
GETPCC: BTST.B	#QPROPO,@PTMD1F:8	;
	BEQ	GTPC_2			; BR. IF NOT PROPORTIONAL MODE
	BTST.B	#QCONDE,@PTMD1F:8	;
	BNE	GTPC_C			; BR. IF P.C. = ELITE-CONDENSE PITCH
	BSR	GTPC_6			; SET P.S. = PICA PITCH
	BRA	GTPC_3
	;
GTPC_C: BSR	GTPC_A			; SET P.C. = ELITE-CONDENSE PITCH
	BRA	GTPC_3
	;
GTPC_2: BSR	GTPC_4			; GET EACH CHARACTER PITCH
GTPC_3: BRA	ADDSPC:16		; ADDER DOT SPACE COLUMN
	;
GTPC_4: BTST.B	#QPIT15,@PTMD1F:8	;
	BNE	GTPC_8			; BR. IF 15 CPI MODE
	BTST.B	#QCONDE,@PTMD1F:8	;
	BNE	GTPC_9			; BR. IF CONDENSE MODE
	BTST.B	#QELITE,@PTMD1F:8	;
	BNE	GTPC_7			; BR. IF ELITE MODE
GTPC_6: MOV.W	#ZCLPIC,R2		; SET PICA PITCH
	RTS
	;
GTPC_7: BTST.B	#QKCSWH,@UMOD01:8	; 920401 13.3 CPI
	BNE	GTPC_71 		;    "
	MOV.W	#ZCLELT,R2		; SET ELITE PITCH
	RTS
	;
GTPC_71:
	MOV.W	#ZCL13M,R2		; 920401 13.3 CPI
	RTS
;
GTPC_8: MOV.W	#ZCL15C,R2		; SET 15 CPI PITCH
	RTS
	;
GTPC_9: BTST.B	#QELITE,@PTMD1F:8	;
	BNE	GTPC_A			; BR. IF NOT ELITE MODE
	MOV.W	#ZCLPCN,R2		; SET PICA-CONDENSE PITCH
	RTS
	;
GTPC_A: MOV.W	#ZCLECN,R2		; SET ELITE-CONDENSE PITCH
	RTS
	;
GETPC1: BTST.B	#QPROPO,@PTMD1F:8	;
	BEQ	GTP1_8			; BR. IF NOT PROPORTIONAL MODE
	BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	GTP1_2			; BR. IF SUPERSCRIPT
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BEQ	GTP1_4			; BR. IF NOT SUBSCRIPT
GTP1_2: MOV.W	#ZCLPIC*2/3,R2		; SET PICA * 2/3 PITCH
	BTST.B	#QCONDE,@PTMD1F:8	;
	BEQ	GTP1_6			; BR. IF NOT CONDENSE
	MOV.W	#ZCLPIC*1/3,R2		; SET PICA * 1/3 PITCH
	BRA	GTP1_6
	;
GTP1_4: MOV.W	#ZCLPIC,R2		; SET PICA PITCH
	BTST.B	#QCONDE,@PTMD1F:8	;
	BEQ	GTP1_6			; BR. IF NOT CONDENSE
	MOV.W	#ZCLECN,R2		; SET ELITE-CONDENSE PITCH
GTP1_6: BSR	ADDSPC:16		; ADDER DOT SPACE COLUMN
	BRA	GETPC4
	;
GTP1_8: BSR	GETPC0			; GET CHARACTER PITCH
	BRA	GETPC4
	;
GETPC3: BSR	GETPC8			; GET CHARACTER PITCH
GETPC4: BTST.B	#QKCSWA,@UMOD01:8	; 930129
	BNE	GETPC40 		;  "
	BTST.B	#RHGDW,@UMOD06:8	;  "
	BNE	GTP4_2			;  "
GETPC40:				;  "
	BTST.B	#QHENLR,@PTMD0F:8	;
	BNE	GTP4_2			; BR. IF HORIZONTAL ENLARGE
	BTST.B	#QENL1L,@PTMD0F:8	;
	BEQ	GTP4_4			; BR. IF NOT HORIZONTAL ENLARGE (1 LINE)
GTP4_2: SHLL.W	R2			; CHARACTER PITCH x 2
GTP4_4: RTS
	;
GETPC8: CLR.W	R2			;
;-0609+ BTST.B	#QKJMD,@PTMD5F:8	;
;-0609+ BNE	GTP8_8			; BR. IF KANJI MODE
	BTST.B	#QKCSWA,@UMOD01:8	; +0609+
	BEQ	GTP8_8			; +0609+
GTPK_A: BTST.B	#QDWLCH,@PTMD2F:8	;
	BNE	GETPCD:16		; BR. IF DOWNLOAD CHARACTER
	BTST.B	#QPROPO,@PTMD1F:8	;
	BEQ	GETPCC			; BR. IF NOT PROPORTIONAL MODE
	MOV.W	#CWETB,R5		; GET CHARACTER TABLE BASE POINTER
	BSR	GETWTF:16		; GET CHARACTER WIDTH TABLE OFFSET (= R5)
	LDC.B	#PAGE CWETB,EP		; SET TABLE PAGE
	MOV.B	@R5,R2			; GET CHARACTER WIDTH (1/3)
	EXTU	R2			;
GTP8_2: CLR.W	R3			;
	BTST.B	#QCGGRP,@PTMD2F:8	;
	BNE	GTP8_3			; BR. IF NOT CHECK SCRIPT MODE
	BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	GTP8_4			; BR. IF NOT SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BNE	GTP8_4			; BR. IF NOT SUBSCRIPT MODE
GTP8_3: MOV.W	R2,R3			; SAVE WIDTH 1/3 VALUE
GTP8_4: SHLL.W	R2			; WIDTH 1/3 x 2
	ADD.W	R3,R2			;
	BTST.B	#QCONDE,@PTMD1F:8	;
	BEQ	GTP8_5			; BR. IF NOT PROPORTIONAL CONDENSE
	SHLR.W	R2			; WIDTH / 2
GTP8_5: MULXU.W #ZCL360,R2		; CALCULATE CHARACTER PITCH
	MOV.W	R3,R2			;
	BRA	ADDSPC:16		; ADDER DOT SPACE COLUMN
;
;	<< KANJI MODE >>
;
GTP8_8:
	BTST.B	#QKCSWA,@UMOD01:8	; 911127
	BNE	GTPK_A			; 911123
	BTST.B	#QKJVRT,@PTMD4F:8	;
	BNE	GTP8_G			; BR. IF VERTICAL FORMAT
	BTST.B	#QKJCBM,@PTMD5F:8	;
	BNE	GTP8_9			; BR. IF KANJI COMBINE MODE
	BTST.B	#QKJ14,@PTMD4F:8	;
	BNE	GTP8_B			; BR. IF KANJI 1/4 MODE
	BTST.B	#QKCSWG,@UMOD01:8	; 920331 10 CPI HG
	BNE	GTX8_C			;	"
	BTST.B	#QKJHAF,@PTMD4F:8	;
	BNE	GTP8_C			; BR. IF KANJI HALF MODE
GTP8_9: MOV.B	@KFSPLS:8,R2		; + FULL LEFT SPACE
	ADD.B	@KFSPRS:8,R2		; + FULL RIGHT SPACE
	ADDS.B	#ZKCGCL,R2		; + FULL KANJI CG SIZE
GTP8_A: MULXU.W #ZCL180,R2		; CALCULATE WIDTH x 1/180 = COLUMN (1/1440 inch)
	MOV.W	R3,R2			;
	RTS
;
;	<< 1/4 MODE >>
;
GTP8_B: MOV.W	#ZQCGCL,R3		; SET 1/4 CG SIZE
	BRA	GTP8_D
;
GTX8_C: MOV.W	#ZHCGCL,R3		; 920331 10 CPI HG
	MOV.B	#3,R2
	ADD.B	#4,R2
	ADDS.B	R3,R2
	BRA	GTP8_E
;
;	<< HALF MODE >>
;
GTP8_C: MOV.W	#ZHCGCL,R3		; SET HALF CG SIZE
GTP8_D: MOV.B	@KHSPLS:8,R2		; GET HALF LEFT SPACE
	ADD.B	@KHSPRS:8,R2		; + HALF RIGHT SPACE
	ADDS.B	R3,R2			; + CG SIZE (HALF / 1/4)
GTP8_E: BTST.B	#QKJHAJ,@PTMD4F:8	;
	BEQ	GTP8_A			; BR. IF NOT HALF SPACE ADJUST
	BNOT.B	#QKJHAC,@APL2F:8	; BIT NOT TO HALF ADJUST TIMING FLAG
	BEQ	GTP8_A			; BR. IF NOT HALF ADJUST TIMING
GTP8_F: ADD.W	#1,R2			; ADJUST 1 DOT
	BRA	GTP8_A
;
;	<< VERTICAL FORMAT >>
;
GTP8_G: BTST.B	#QKJ14,@PTMD4F:8	;
	BNE	GTP8_H			; BR. IF KANJI 1/4 MODE
	BTST.B	#QKJHAF,@PTMD4F:8	;
	BEQ	GTP8_9			; BR. IF NOT KANJI HALF MODE
	BSR	GTP8_P			; CHECK VERTICAL DISABLE
	BEQ	GTP8_9			; BR. IF VERTICAL ENABLE
	MOV.B	@KFSPLS:8,R2		; + FULL LEFT SPACE
	ADD.B	@KFSPRS:8,R2		; + FULL RIGHT SPACE
	ADDS.B	#ZHCGCL,R2		; + HALF KANJI CG SIZE
	BRA	GTP8_A
;
;
;	<< 1/4 MODE >>
;
GTP8_H: MOV.B	@KHSPLS:8,R2		; + HALF LEFT SPACE
	ADD.B	@KHSPRS:8,R2		; + HALF RIGHT SPACE
	BSR	GTP8_P			; CHECK VERTICAL DISABLE
	BEQ	GTP8_I			; BR. IF VERTICAL ENABLE
	ADDS.B	#ZQCGCL,R2		; + HALF KANJI CG SIZE
	BRA	GTP8_E
	;
GTP8_I: BTST.B	#QKJCBM,@PTMD5F:8	;
	BNE	GTP8_9			; BR. IF KANJI COMBINE MODE
	ADDS.B	#ZQCGCL,R2		; + 1/4 KANJI CG SIZE
	BRA	GTP8_E
;
;	<< CHECK VERTICAL DISABLE >>
;
;	OUT	R1 : = 0 VERTICAL ENABLE
;
GTP8_P: MOV.W	#01,R1			; SET VERTICAL DISABLE FLAG
GTP8_Q: CLR.W	R1			; SET VERTICAL ENABLE
GTP8_R: TST.B	R1			;
	RTS
;
;	<< STANDARD KANJI PITCH >>
;
GETPC9:
	BTST.B	#QKCSWA,@UMOD01:8	; 911127
	BNE	GETY_Q			; 911123
	CLR.W	R2			;
	BTST.B	#QKJVRT,@PTMD4F:8	;
	BNE	GTP9_G			; BR. IF VERTICAL FORMAT
	BTST.B	#QKJ14,@PTMD4F:8	;
	BNE	GTP9_B			; BR. IF KANJI 1/4 MODE
	BTST.B	#QKCSWG,@UMOD01:8	; 920331 10 CPI HG
	BNE	GTX9_C			;	"
	BTST.B	#QKJHAF,@PTMD4F:8	;
	BNE	GTP9_C			; BR. IF KANJI HALF MODE
GTP9_9: MOV.B	@KFSPLS:8,R2		; + FULL LEFT SPACE
	ADD.B	@KFSPRS:8,R2		; + FULL RIGHT SPACE
	ADDS.B	#ZKCGCL,R2		; + FULL KANJI CG SIZE
GTP9_A: MULXU.W #ZCL180,R2		; CALCULATE WIDTH x 1/180 = COLUMN (1/1440 inch)
	MOV.W	R3,R2			; GET CHARACTER PITCH
	RTS
;
;	<< STANDARD 1/4 PITCH >>
;
GTP9_B: MOV.W	#ZQCGCL,R3		; SET 1/4 CG SIZE
	BRA	GTP9_D
;
GTX9_C: MOV.W	#ZHCGCL,R3		; 920331 10 CPI HG
	MOV.B	#3,R2
	ADD.B	#4,R2
	ADDS.B	R3,R2
	BRA	GTP9_A
;
;	<< STANDARD HALF PITCH >>
;
GTP9_C: MOV.W	#ZHCGCL,R3		; SET HALF CG SIZE
GTP9_D: MOV.B	@KHSPLS:8,R2		; + HALF LEFT SPACE
	ADD.B	@KHSPRS:8,R2		; + HALF RIGHT SPACE
	ADDS.B	R3,R2			; + CG SIZE (HALF / 1/4)
	BRA	GTP9_A
;
;	<< VERTICAL FORMAT >>
;
GTP9_G: BTST.B	#QKJCBM,@PTMD5F:8	;
	BNE	GTP9_9			; BR. IF KANJI COMBINE MODE
	BTST.B	#QKJ14,@PTMD4F:8	;
	BNE	GTP9_H			; BR. IF KANJI 1/4 MODE
	BTST.B	#QKJHAF,@PTMD4F:8	;
	BEQ	GTP9_9			; BR. IF NOT KANJI HALF MODE
	BSR	GTP8_P			; CHECK VERTICAL DISABLE
	BEQ	GTP9_9			; BR. IF VERTICAL ENABLE
	MOV.B	@KFSPLS:8,R2		; + FULL LEFT SPACE
	ADD.B	@KFSPRS:8,R2		; + FULL RIGHT SPACE
	ADDS.B	#ZHCGCL,R2		; + HALF KANJI CG SIZE
	BRA	GTP9_A
;
;	<< STANDARD VERTICAL HALF / 1/4 PITCH >>
;
GTP9_H: MOV.B	@KHSPLS:8,R2		; + HALF LEFT SPACE
	ADD.B	@KHSPRS:8,R2		; + HALF RIGHT SPACE
	BSR	GTP8_P			; CHECK VERTICAL DISABLE
	BEQ	GTP9_I			; BR. IF VERTICAL ENABLE
	ADDS.B	#ZHCGCL,R2		; + HALF KANJI CG SIZE
	BRA	GTP9_A
	;
GTP9_I: ADDS.B	#ZQCGCL,R2		; + 1/4 KANJI CG SIZE
	BRA	GTP9_A
	.PAGE
;
; << SUB >>	GET CHARACTER PITCH < DOWNLOAD >
;
;	IN	R0 : DATA CODE (H'000->H'1FF)
;
;	OUT	R2 : CHARACTER PITCH
;
;	USE	R0->R5,EP
;
GETPCD: LDC.B	#PAGE DLDID,EP		; SET ID PAGE
	MOV.W	#DLDID,R4		; SET ID ADDRESS
	TST.B	@R4			;
	BMI	GETPC0			; BR. IF NOT DEFINE DOWNLOAD
	CLR.B	R3			; CLEAR CHARACTER PITCH VARIABLE FLAG SET AREA
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	GTPD_2			; BR. IF PROPORTIONAL MODE
	BSET.B	#7,R3			; SET FLAG (CHARACTER PITCH <> VARIABLE)
GTPD_2: BSR	GTADE:16		; GET DOWNLOAD ADDRESS
	MOV.B	@(3,R4),R2		; GET d0+d1+d2 (= WIDTH)
	EXTU	R2			;
	BTST.B	#QCONDE,@PTMD1F:8	;
	BEQ	GTPD_4			; BR. IF NOT CONDENSE MODE
	SHLR.W	R2			; WIDTH / 2
GTPD_4: MULXU.B #ZCL360,R2		; CALCULATE CHARACTER PITCH
	BEQ	ADSP_4			; BR. IF NOT DEFINE DOWNLOAD / ROM COPY
GTPD_6: TST.B	R3			;
	BPL	ADDSPC			; BR. IF CHARACTER PITCH = VARIABLE
	BRA	GETPC0			; GET FIXED PITCH
	.PAGE
;
; << SUB >>	ADDER DOT SPACE COLUMN
;
;	IN	R2 : CHARACTER PITCH
;
;	OUT	R2 : CHARACTER PITCH + DOT SPACE (NO ADJUST DOT SPACE)
;
;	USE	R0->R2
;
ADDSPC: MOV.B	@ANKSPS,R1		; GET DOT SPACE LENGTH
	BEQ	ADSP_4			; BR. IF ADDER SPACE LENGTH = 0
	MOV.B	#ZCL180,R0		; SET DOT COLUMN (LQ NO COMPRESS)
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	ADSP_2			; BR. IF PROPORTIONAL MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BNE	ADSP_2			; BR. IF LQ MODE
	MOV.B	#ZCL120,R0		; SET DOT COLUMN (DRAFT NO COMPRESS)
ADSP_2: MULXU.B R0,R1			; CALUC. DOT SPACE COLUMN
	ADD.W	R1,R2			; ADDER CHARACTER PITCH + DOT SPACE COLUMN
ADSP_4: RTS
;
; << SUB >>	GET CHARACTER WIDTH TABLE OFFSET
;
;	IN	R0 : DATA (H'000->H'1FF)
;		R5 : CHARACTER WIDTH BASE TABLE
;
;	OUT	R0 : DATA
;		R1 : NOT = 0 NOT USE CHARACTER WIDTH TABLE
;		R5 : CHARACTER WIDTH TABLE OFFSET
;
;	USE	R0->R1,R5
;
GETWTF: MOV.B	R0,R5			; OR WITH OFFSET + DATA CODE
	TST.B	R0			;
	BMI	GTWT_8			; BR. IF KATAKANA
	BTST.W	#QAKCDH,R0		;
	BEQ	GTWT_4			; BR. IF CG-SET = STANDARD
	BSET.B	#7,R5			; SET MSB
GTWT_4: CLR.B	R1			; VALID TABLE WIDTH
	RTS
	;
GTWT_6: MOV.W	#01,R1			; INVALID TABLE WIDTH
	RTS
	;
GTWT_8: MOV.B	#H'80,R5                ; SET KATAKANA (= 36)
	CLR.B	R1			; VALID TABLE WIDTH
	RTS
	.PAGE
;
; << SUB >>	GET PRINT PITCH PARAMETER		< PRINT >
;
;	IN	NONE
;
;	OUT	R2 : PRINT PITCH PARAMETER
;
;	USE	R2,R5
;
GPTPM:	MOV.B	@PTMD1F:8,R5		; GET PRINT MODE 1 FLAG
	AND.B	#XEMPHA+XCONDE+XPROPO+XELITE,R5 ; MASK EXCEPT MODE FLAG
;-0609+ BTST.B	#QKJMD,@PTMD5F:8	;
;-0609+ BNE	GPTP_2			; BR. IF KANJI MODE
	BTST.B	#QKCSWA,@UMOD01:8	; +0609+
	BEQ	GPTP_2			; +0609+
	BTST.B	#QLQMD,@PTMD2F:8	;
	BNE	GPTP_2			; BR. IF LQ MODE
	BTST.B	#QPIT15,@PTMD1F:8	;
	BEQ	GPTP_4			; BR. IF NOT 15 CPI
	BCLR.B	#QCONDE,R5		; RESET CONDENSE FLAG
GPTP_4: EXTU	R5			;
	LDC.B	#PAGE GPTTB,EP		; GET PRINT PITCH PARAMETER TABLE PAGE
	MOV.B	@(GPTTB:16,R5),R2	; GET PRINT PITCH PARAMETER
	EXTU	R2			;
	RTS
;
;	<< LQ / PROPORTIONAL / KANJI MODE >>
;
GPTP_2: MOV.B	#ZPTC36,R2		; SET 1/360 INCH PITCH
	EXTU	R2			;
	RTS
	.PAGE
;
; << SUB >>	SET CURRENT MODE FLAG < DOWNLOAD ID 0 >
;
;	IN	NONE
;
;	OUT	R5 : CURRENT MODE FLAG
;
;	USE	R5
;
STCRM:	CLR.B	R5			;
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	STCR_2			; BR. IF PROPORTIONAL MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BEQ	STCR_4			; BR. IF NOT LQ MODE
STCR_2: BSET.B	#QDLQMD,R5		; SET LQ MODE BIT
STCR_4: BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	STCR_6			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BEQ	STCR_8			; BR. IF NOT SUBSCRIPT MODE
STCR_6: BSET.B	#QDSCRT,R5		; SET SCRIPT MODE BIT
STCR_8: RTS
	.PAGE
;
; << SUB >>	GET DOWNLOAD ADDRESS < DOWNLOAD >
;
;	IN	   R0 : DATA CODE (H'000->H'1FF)
;
;	OUT	   R0 : DATA CODE (H'000->H'1FF)
;		EP R4 : CG ADDRESS
;
;	USE	R0,R4,EP
;
GTADE:	MOV.B	R0,R4			; SAVE DATA CODE
	AND.B	#ZN-H'80,R4             ; CLEAR MSB
	SUB.B	#ZSP,R4 		; SET OFFSET
	EXTU	R4			;
	MULXU.B #ZDLBLK,R4		; CALCULATE OFFSET x 1 BLOCK SIZE
	ADD.W	#DLDBF,R4		; + DOWNLOAD BUFFER BASE ADDRESS
	RTS
;
; << SUB >>	CHANGE COPY CODE < DOWNLOAD >
;
;	IN	R0 : COPY CODE
;
;	OUT	R0 : COPY CG CODE (CHANGE INTERNATIONAL CODE)
;
;	USE	R0,R4->R5,EP
;
CPCHG:	CLR.W	R4			; CLEAR OFFSET
	LDC.B	#PAGE USATB,EP		; SET TABLE PAGE
CPCH_2: CMP.B	@(USATB,R4),R0		; CHECK INTERNATIONAL CHARACTER CODE
	BEQ	CPCH_4			; BR. IF INTERNATIONAL CHARACTER CODE
	BCS	CPCH_6			; BR. IF NOT INTERNATIONAL CHARACTER CODE
	ADD.W	#1,R4			; UPDATE OFFSET
	CMP.B	#ZINTCD,R4		;
	BCS	CPCH_2			; BR. IF NOT CHECK END
	BRA	CPCH_6
	;
CPCH_4: MOV.B	@APL1F:8,R5		; GET APPLICATION FLAG 1 (= INTERNATIONAL CHARACTER FLAG)
	AND.B	#XINTCG,R5		; MASK EXCEPT INTERNATIONAL CHARACTER FLAG
	XCH	R5,R4			; CHANGE FLAG TO OFFSET
	EXTU	R4			;
	SHLL.W	R4			; OFFSET x 2
	LDC.B	#PAGE INCTB,EP		; SET TABLE PAGE
	MOV.W	@(INCTB,R4),R4		; GET INTERNATIONAL CHARACTER TABLE ADDRESS
	ADD.W	R5,R4			; + CODE OFFSET
	MOV.B	@R4,R0			; GET INTERNATIONAL CHARACTER CHANGE CODE
CPCH_6: EXTU	R0			;
	TST.B	R0			;
	BPL	CPCH_8			; BR. IF STANDARD CG
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	BSET.W	#QAKCDH,R0		; SET EXPAND ANK CODE FLAG (GRAPHIC CG)
CPCH_8: RTS
	.PAGE
;
; << SUB >>	INITIALIZE BUFFER POINTER
;
;	SET NEXT LINE START = LEFT MARGIN
;
;	USE	R1,R5
;
INBFP:	BCLR.B	#QKJCBM,@PTMD5F:8	; <-> RESET KANJI COMBINE MODE <->
INBFP2: CLR.W	@CHRWDS:8		; CLEAR DATA WIDTH SAVE AREA
	MOV.W	@LMARGS:8,R1		; GET LEFT MARGIN
	MOV.W	R1,@CLMCTC:8		; SET CURRENT COLUMN
	MOV.W	R1,@STCLMC:8		; SET START COLUMN
	BSET.B	#QKJHAC,@APL2F:8	; SET KANJI HALF ADJUST TIMING FLAG (1ST)
	MOV.W	#IMGBF,@IMGBFP:8	; INITIALIZE IMAGE BUFFER POINTER
	BRA	INBF_4
;
;	SET NEXT LINE START = CURRENT COLUMN
;
INBFC:	MOV.W	@CLMCTC:8,R1		; GET CURRENT COLUMN
	MOV.W	R1,@STCLMC:8		; SET START COLUMN
INBF_4: BCLR.B	#QDELVL,@APL2F:8	; RESET DELETE VALID FLAG
	BCLR.B	#QSPDB,@APL2F:8 	; RESET SPEED B MODE FLAG
	MOV.W	@STCLMC:8,R1		; GET START COUMMN
	MOV.W	R1,@CLMMXS:8		; SAVE COLUMN MAX
	MOV.W	#TXTBF,@TXTBFP:8	; INITIALIZE TEXT BUFFER POINTER
	BTST.B	#QPRTCR,@APL2F:8	;
	BEQ	INBF_6			; BR. IF NOT PRINT ON-LINE (CR/LF/VT/FF)
	BCLR.B	#QIMGDT,@APL0F:8	; RESET IMAGE DATA FLAG
INBF_6: BCLR.B	#QFJSC3,@APL1F:8	; RESET JUSTIFICATION FLAG 3
	BCLR.B	#QPRTON,@APL0F:8	; RESET PRINT ON-LINE FLAG
	BCLR.B	#QPRTCR,@APL2F:8	; RESET PRINT ON-LINE (CR/LF/VT/FF) FLAG
	BCLR.B	#QPRFST,@PRMDF:8	; RESET PRINT FIRST FLAG
	BCLR.B	#QBBFFL,@APL0F:8	; RESET BAR-CODE BUFFER FULL FLAG
	CLR.B	@PRMODF:8		; CLEAR PRINT MODE FLAG
;
	BCLR.B	#ZUPPRO,@PTMD5F:8	; 921111
	BCLR.B	#ZLOPRO,@PTMD5F:8	; 921111
;
	CLR.B	@PRPTCF:8		; CLEAR PRINT PITCH FLAG
	CLR.B	@COLORF:8		; CLEAR PRINT COLOR FLAG
	JSR	@SJSTP1 		; SET MARGIN VALUE FOR FULL JUSTIFICATION
	RTS
;
; << SUB >>	CALCULATE 32 bit / 16 bit
;
;	R0 (16..H) , R1 (16..L) / FP (16)
;			= R0 (16..H) , R1 (16..L) ... R2 (16)
;
;	USE	R0->R3,FP
;
DIV32:	MOV.W	R1,R3			; SAVE LOW VALUE
	MOV.W	R0,R1			; SAVE HIGH VALUE
	CLR.W	R0			; CLEAR HIGH VALUE
	DIVXU.W FP,R0			; DIVIDE R0,R1 / FP = R1 ... R0
	MOV.W	R0,R2			; SAVE REMAIN
	MOV.W	R1,R0			; SAVE QUOTIENT (H)
	DIVXU.W FP,R2			; DIVIDE R2,R3 / FP = R3 ... R2
	MOV.W	R3,R1			; SAVE QUOTIENT (L)
	RTS
	.PAGE
;
; << SUB >>	SELECT KANJI CG
;
;	IN	   R1 : CHANGE KANJI CODE
;
;	OUT	EP R4 : KANJI CG POINTER
;
;	USE	R0->R1,R4,EP
;
OPT_SL: LDC.B	#PAGE OPTCG,EP		; 911206
	BRA	SKCG			; 911206
;
SELKCG: LDC.B	#0,DP			; RESET < DP >
	BTST.B	#QKCSWC,@UMOD01:8	; 911206
	BNE	OPT_SL			; 911206
	LDC.B	#PAGE STDCG,EP		;
SKCG:	BCLR.B	#QKCSWC,@UMOD01:8	; 911206+
	MOV.W	#EXPNDB,R0		; SET KANJI CG HIGH ADDRESS PORT
	BCLR.B	#QEXA16,@R0		; SET K16=0
	BCLR.B	#QEXA17,@R0		; SET K17=0
	BCLR.B	#QEXA18,@R0		; SET K18=0
	MOV.W	R1,R4			;
	SWAP	R1			;
	SHLL.B	R4			;
	ROTR.W	R4			;
	ROTR.W	R4			;
	SWAP	R4			; MAKE A15->A7
	BTST.B	#2,R1			;
	BEQ	SKCG_1			; BR. IF a2=0
	BSET.B	#QEXA16,@R0		; SET K16=1
SKCG_1: CMP.B	#H'50,R1                ;
	BCC	SKCG_5			; BR. IF LEVEL 2 KANJI CODE
	BCLR.B	#QEXA19,@R0		; SET K19=0
	CMP.B	#H'30,R1                ;
	BCC	SKCG_6			; BR. IF 3xxx, 4xxx
SKCG_2: SWAP	R1			;
	BTST.B	#5,R1			;
	BEQ	SKCG_3			; BR. IF b5=0
	BSET.B	#QEXA17,@R0		; SET K17=1
SKCG_3: BTST.B	#6,R1			;
	BEQ	SKCG_4			; BR. IF b6=0
	BSET.B	#QEXA18,@R0		; SET K18=1
SKCG_4: AND.W	#H'CF80,R4              ;
	RTS
	;
SKCG_5: BSET.B	#QEXA19,@R0		; SET K19=1
	CMP.B	#H'70,R1                ;
	BCC	SKCG_2			; BR. IF 7xxx
	SUB.B	#8,R4			;
SKCG_6: SWAP	R1			;
	BTST.B	#1,R4			;
	BEQ	SKCG_7			; BR. IF a3=0
	BSET.B	#QEXA17,@R0		; SET K17=1
SKCG_7: BTST.B	#4,R4			;
	BEQ	SKCG_8			; BR. IF a6=0
	BSET.B	#QEXA18,@R0		; SET K18=1
SKCG_8: AND.W	#H'FF80,R4              ;
	RTS
	.PAGE
;
;	<< PRINT PITCH PARAMETER TABLE >>
;
GPTTB:	.DATA.B   ZPTC12		; PICA < DRAFT >
	.DATA.B   ZPTC12		; ELITE < DRAFT >
	.DATA.B   ZPTC36		; PROPORTIONAL < LQ >
	.DATA.B   ZPTC36		; PROPORTIONAL < & ELITE >
	.DATA.B   ZPTC24		; PICA-CONDENSE < DRAFT >
	.DATA.B   ZPTC24		; ELITE-CONDENSE < DRAFT >
	.DATA.B   ZPTC36		; PROPORTIONAL & CONDENSE < LQ >
	.DATA.B   ZPTC36		; PROPORTIONAL & CONDENSE < & ELITE > < LQ >
	.DATA.B   ZPTC24		; PICA & EMPHASIZE < DRAFT >
	.DATA.B   ZPTC24		; ELITE & EMPHASIZE < DRAFT >
	.DATA.B   ZPTC36		; PROPORTIONAL & EMPHASIZE < LQ >
	.DATA.B   ZPTC36		; PROPORTIONAL & EMPHASIZE < & ELITE >
	.DATA.B   ZPTC24		; PICA-CONDENSE & EMPHASIZE < DRAFT >
	.DATA.B   ZPTC24		; ELITE-CONDENSE & EMPHASIZE < DRAFT >
	.DATA.B   ZPTC36		; PROPORTIONAL & CONDENSE & EMPHASIZE < LQ >
	.DATA.B   ZPTC36		; PROPORTIONAL & CONDENSE < & ELITE > & EMPHASIZE < LQ >
	.END

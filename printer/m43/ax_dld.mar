	.PROGRAM	apldld
	.HEADING	"M4324 AX GAIJI & DOWNLOAD PROCESS MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX GAIJI & DOWNLOAD SEQUENSE MODULE	*
;							*
;	FILE NAME	AX_DLD.MAR			*
;	CREATED 	03/JUN/1991			*
;							*
;********************************************************
;
	.EXPORT 	LDDWL, LDGIJ, DFGAJ, DFDLF
	.EXPORT 	CPRAM, SLDLS, SETGJD,GETDLB
	.EXPORT 	CLGBF, CLDBF, CPSCRT
;
	.IMPORT 	GETC,  GETI24,GETI8, DP1IMG,DP1INT
	.IMPORT 	INBFC, CKDT01,STPRNT
	.IMPORT 	GETWTF,CPCHG, CWETB
;
	.IMPORT 	MKVRT, MKVRT4,EDTCPY,EDTCP1,EDTCPH
;
	.IMPORT 	SETDS1,SETDS2,SETDSA
	.IMPORT 	CVDR10,CVLQ10,CVDR15,CVLQ15
;
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_RAM.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
	.INCLUDE	"SYSLIB.H"
;
;	<< DOWNLOAD ROM COPY CG COLUMN CONSTANT >>
;
ZDLQ10: .EQU	 36			; LQ	10 COLUMN
ZDLQ12: .EQU	 30			; LQ	12 COLUMN
ZDLQ15: .EQU	 24			; LQ	15 COLUMN
ZDDR10: .EQU	 12			; DRAFT 10 COLUMN
ZDDR12: .EQU	 10			; DRAFT 12 COLUMN
ZDDR15: .EQU	 08			; DRAFT 15 COLUMN
;
;	<< KANJI CG COLUMN CONSTANT >>
;
ZKFULL: .EQU	 24			; KANJI FULL
ZKHALF: .EQU	 12			; KANJI HALF
ZKJ14:	.EQU	 12			; KANJI 1/4
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;	ESC + % + n
;
;	SELECT DOWN LOAD SET
;
SLDLS:	JSR	@CKDT01 		; GET & CHECK DATA = 0 or 1
	BNE	SLDL_2			; BR. IF ERROR DATA
	BCLR.B	#QDLSEL,@PTMD0F:8	; RESET DOWNLOAD FLAG
	TST.B	R0			;
	BEQ	SLDL_2			; BR. IF RESET DOWNLOAD MODE
	BSET.B	#QDLSEL,@PTMD0F:8	; SET DOWNLOAD MODE
	LDC.B	#PAGE DLDID,EP		; SET ID PAGE
	MOV.W	#DLDID,R4		; SET ID ADDRESS
	BCLR.B	#QDSLON,@(YDLID1,R4)	; RESET DLSEL FLAG VALID FLAG
	TST.B	@R4			; CHECK ID 0
	BMI	SLDL_2			; BR. IF NOT DEFINE DOWNLOAD
	BTST.B	#QENTDL,@(YDLID1,R4)	;
	BEQ	SLDL_2			; BR. IF NOT DEFINE DOWNLOAD
	BSET.B	#QDSLON,@(YDLID1,R4)	; SET DLSEL FLAG VALID FLAG
SLDL_2: RTS
	.PAGE
;
;	ESC + & + s + n + m + (d0+d1+d2+data+...+data)m
;
;	DEFINE DOWN-LOAD
;
DFDLF:	JSR	@GETC			; GET DATA (s)
	JSR	@GETC			; GET DATA (n) (STARTING CHARACTER)
	MOV.B	R0,@DATLNS:8		; SAVE IT
	JSR	@GETC			; GET DATA (m) (ENDING CHARACTER)
	TST.B	R0			;
	BMI	SLDL_2			; BR. IF END >= H'80 (ERROR)
	MOV.B	R0,@DATLNS+1:8		; SAVE IT
	CMP.B	@DATLNS:8,R0		;
	BCC	DFDL_2			; BR. IF END >= START
	RTS
	;
DFDL_2: JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	CLR.B	R2			; CLEAR ID 0 CURRENT MODE
	CLR.B	R3			; CLEAR ID 1 CURRENT MODE
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	DFDL_3			; BR. IF PROPORTIONAL MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BEQ	DFDL_4			; BR. IF NOT LQ MODE
DFDL_3: BSET.B	#QDLQMD,R2		; SET LQ MODE
DFDL_4: BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	DFDL_5			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BEQ	DFDL_6			; BR. IF NOT SUBSCRIPT MODE
DFDL_5: BSET.B	#QDSCRT,R2		; SET SUPERE/SUBSCRIPT MODE
DFDL_6: CMP.B	#ZSP,@DATLNS+1:8	;
	BEQ	DFDL_8			; BR. IF END = H'20
	CMP.B	#"_",@DATLNS:8          ;
	BHI	DFDL_9			; BR. IF START > H'5F
	CMP.B	#"_",@DATLNS+1:8        ;
	BCC	DFDL_7			; BR. IF END >= H'5F
	CMP.B	#ZSP,@DATLNS:8		;
	BEQ	DFDL_8			; BR. IF START = H'20
	BRA	DFDL_9
	;
DFDL_7: BSET.B	#QENT5F,R3		; SET H'5F CODE DEFINE FLAG
	CMP.B	#ZSP,@DATLNS:8		;
	BNE	DFDL_9			; BR. IF NOT START = H'20
DFDL_8: BSET.B	#QENT20,R3		; SET H'20 CODE DEFINE FLAG
DFDL_9: CMP.B	#ZDEL,@DATLNS+1:8	;
	BNE	DFDL_A			; BR. IF NOT END = H'7F
	BSET.B	#QENT7F,R3		; SET H'7F CODE DEFINE FALG
DFDL_A: BSET.B	#QENTDL,R3		; SET DEFINE DOWNLOAD FLAG
	LDC.B	#PAGE DLDID,EP		; SET ID PAGE
	MOV.W	#DLDID,R4		; SET ID ADDRESS
	TST.B	@R4			;
	BMI	DFDL_B			; BR. IF NOT DEFINE DOWNLOAD
	CMP.B	@R4,R2			;
	BNE	DFDL_B			; BR. IF NOT MODE ID MATCH
	OR.B	@(YDLID1,R4),R3 	; SET DOWNLOAD DEFINE FLAG
	MOV.B	R3,@(YDLID1,R4) 	; SAVE IT
	BRA	DFDL_C
	;
DFDL_B: MOV.B	R2,@R4			; SET MODE ID
	MOV.B	R3,@(YDLID1,R4) 	; SET DEFINE FLAG
	BSR	CLDBF:16		; CLEAR DOWNLOAD AREA
DFDL_C: BSR	RCVDL1			; RECEIVE DOWNLOAD DATA
	ADD.B	#1,@DATLNS:8		; UPDATE CURRNT CHARACTER
	MOV.B	@DATLNS+1:8,R1		; GET ENDING CHARACTER
	CMP.B	@DATLNS:8,R1		;
	BCC	DFDL_C			; BR. IF NOT END (END > CURRENT)
	JSR	@DP1INT 		; INPUT DATA INTERRUPT
	RTS
;
;	< DOWNLOAD DATA DUMMY READ >
;
DFDL_E: JSR	@GETC			; GET DATA (d0)
	JSR	@GETC			; GET DATA (d1)
	MOV.B	R0,R3			; SAVE IT (= DOWNLOAD DATA LENGTH)
	JSR	@GETC			; GET DATA (d2)
	EXTU	R3			;
	BSR	RVDLD:16		; DUMMY READ FOR DOWNLOAD DATA
	RTS
	.PAGE
;
;	<< RECEIVE DOWNLOAD 1 CHARACTER >>
;
;	USE	R5 : d1 MAX VALUE
;		FP : d0+d1+d2 MAX VALUE
;
RCVDL1: CMP.B	#H'20,@DATLNS:8         ;
	BCS	DFDL_E			; BR. IF START < H'20
	MOV.B	@DATLNS:8,R4		; GET DOWNLOAD CODE
	SUB.B	#H'20,R4                ; ADJUST CODE (= OFFSET)
	MULXU.B #ZDLBLK,R4		; CALCULATE DOWNLOAD BUFFER OFFSET
	ADD.W	#DLDBF,R4		; + DOWNLOAD BUFFER BASE ADDRESS
	LDC.B	#PAGE DLDBF,EP		; SET DOWNLOAD PAGE
	JSR	@GETC			; GET DATA (d0)
	MOV.B	R0,@EDWKS1:8		; SAVE IT
	MOV.B	R0,@EDWKS4:8		; SAVE IT (WORK)
	JSR	@GETC			; GET DATA (d1)
	MOV.B	R0,@EDWKS2:8		; SAVE IT
	MOV.B	R0,@EDWKS5:8		; SAVE IT (WORK)
	JSR	@GETC			; GET DATA (d2)
	MOV.B	R0,@EDWKS3:8		; SAVE IT
	MOV.B	R0,@EDWKS6:8		; SAVE IT (WORK)
	MOV.W	#37,R5			; SET d1 MAX. (1) VALUE FOR PROPORTIONAL
	MOV.W	#42,FP			; SET d0+d1+d2 MAX. (2) VALUE FOR PROPORTIONAL
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	RVDL_3			; BR. IF PROPORTIONAL MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BNE	RVDL_3			; BR. IF LQ MODE
	MOV.W	#15,R5			; SET d1 MAX. (1) VALUE FOR DRAFT
	MOV.W	#18,FP			; SET d0+d1+d2 MAX. (2) VALUE FOR DRAFT
RVDL_3: CMP.B	@EDWKS2:8,R5		;
	BCC	RVDL_4			; BR. IF d1 MAX. >= d1
	MOV.B	R5,@EDWKS5:8		; SAVE New d1
RVDL_4: MOV.B	@EDWKS5:8,R3		; GET d1
	ADD.B	@EDWKS4:8,R3		; CALCULATE d0+d1
	BCS	RVDL_7			; BR. IF OVERFLOW
	CMP.B	FP,R3			;
	BLS	RVDL_5			; BR. IF d0+d1+d2 MAX. >= d0+d1
RVDL_7: MOV.B	FP,R3			; SAVE IT
	SUB.B	@EDWKS5:8,R3		; CALCULATE d0+d1+d2 MAX. - d1
	MOV.B	R3,@EDWKS4:8		; SAVE New d0
RVDL_5: MOV.B	@EDWKS4:8,R3		; GET New d0
	ADD.B	@EDWKS5:8,R3		; CALCULATE d0+d1
	ADD.B	@EDWKS6:8,R3		; CALCULATE d0+d1+d2
	BCS	RVDL_9			; BR IF OVERFLOW
	CMP.B	FP,R3			;
	BLS	RVDL_6			; BR. IF d0+d1+d2 MAX. >= d0+d1+d2
RVDL_9: SUB.B	@EDWKS4:8,FP		; CALCULATE d0+d1+d2 MAX. - New d0
	SUB.B	@EDWKS5:8,FP		; CALCULATE d1+d2 MAX. - New d1
	MOV.B	FP,@EDWKS6:8		; SAVE New d2
RVDL_6: MOV.B	@EDWKS2:8,R3		; GET ORIGINAL d1
	SUB.B	@EDWKS5:8,R3		; CALCULATE IGNORE LENGTH
	MOV.B	@EDWKS4:8,R2		; GET New d0
	MOV.B	R2,@R4+ 		; SAVE d0 TO DOWNLOAD BUFFER
	MOV.B	@EDWKS5:8,R1		; GET New d1
	MOV.B	R1,@R4+ 		; SAVE d1 TO DOWNLOAD BUFFER
	MOV.B	@EDWKS6:8,R0		; GET New d2
	MOV.B	R0,@R4+ 		; SAVE d2 TO DOWNLOAD BUFFER
	EXTU	R0			; EXPAND ZERO TO d2
	EXTU	R1			; EXPAND ZERO TO d1
	EXTU	R2			; EXPAND ZERO TO d0
	EXTU	R3			; EXPAND ZERO TO IGNORE LENGTH
	ADD.W	R1,R0			; CALCULATE d0+d1
	ADD.W	R0,R2			; CALCULATE d0+d1+d2
	TST.B	R1			;
	BNE	RVDL_8			; BR. IF NOT DATA LENGTH = 0
	MOV.B	R1,R2			;
RVDL_8: MOV.B	R2,@R4+ 		; SAVE d0+d1+d2 TO DOWNLOAD BUFFER
	MOV.W	R1,R5			; SAVE d1
	ADD.W	#-1,R5			; UPDATE COUNTER
	BMI	RVDLD1			; BR. IF DATA LENGTH = 0
	JSR	@DP1IMG 		; GET DATA IS POOLING & SET BIT REVERSE TABLE
	BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	RVDL_C			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BNE	RVDL_C			; BR. IF SUBSCRIPT MODE
RVDL_A: JSR	@GETI24 		; GET DATA (= 3 byte)
	MOV.B	R0,@R4+ 		; SAVE DOWNLOAD DATA (1->8 PIN)
	SWAP	R0			;
	MOV.B	R0,@R4+ 		; SAVE DOWNLOAD DATA (9->16 PIN)
	MOV.B	R1,@R4+ 		; SAVE DOWNLOAD DATA (17->24 PIN)
	SCB/F	R5,RVDL_A		; BR. IF NOT END
	BRA	RVDLD1
;
;	<< SCRIPT MODE >>
;
RVDL_C: JSR	@GETI8			; GET DATA 1ST
	CLR.B	@R4+			; SET DATA (1->8 PIN)
	MOV.B	R0,@R4+ 		; SAVE DATA (9->16 PIN)
	JSR	@GETI8			; GET DATA 2ND
	MOV.B	R0,@R4+ 		; SAVE DATA (17->24 PIN)
	SCB/F	R5,RVDL_C		; BR. IF NOT END
RVDLD1: MOV.B	@EDWKS6:8,R0		; GET New d2
	EXTU	R0			;
	BTST.B	#0,@EDWKS5:8		;
	BEQ	RVD1_4			; BR. IF PATTERN LENGTH = EVEN
	ADD.W	#1,R0			; ADJUST 1 COLUMN
RVD1_4: ADD.W	#-1,R0			;
	BMI	RVDLD			; BR. IF BACK SPACE = 0
RVD1_2: CLR.B	@R4+			; CLEAR BACK SPACE
	CLR.B	@R4+			;
	CLR.B	@R4+			;
	SCB/F	R0,RVD1_2		; BR. IF NOT BACK SPACE END
;
;	<< READ IGNORE DATA >>
;
RVDLD:	ADD.W	#-1,R3			; UPDATE IGNORE LENGTH
	BMI	RVDD_6			; BR. IF END
	JSR	@DP1IMG 		; DOWNLOAD DATA POLLING
	BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	RVDD_4			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BNE	RVDD_4			; BR. IF SUBSCRIPT MODE
RVDD_2: JSR	@GETI24 		; GET DATA (= 3 byte)
	SCB/F	R3,RVDD_2		; BR. IF NOT END
	RTS
;
;	<< SCRIPT MODE >>
;
RVDD_4: JSR	@GETI8			; GET DATA
	JSR	@GETI8			; GET DATA
	SCB/F	R3,RVDD_4		; BR. IF NOT END
RVDD_6: RTS
	.PAGE
;
;	ESC + : + n1 + n2 + n3
;
;	COPY ROM INTO RAM
;
CPRAM:	JSR	@GETC			; GET DATA (n1)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	BNE	RVDD_6			; BR. IF n1 <> 0
	JSR	@GETC			; GET DATA (n2)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	MOV.B	R0,@DATLNS:8		; SAVE IT
	JSR	@GETC			; GET DATA (n3)
	TST.B	@DATLNS:8		;
	BEQ	CPRA_2			; BR. IF n2 = 0
	CMP.B	#H'30,@DATLNS:8         ;
	BNE	RVDD_6			; BR. IF n2 <> H'30
CPRA_2: BTST.B	#QSUPSC,@PTMD0F:8	;
	BNE	RVDD_6			; BR. IF SUPERSCRIPT MODE
	BTST.B	#QSUBSC,@PTMD0F:8	;
	BNE	RVDD_6			; BR. IF SUBSCRIPT MODE
	BTST.B	#QELITE,@PTMD1F:8	;
	BNE	RVDD_6			; BR. IF ELITE MODE (12cpi/20cpi)
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	BRA	CPCGE:16		; COPY ROM CG TO DOWNLOAD AREA
	.PAGE
;
;	FS + 2 + a1 + a2 + d1 + ..... + d72
;
;	DEFINE GAIJI
;
DFGAJ:	JSR	@GETC			; GET DATA (a1)
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS1:8		; SAVE (a1) (1ST CODE)
	JSR	@GETC			; GET DATA (a2)
	AND.B	#ZN-H'80,R0
	CMP.B	#ZGJCD,@KJCDS1:8	;
	BNE	DFGJ_2			; BR. IF ERROR CODE (NOT GAIJI CODE)
	CMP.B	#ZSP,R0 		;
	BLS	DFGJ_2			; BR. IF ERROR CODE (CODE =< H'20)
	CMP.B	#ZDEL,R0		;
	BCS	DFGJ_4			; BR. IF VALID CODE
DFGJ_2: RTS
	;
DFGJ_4: MOV.B	R0,@KJCDS2:8		; SAVE 2ND CODE
	JSR	@DP1IMG 		; GET GAIJI DATA TO POLLING
	BSR	CPRCBF			; SAVE DATA TO RECEIVE BUFFER (= DLRBF)
	BTST.B	#QPRFST,@PRMDF:8	;
	BEQ	DFGJ_E			; BR. IF NO DATA
	LDC.B	#PAGE TXTBF,EP		; SET TEXT BUFFER PAGE
	MOV.W	#TXTBF,R4		; SET TEXT BUFFER POINTER
	MOV.W	@KJCDS1:8,R5		; GET GAIJI CODE
DFGJ_6: CMP.B	#ZKNJFM,@R4		;
	BEQ	DFGJ_8			; BR. IF KANJI FORMAT
	CMP.B	#ZCMBFM,@R4		;
	BNE	DFGJ_A			; BR. IF NOT KANJI COMBINE FORMAT
	CMP.W	@(YCODEF,R4),R5 	;
	BEQ	DFGJ_C			; BR. IF SAME CODE (COMBINE 1ST)
	ADDS.B	#ZFMTSZ,R4		; + FORMAT SIZE (COMBINE 2ND FORMAT)
DFGJ_8: CMP.W	@(YCODEF,R4),R5 	;
	BEQ	DFGJ_C			; BR. IF SAME CODE (KANJI / COMBINE 2ND)
DFGJ_A: ADDS.B	#ZFMTSZ,R4		; + FORMAT SIZE (COMBINE 2ND FORMAT)
	CMP.W	@TXTBFP:8,R4		;
	BCS	DFGJ_6			; BR. IF NOT END
	BRA	DFGJ_E
	;
DFGJ_C: MOV.W	R5,@-SP 		;+ SAVE GAIJI CODE
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R5 		;+ UNSAVE GAIJI CODE
DFGJ_E: MOV.B	@KJCDS2:8,R2		; GET GAIJI CODE 2ND
SETGJD: SUB.B	#H'21,R2                ; - BASE VALUE (-> OFFSET)
	MULXU.B #ZGJBLK,R2		; CALCULATE TARGET AREA (BASE CODE x 1 BLOCK)
	ADD.W	#GIJBF,R2		; + GAIJI BUFFER START POINTER
	LDC.B	#PAGE DLRBF,EP		; SET RECEIVE BUFFER PAGE
	MOV.W	#DLRBF,R5		; GET RECEIVE BUFFER POINTER
	MOV.W	#(ZKCGCL/2)-1,R3	; SET LOOP COUNTER (COPY WORD)
DFGJ_F: MOV.W	@R5+,R0 		; GET PATTERN FROM RECEIVE BUFFER
	MOV.W	R0,@R2+ 		; SAVE PATTERN TO GAIJI BUFFER
	MOV.W	@R5+,R0 		;
	MOV.W	R0,@R2+ 		;
	MOV.W	@R5+,R0 		;
	MOV.W	R0,@R2+ 		;
	SCB/F	R3,DFGJ_F		; BR. IF NOT END
	RTS
;
; << SUB >>	GET DATA INTO RECEIVE BUFFER
;
CPRCBF: LDC.B	#PAGE DLRBF,EP		; SET RECEIVE BUFFER PAGE
	MOV.W	#DLRBF,R4		; SET RECEIVE BUFFER START POINTER
	MOV.W	#ZKCGCL-1,FP		;
CPRC_2: JSR	@GETI24 		; GET DATA (= 3 byte)
	MOV.B	R0,@R4+ 		; SAVE 1ST DATA (1->8 PIN)
	SWAP	R0			;
	MOV.B	R0,@R4+ 		; SAVE 2ND DATA (9->16 PIN)
	MOV.B	R1,@R4+ 		; SAVE 3RD DATA (17->24 PIN)
	SCB/F	FP,CPRC_2		; BR. IF NOT END
	JSR	@DP1INT 		; GET INPUT DATA IS INTERRUPT
	RTS
	.PAGE
;
; << SUB >>	CLEAR ALL GAIJI BUFFER
;
CLGBF:	LDC.B	#PAGE GIJBF,EP		; SET GAIJI BUFFER PAGE
	MOV.W	#GIJBF,R4		; SET GAIJI BUFFER START ADDRESS
	MOV.W	#(HTBF-GIJBF),R5	; SET CLEAR SIZE (= BYTE)
	BRA	CLDB_2
;
; << SUB >>	CLEAR ALL DOWNLOAD BUFFER
;
CLDBF:	LDC.B	#PAGE DLDBF,EP		; SET DOWNLOAD BUFFER PAGE
	MOV.W	#DLDBF,R4		; SET DOWNLOAD BUFFER START ADDRESS
	MOV.W	#(DLRBF-DLDBF),R5	; SET CLEAR SIZE (= BYTE)
CLDB_2:
	CALSYS	#CLRBFW 		; CALL CLEAR BUFFER IS WORD TO SYSTEM
	RTS
	.PAGE
;
; << SUB >>	COPY ROM TO DOWNLOAD AREA < DOWNLOAD >
;
;	IN	R3 : COPY FONT FLAG (DUMMY)
;
CPCGE:	MOV.W	R3,@-SP 		;+ SAVE FONT FLAG
	BSR	CLDBF			; CLEAR DOWNLOAD BUFFER
	MOV.W	@SP+,R3 		;+ UNSAVE FONT FLAG
	MOV.W	#ZSP,R0 		; SET COPY START CODE (= H'20)
	LDC.B	#PAGE DLDID,EP		; SET ID PAGE
	MOV.W	#DLDID,R4		; SET ID POINTER
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	CPCLQ			; BR. IF PROPORTIONAL MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BEQ	CPCDR:16		; BR. IF DRAFT MODE
;
;	<< LQ MODE >>
;
CPCLQ:	MOV.B	#XDLQMD,@R4+		; SET ID 0 (= LQ MODE)
	MOV.B	#XROMCP,@R4		; SET ID 1 (= ROM COPY)
	BTST.B	#QPIT15,@PTMD1F:8	;
	BNE	CPCL5			; BR. IF 15 CPI
CPCL_2: MOV.W	R0,@-SP 		;+ SAVE COPY CODE
	JSR	@CPCHG			; CHANGE COPY CODE (= R0)
	MOV.W	#ZDLQ12,R2		; SET LQ PICA LENGTH
	MOV.B	#6,R1			; SET BACK SPACE LENGTH
	BTST.B	#QPROPO,@PTMD1F:8	;
	BEQ	CPCL_4			; BR. IF NOT PROPORTIONAL
	CLR.W	R1			; RESET CG-SET FLAG
	MOV.W	#CWETB,R5		; GET CHARACTER TABLE BASE POINTER
	JSR	@GETWTF 		; GET CHARACTER WIDTH TABLE OFFSET (= R5)
	LDC.B	#PAGE CWETB,EP		; SET TABLE PAGE
	MOV.B	@R5,R2			; GET CHARACTER WIDTH (1/3)
	EXTU	R2			;
	MULXU.B #3,R2			; CALCULATE (1/3) WIDTH x 3
	CLR.W	R1			;
CPCL_4: CLR.B	@EDWKS4:8		; SET PRE. SPACE LENGTH
	MOV.B	R2,@EDWKS5:8		; SET PATTERN LENGTH
	MOV.B	R1,@EDWKS6:8		; SET BACK SPACE LENGTH
	MOV.W	R0,R1			; SAVE CODE
	JSR	@CVLQ10 		; GET CONVERSION CODE (LQ 10 CPI)
	MOV.W	#ZDLQ12,R2		; SET LQ LENGTH
	BSR	CPTED:16		; COPY CG TO EDIT AREA
	MOV.W	@SP+,R0 		;+ UNSAVE COPY CODE
	BSR	CPFED:16		; COPY EDIT AREA TO DOWNLOAD AREA
	ADD.W	#1,R0			; SET NEXT CODE
	CMP.B	#H'7F,R0                ;
	BNE	CPCL_2			; BR. IF NOT COPY END
;
;	<< DOWNLOAD CODE = H'7F >>
;
CPCL_6: MOV.W	#ZDLQ12,R2		; SET COPY COLUMN
CPCL_7: CLR.W	R2			; CLEAR COLUMN (H'7F -> CONTROL CODE)
	BSR	CPFES:16		; GET COPY DOWNLOAD ADDRESS
	CLR.B	@R4+			; CLEAR PRE. SPACE
	MOV.B	R2,@R4+ 		; SET COLUMN (WIDTH)
	MOV.B	#6,@R4+ 		; SET BACK SPACE
	ADDS.B	#6,R2			;
	MOV.B	R2,@R4+ 		; SET PRE. SP + WIDTH + BACK SP
	MOV.W	#ZDLQ10/4,R2		; COLUMN / 2 (CLEAR WORD)
	ADD.W	#-1,R2			;
CPCL_8: CLR.W	@R4+			; CLEAR AREA
	CLR.W	@R4+			;
	CLR.W	@R4+			;
	CLR.W	@R4+			;
	CLR.W	@R4+			;
	CLR.W	@R4+			;
	SCB/F	R2,CPCL_8		; BR. IF NOT END
	RTS
	.PAGE
;
;	<< LQ 15 CPI >>
;
CPCL5:	MOV.W	R0,@-SP 		;+ SAVE COPY CODE
	JSR	@CPCHG			; CHANGE COPY CODE (= R0)
	MOV.W	R0,R1			; SAVE CODE
	JSR	@CVLQ15 		; GET CONVERSION CODE (LQ 15 CPI)
	MOV.W	#ZDLQ15,R2		; SET COPY COLUMN
	CLR.B	@EDWKS4:8		; SET PRE. SPACE LENGTH
	MOV.B	R2,@EDWKS5:8		; SET PATTERN LENGTH
	CLR.B	@EDWKS6:8		; SET BACK SPACE LENGTH
	BSR	CPTE2:16		; COPY CG TO EDIT AREA
	MOV.W	@SP+,R0 		;+ UNSAVE COPY CODE
	CLR.B	R1			;
	BSR	CPFED:16		; COPY EDIT AREA TO DOWNLOAD AREA
	ADD.W	#1,R0			; SET NEXT CODE
	CMP.B	#H'7F,R0                ;
	BNE	CPCL5			; BR. IF NOT COPY END
	MOV.W	#ZDLQ15,R2		; SET COPY COLUMN
	BRA	CPCL_7			; CLEAR DOWNLOAD H'7F AREA
;
;	<< DRAFT MODE >>
;
CPCDR:	CLR.B	@R4+			; SET ID 0 (= DRAFT MODE)
	MOV.B	#XROMCP,@R4		; SET ID 1 (= ROM COPY)
	BTST.B	#QPIT15,@PTMD1F:8	;
	BNE	CPCD5			; BR. IF 15 CPI
CPCD_2: MOV.W	R0,@-SP 		;+ SAVE COPY CODE
	JSR	@CPCHG			; CHANGE COPY CODE (= R0)
	MOV.W	R0,R1			; SAVE CODE
	JSR	@CVDR10 		; GET CONVERSION CODE (DRAFT 10 CPI)
	MOV.W	#ZDDR12,R2		; SET COPY COLUMN
	CLR.B	@EDWKS4:8		; SET PRE. SPACE LENGTH
	MOV.B	R2,@EDWKS5:8		; SET PATTERN LENGTH
	CLR.B	@EDWKS6:8		; SET BACK SPACE LENGTH
	BSR	CPTED			; COPY CG TO EDIT AREA
	MOV.W	@SP+,R0 		;+ UNSAVE COPY CODE
	CLR.B	R1			;
	BSR	CPFED:16		; COPY EDIT AREA TO DOWNLOAD AREA
	ADD.W	#1,R0			; SET NEXT CODE
	CMP.B	#H'7F,R0                ;
	BNE	CPCD_2			; BR. IF NOT COPY END
	BRA	CPCL_6			; CLEAR DOWNLOAD H'7F AREA
;
;	<< DRAFT 15 CPI >>
;
CPCD5:	MOV.W	R0,@-SP 		;+ SAVE COPY CODE
	JSR	@CPCHG			; CHANGE COPY CODE (= R0)
	MOV.W	R0,R1			; SAVE CODE
	JSR	@CVDR15 		; GET CONVERSION CODE (DRAFT 15 CPI)
	MOV.W	#ZDDR15,R2		; SET COPY COLUMN
	CLR.B	@EDWKS4:8		; SET PRE. SPACE LENGTH
	MOV.B	R2,@EDWKS5:8		; SET PATTERN LENGTH
	CLR.B	@EDWKS6:8		; SET BACK SPACE LENGTH
	BSR	CPTE2			; COPY CG TO EDIT AREA
	MOV.W	@SP+,R0 		;+ UNSAVE COPY CODE
	CLR.B	R1			;
	BSR	CPFED			; COPY EDIT AREA TO DOWNLOAD AREA
	ADD.W	#1,R0			; SET NEXT CODE
	CMP.B	#H'7F,R0                ;
	BNE	CPCD5			; BR. IF NOT COPY END
	MOV.W	#ZDDR15,R2		; SET COPY COLUMN
	BRA	CPCL_7			; CLEAR DOWNLOAD H'7F AREA
	.PAGE
;
; << SUB >>	COPY CG TO EDIT AREA 1	< DOWNLOAD - 10 CPI >
;
;	IN	   R2 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (ROM CG)
;
;	OUT	   R2 : PATTERN LENGTH (COLUMN)
;		DP R3 : PATTERN START POINTER (EDIT)
;
;	USE	R2->FP,DP,EP
;
CPTED:	TST.W	R2			;
	BEQ	CPTD_4			; BR. IF WIDTH = 0
	MOV.W	R2,@-SP 		;+ SAVE PATTERN LENGTH
	SHLR.W	R2			; LENGTH / 2 (COPY WORD)
	ADD.W	#-1,R2			;
	JSR	@SETDS1 		; GET DESTIN. POINTER
	MOV.W	R0,R3			; SAVE DESTIN. POINTER
	MOV.W	R3,@-SP 		;+ SAVE DESTIN. POINTER
CPTD_2: MOV.W	@R4+,R5 		; GET PATTERN DATA
	MOV.W	R5,@R3+ 		; SAVE IT
	MOV.W	@R4+,R5 		;
	MOV.W	R5,@R3+ 		;
	MOV.W	@R4+,R5 		;
	MOV.W	R5,@R3+ 		;
	SCB/F	R2,CPTD_2		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R2 		;+ UNSAVE PATTERN LENGTH
CPTD_4: RTS
;
; << SUB >>	COPY CG TO EDIT AREA 2	< DOWNLOAD - 15 CPI >
;
;	IN	   R2 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (ROM CG)
;
;	OUT	   R2 : PATTERN LENGTH (COLUMN)
;		DP R3 : PATTERN START POINTER (EDIT)
;
;	USE	R2->FP,DP,EP
;
CPTE2:	TST.W	R2			;
	BEQ	CPTD_4			; BR. IF WIDTH = 0
	MOV.W	R2,@-SP 		;+ SAVE PATTERN LENGTH
	ADD.W	#-1,R2			;
	MOV.W	#(EDBF1+6),R3		; GET DESTIN. POINTER
	MOV.W	R3,@-SP 		;+ SAVE DESTIN. POINTER
CPT2_2: CLR.B	@R3+			; SAVE IT
	MOV.B	@R4+,R5 		;
	MOV.B	R5,@R3+ 		;
	MOV.B	@R4+,R5 		;
	MOV.B	R5,@R3+ 		;
	SHLR.B	@(-1,R3)		; SHIFT 2 TIMES
	ROTXR.B @(-2,R3)		; ROTATE CARRY 2 TIMES
	ROTXR.B @(-3,R3)		; ROTATE CARRY 2 TIMES
	SHLR.B	@(-1,R3)		; SHIFT 2 TIMES
	ROTXR.B @(-2,R3)		; ROTATE CARRY 2 TIMES
	ROTXR.B @(-3,R3)		; ROTATE CARRY 2 TIMES
	SCB/F	R2,CPT2_2		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	MOV.W	@SP+,R2 		;+ UNSAVE PATTERN LENGTH
CPT2_4: RTS
	.PAGE
;
; << SUB >>	COPY EDIT AREA TO DOWNLOAD AREA 1	< DOWNLOAD - 10 CPI >
;
;	IN	   R0 : DATA CODE
;		   R1 : BACK SPACE LENGTH (COLUMN)
;		   R2 : PATTERN LENGTH (COLUMN)
;		DP R3 : PATTERN START POINTER (EDIT)
;
;	OUT	   R0 : DATA CODE
;		   R2 : PATTERN LENGTH (COLUMN)
;		DLDBF : ROM CG PATTERN
;
;	USE	R0->FP,EP
;
CPFED:	BSR	CPFES			; CALCULATE DESTIN. ADDRESS (TARGET CODE)
	TST.W	R2			;
	BEQ	CPFD_4			; BR. IF WIDTH = 0
	CLR.B	@R4+			; SET PRE. SPACE
	MOV.B	R2,@R4+ 		; SET PATTERN LENGTH
	CLR.B	@R4+			; SET BACK SPACE
	MOV.B	@EDWKS5:8,R1		; GET ORIGINAL PATTERN LENGTH
	ADDS.B	@EDWKS6:8,R1		; ADDER BACK SPACE + WIDTH
	MOV.B	R1,@R4+ 		; SET PRE. SP + WIDTH + BACK SP
	MOV.W	R2,@-SP 		;+ SAVE WIDTH
	SHLR.W	R2			; LENGTH / 2 (COPY WORD)
	ADD.W	#-1,R2			;
CPFD_2: MOV.W	@R3+,R5 		; GET PATTERN
	MOV.W	R5,@R4+ 		; SAVE IT
	MOV.W	@R3+,R5 		;
	MOV.W	R5,@R4+ 		;
	MOV.W	@R3+,R5 		;
	MOV.W	R5,@R4+ 		;
	SCB/F	R2,CPFD_2		; BR. IF NOT END
	MOV.W	@SP+,R2 		;+ UNSAVE PATTERN LENGTH
CPFD_4: RTS
;
; << SUB >>	CALCULATE SAVE ADDRESS	< DOWNLOAD >
;
;	IN	   R0 : DATA CODE
;
;	OUT	   R0 : DATA CODE
;		EP R4 : DOWNLOAD BUFFER ADDRESS (START 1 BLOCK)
;
;	USE	R0,R4,EP
;
CPFES:	MOV.W	R0,R4			; SAVE IT
	AND.B	#ZN-H'80,R4             ; CLEAR MSB
	SUB.B	#ZSP,R4 		; SET OFFSET
	MULXU.B #ZDLBLK,R4		; CALCULATE OFFSET x 1 BLOCK SIZE
	ADD.W	#DLDBF,R4		; + BASE ADDRESS
	LDC.B	#PAGE DLDBF,EP		; SET BUFFER PAGE
	RTS
	.PAGE
;
;********************************************************
;							*
;	LOAD GAIJI PATTERN & EDITING MODULE		*
;							*
;********************************************************
;
;	LOAD GAIJI PATTERN TO IMAGE BUFFER
;
;	IN	   R1 : GAIJI CODE
;		   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING PATTERN
;
LDGIJ:	CMP.B	#ZCMBFM,@(YFMATF,FP)	; CHECK FORMAT FLAG TO TEXT BUFFER
	BEQ	GJCMB:16		; BR. IF COMBINE MODE
	CLR.W	R4			; RESET OFFSET
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	GAIJ_2			; BR. IF NOT VERTICAL FORMAT
	BSET.B	#3,R4			; SET VERTICAL FORMAT BITS
GAIJ_2: BTST.W	#QKJ14L,@(YMODEF,FP)	;
	BEQ	GAIJ_4			; BR. IF NOT 1/4 LOW MODE
	BSET.B	#2,R4			; SET 1/4 LOW BITS
GAIJ_4: BTST.W	#QKJ14,@(YMODEF,FP)	;
	BEQ	GAIJ_6			; BR. IF NOT 1/4 MODE
	BSET.B	#1,R4			; SET 1/4 MODE BITS
GAIJ_6: BTST.W	#QKHALF,@(YMODEF,FP)	;
	BEQ	GAIJ_8			; BR. IF NOT HALF
	BSET.B	#0,R4			; SET HALF BITS
GAIJ_8: MULXU.B #3,R4			; CALCULATE TABLE OFFSET
	JSR	@(GJMDTB:16,R4) 	; GOTO EACH PROCESS
	RTS
;
;	<< MODE JUMP TABLE >>
;
GJMDTB: BRA	GJFLH:16		; GAIJI FULL		< Horizontal >
	BRA	GJHFH:16		; GAIJI HLAF		< Horizontal >
	BRA	GJ4HH:16		; GAIJI 1/4 HIGH	< Horizontal >
	BRA	GJ4HH:16		; GAIJI 1/4 HIGH	< Horizontal >
	BRA	GJFLH:16		; GAIJI FULL		< Horizontal >
	BRA	GJHFH:16		; GAIJI HLAF		< Horizontal >
	BRA	GJ4LH:16		; GAIJI 1/4 LOW 	< Horizontal >
	BRA	GJ4LH:16		; GAIJI 1/4 LOW 	< Horizontal >
	;
	BRA	GJFLV:16		; GAIJI FULL		< Vertical >
	BRA	GJHFV:16		; GAIJI HLAF		< Vertical >
	BRA	GJ4HV:16		; GAIJI 1/4 HIGH	< Vertical >
	BRA	GJ4HV:16		; GAIJI 1/4 HIGH	< Vertical >
	BRA	GJFLV:16		; GAIJI FULL		< Vertical >
	BRA	GJHFV:16		; GAIJI HLAF		< Vertical >
	BRA	GJ4LV:16		; GAIJI 1/4 LOW 	< Vertical >
	BRA	GJ4LV:16		; GAIJI 1/4 LOW 	< Vertical >
	.PAGE
;
; << SUB >>	GAIJI FULL			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJFLH:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKFULL,R3		; SET GAIJI FULL CG LENGTH (= 24)
	CLR.W	R2			; SET NOT COPY FLAG
	RTS
;
; << SUB >>	GAIJI FULL			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJFLV:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKFULL,R3		; SET GAIJI FULL CG LENGTH (= 24)
	JSR	@EDTCPY 		; COPY PATTERN TO EDIT BUFFER
	JSR	@MKVRT			; MAKE PATTERN TO VERTICAL FORMAT
	RTS
	.PAGE
;
; << SUB >>	GAIJI HALF			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJHFH:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKHALF,R3		; SET GAIJI HALF CG LENGTH (= 12)
	CLR.W	R2			; SET NOT COPY FLAG
	RTS
;
; << SUB >>	GAIJI HALF			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJHFV:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKHALF,R3		; SET GAIJI HALF CG LENGTH (= 12)
	JSR	@EDTCPH 		; COPY HALF CG TO EDIT BUFFER
	MOV.W	#ZKFULL,R3		; SET GAIJI FULL CG LENGTH (= 24)
	JSR	@MKVRT			; MAKE PATTERN TO VERTICAL FORMAT
	RTS
	.PAGE
;
; << SUB >>	GAIJI 1/4 HIGH			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJ4HH:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKJ14,R3		; SET GAIJI 1/4 CG LENGTH (= 12)
	BSR	MKG4HH			; MAKE 1/4 -> 1/4 HIGH PATTERN
	RTS
;
; << SUB >>	GAIJI 1/4 HIGH			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJ4HV:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKJ14,R3		; SET GAIJI 1/4 CG LENGTH (= 12)
	BSR	MKG4HV:16		; MAKE 1/4 -> 1/4 HIGH PATTERN
	JSR	@MKVRT4 		; MAKE PATTERN TO VERTICAL FORMAT (1/4)
	RTS
	.PAGE
;
; << SUB >>	GAIJI 1/4 LOW			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJ4LH:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKJ14,R3		; SET GAIJI 1/4 CG LENGTH (= 12)
	BSR	MKG4LH:16		; MAKE 1/4 -> 1/4 HIGH PATTERN
	RTS
;
; << SUB >>	GAIJI 1/4 LOW			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJ4LV:	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKJ14,R3		; SET GAIJI 1/4 CG LENGTH (= 12)
	BSR	MKG4LV			; MAKE 1/4 -> 1/4 HIGH PATTERN
	JSR	@MKVRT4 		; MAKE PATTERN TO VERTICAL FORMAT (1/4)
	RTS
	.PAGE
;
; << SUB >>	GAIJI COMBINE			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
GJCMB:	BTST.W	#QKJ2ND,@(YMODEF,FP)	;
	BNE	GJCM_6			; BR. IF KANJI COMBINE 2ND CODE
	BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKHALF,R3		; SET GAIJI HALF CG LENGTH (= 12)
	JSR	@EDTCPY 		; COPY SPECIAL HALF CG TO EDIT BUFFER
	BRA	GJCM_8
;
;	< 2ND CODE >
;
GJCM_6: BSR	GETGJA:16		; GET GAIJI PATTERN POINTER
	MOV.W	#ZKHALF,R3		; SET HALF CG LENGTH (= 12)
	JSR	@EDTCP1 		; COPY SPECIAL CG
GJCM_8: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24 -> COMBINE)
	JSR	@MKVRT			; MAKE PATTERN TO VERTICAL FORMAT
	RTS
	.PAGE
;
; << SUB >>	MAKE FULL GAIJI TO 1/4 HIGH
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (GAIJI)
;		   FP : TEXT BUFFER POINTER
;
;			MKG4HH : GAIJI CG -> 1/4 CG FOR HORIZONTAL (HIGH-LEFT)
;			MKG4LV : GAIJI CG -> 1/4 CG FOR VERTICAL (LOW-LEFT)
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (GAIJI)
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
MKG4LV:
MKG4HH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
MK4H_2: ADD.W	#-1,R3			;
MK4H_4: MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE 1->8 PIN PATTERN
	MOV.B	@R4+,R2 		;
	AND.B	#H'0F,R2                ; GET LOW NIBBLE
	MOV.B	R2,@R0+ 		; SAVE 9->16 PIN PATTERN
	MOV.B	@R4+,R2 		; GET DUMMY READ
	CLR.B	@R0+			; SET 17->24 PIN PATTERN
	SCB/F	R3,MK4H_4		; BR. IF NOT END
GJSTP:	MOV.W	@SP+,R4 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	POPEP				;+ UNSAVE < DP > (NEW EP)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG (COPY EDIT)
	RTS
	.PAGE
;
; << SUB >>	MAKE FULL GAIJI TO 1/4 HIGH		< VERTICAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (GAIJI)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (GAIJI)
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
MKG4HV: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R3,R2			; SAVE PATTERN LENGTH
	SHLR.W	R2			; LENGTH / 2 (CLEAR WORD)
	ADD.W	#-1,R2			;
MK4V_2: CLR.W	@R0+			; CLEAR AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,MK4V_2		; BR. IF NOT END
	BRA	MK4H_2
	.PAGE
;
; << SUB >>	MAKE FULL GAIJI TO 1/4 LOW		< VERTICAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (GAIJI)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (GAIJI)
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
MKG4LH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
MK4V_6: CLR.B	@R0+			; SET 1->8 PIN PATTERN
	MOV.B	@R4+,R2 		; GET 1ST PATTERN
	MOV.B	@R4+,R1 		; GET 2ND PATTERN
	SHLL.B	R2			; SHIFT 4 TIMES
	ROTXL.B R1			; ROTATE CARRY 4 TIMES
	SHLL.B	R2			;
	ROTXL.B R1			;
	SHLL.B	R2			;
	ROTXL.B R1			;
	SHLL.B	R2			;
	ROTXL.B R1			;
	MOV.B	R2,@R0+ 		; SAVE 9->16 PIN PATTERN
	MOV.B	R1,@R0+ 		; SAVE 17->24 PIN PATTERN
	MOV.B	@R4+,R2 		; GET DUMMY READ
	SCB/F	R3,MK4V_6		; BR. IF NOT END
	BRA	GJSTP
	.PAGE
;
; << SUB >>	GET TARGET GAIJI PATTERN ADDRESS
;
;	IN	   R1 : GAIJI CODE
;
;	OUT	EP R4 : TARGET PATTERN START POINTER (GAIJI)
;
;	USE	R1,R4,EP
;
GETGJA: MOV.W	R1,R4			; SAVE GAIJI CODE
	EXTU	R4			; 1ST = 0
	SUB.W	#H'21,R4                ; -> OFFSET
	MULXU.B #ZGJBLK,R4		; TARGET GAIJI AREA OFFSET
	LDC.B	#PAGE GIJBF,EP		; SET GAIJI BUFFER PAGE
	ADD.W	#GIJBF,R4		; + BASE ADDRESS
	RTS
	.PAGE
;
;********************************************************
;							*
;	LOAD DOWNLOAD PATTERN & EDITING MODULE		*
;							*
;********************************************************
;
;	LOAD DOWNLOAD PATTERN TO IMAGE BUFFER
;
;	IN	   R1 : CODE
;		   R4 : MODE FLAG
;		   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING PATTERN
;
LDDWL:	CLR.W	R4			;
	BTST.W	#QAPROP,@(YMODEF,FP)	;
	BEQ	LDDW_4			; BR. IF NOT PROPORTIONAL MODE
	BSET.B	#0,R4			; SET PROPORTIONAL BIT
LDDW_4: BTST.W	#QACOND,@(YMODEF,FP)	;
	BEQ	LDDW_6			; BR. IF NOT CONDENSE MODE
	BSET.B	#1,R4			; SET CONDENSE BIT
LDDW_6: BTST.W	#QAP15C,@(YMODEF,FP)	;
	BEQ	LDDW_8			; BR. IF NOT 15 CPI MODE
	BSET.B	#2,R4			; SET 15 CPI BIT
LDDW_8: BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	LDDW_A			; BR. IF DRAFT MODE
	BSET.B	#3,R4			; SET LQ BIT
LDDW_A: MULXU.B #3,R4			; CALCULATE TABLE OFFSET
	JSR	@(DWLTBL:16,R4) 	; CALL EACH PROCESS
	RTS
;
;	<< PITCH MODE JUMP TABLE >>
;
DWLTBL: BRA	DDRFMD:16		; (00) DRAFT PICA/ELITE MODE
	BRA	DLQPRP:16		; (01) LQ PROPORTIONAL MODE
	BRA	DDRCND:16		; (02) DRAFT PICA/ELITE CONDENSE MODE
	BRA	DLQPRC:16		; (03) LQ PROPORTIONAL CONDENSE MODE
	BRA	DDR15P:16		; (04) DRAFT 15 CPI (& PICA/ELITE) MODE
	BRA	DLQPRP:16		; (05) LQ PROPORTIONAL (& 15 CPI) MODE
	BRA	DDR15P:16		; (06) DRAFT 15 CPI (& CONDENSE) MODE
	BRA	DLQPRC:16		; (07) LQ PROPORTIONAL CONDENSE (& 15 CPI) MODE
	;
	BRA	DLQMOD:16		; (08) LQ PICA/ELITE MODE
	BRA	DLQPRP:16		; (09) LQ PROPORTIONAL MODE
	BRA	DLQCND:16		; (10) LQ PICA/ELITE CONDENSE MODE
	BRA	DLQPRC:16		; (11) LQ PROPORTIONAL CONDENSE MODE
	BRA	DLQ15P:16		; (12) LQ 15 CPI (& PICA/ELITE) MODE
	BRA	DLQPRP:16		; (13) LQ PROPORTIONAL (& 15 CPI) MODE
	BRA	DLQ15P:16		; (14) LQ 15 CPI (& CONDENSE) MODE
	BRA	DLQPRC:16		; (15) LQ PROPORTIONAL CONDENSE (& 15 CPI) MODE
	.PAGE
;
;	<< PICA / ELITE MODE >> 			< DOWNLOAD -> DRAFT >
;	<< PICA / ELITE CONDENSE MODE >>		< DOWNLOAD -> DRAFT >
;	<< PICA / ELITE MODE >> 			< DOWNLOAD -> LQ >
;	<< PROPORTIONAL MODE >> 			< DOWNLOAD -> LQ >
;
DDRFMD:
DLQMOD:
DLQPRP:
DDRCND: BSR	GETDLA:16		; GET DOWNLOAD ADDRESS & PATTERN LENGTH
	BSR	CKSCRT			; CHECK SCRIPT MODE
	BNE	CPSCRT			; BR. IF SUPER/SUB SCRIPT MODE
	BSR	DDCPED:16		; COPY PATTERN TO EDIT BUFFER
	RTS
;
;	<< PICA / ELITE CONDENSE MODE >>		< DOWNLOAD -> LQ >
;	<< PROPORTIONAL CONDENSE MODE >>		< DOWNLOAD -> LQ >
;
DLQPRC:
DLQCND: BSR	GETDLA:16		; GET DOWNLOAD ADDRESS & PATTERN LENGTH
	BSR	CKSCRT			; CHECK SCRIPT MODE
	BEQ	DLCN_4			; BR. IF NOT SUPER/SUB SCRIPT MODE
	BSR	CPSCRT			; MAKE SUPER/SUB SCRIPT PATTERN
DLCN_4: BSR	DDCMP			; MAKE COMPRESS PATTERN
	RTS
;
;	<< 15 CPI MODE >>				< DOWNLOAD -> DRAFT >
;	<< 15 CPI MODE >>				< DOWNLOAD -> LQ >
;
DDR15P:
DLQ15P: BSR	GETDLA:16		; GET DOWNLOAD ADDRESS & PATTERN LENGTH
	BSR	CKSCRT			; CHECK SCRIPT MODE
	BNE	CPSCRT			; BR. IF SUPER/SUB SCRIPT MODE
	BSR	DDCPED:16		; COPY PATTERN TO EDIT BUFFER
	RTS
;
; << SUB >>	CHECK SCRIPT MODE FLAG
;
;	IN	FP : TEXT BUFFER POINTER
;
;	OUT	R0 : = 0 ... NOT SCRIPT MODE
;		FP : TEXT BUFFER POINTER
;
CKSCRT: BTST.W	#QASUPS,@(YMODEF,FP)	;
	BNE	CKSC_4			; BR. IF SUPERSCRIPT MODE
	BTST.W	#QASUBS,@(YMODEF,FP)	;
	BEQ	CKSC_6			; BR. IF NOT SUBSCRIPT MODE
CKSC_4: MOV.B	#01,R0			; SET SCRIPT MODE FLAG
	RTS
	;
CKSC_6: CLR.B	R0			; SET NOT SCRIPT MODE FLAG
	RTS
	.PAGE
;
; << SUB >>	MAKE SUPERSCRIPT PATTERN TO EDIT BUFFER < DOWNLOAD >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
CPSCRT: BTST.W	#QASUPS,@(YMODEF,FP)	;
	BNE	MKSUP			; BR. IF SUPERSCRIPT MODE
	BTST.W	#QASUBS,@(YMODEF,FP)	;
	BEQ	CKSC_4			; BR. IF NOT SUBSCRIPT MODE
MKSUB:	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			; ADJUST COUNTER
MKSB_2: MOV.B	@R4+,R2 		; GET PATTERN (DUMMY READ)
	CLR.B	@R0+			; SET PATTERN (1->8 PIN)
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE PATTERN (9->16 PIN)
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE PATTERN (17->24 PIN)
	SCB/F	R3,MKSB_2		; BR. IF NOT END
	BRA	GJSTP
	;
MKSUP:	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			; ADJUST COUNTER
MKSP_2: MOV.B	@R4+,R2 		; GET PATTERN (DUMMY READ)
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE PATTERN (1->8 PIN)
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE PATTERN (9->16 PIN)
	CLR.B	@R0+			; SET PATTERN (17->24 PIN)
	SCB/F	R3,MKSP_2		; BR. IF NOT END
	BRA	GJSTP
	.PAGE
;
; << SUB >>	MAKE COMPRESS PATTERN TO EDIT BUFFER	< DOWNLOAD -> LQ >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
DDCMP:	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R4,R5			; SAVE LOAD PATTERN START POINTER
	ADDS.B	#3,R5			; ADJUST LOAD PATTERN START POINTER (DESTIN.)
	MOV.W	R3,@-SP 		;
	SHLR.W	R3			; LENGTH / 2
	BCS	DDCM_2			; BR. IF ODD COLUMN
	BEQ	DDCM_2			; BR. IF (LENGTH / 2) = 0
	ADD.W	#-1,R3			; ADJUST COUNTER
DDCM_2: MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	R2,@R0+ 		;
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	R2,@R0+ 		;
	MOV.W	R5,R4			; SET NEXT POINTER
	ADDS.B	#3,R5			; SET NEXT POINTER (DESTIN.)
	SCB/F	R3,DDCM_2		; BR. IF NOT END
	MOV.W	@SP+,R3 		;
	SHLR.W	R3			; LENGTH / 2
	BCS	DDCM_8			; BR. IF ODD COLUMN
	BEQ	DDCM_8			; BR. IF (LENGTH / 2) = 0
	ADD.W	#-1,R3			;
DDCM_4: CLR.B	@R0+			; CLEAR OLD PATTERN
	CLR.B	@R0+			;
	CLR.B	@R0+			;
	SCB/F	R3,DDCM_4		; BR. IF NOT END
	BRA	GJSTP
	;
DDCM_8: CLR.B	@R0+			; CLEAR OLD PATTERN
	CLR.B	@R0+			;
	CLR.B	@R0+			;
	BRA	GJSTP
	.PAGE
;
; << SUB >>	COPY PATTERN TO EDIT BUFFER 1	< COPY 10 CPI CG >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
DDCPED: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	JSR	@SETDS1 		; GET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R4,R5			; SAVE LOAD PATTERN START POINTER
	ADDS.B	#3,R5			; ADJUST LOAD PATTERN START POINTER (DESTIN.)
	SHLR.W	R3			; LENGTH / 2
	BCS	DDCP_2			; BR. IF ODD COLUMN
	BEQ	DDCP_2			; BR. IF (LENGTH / 2) = 0
	ADD.W	#-1,R3			; ADJUST COUNTER
DDCP_2: MOV.W	@R4+,R2 		; GET PATTERN
	MOV.W	R2,@R0+ 		; SAVE IT
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	SCB/F	R3,DDCP_2		; BR. IF NOT END
	BRA	GJSTP
	.PAGE
;
; << SUB >>	GET TARGET DOWNLOAD PATTERN ADDRESS
;
;	IN	   R1 : DOWNLOAD CODE
;
;	OUT	   R2 : PRE. SPACE
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : TARGET PATTERN START POINTER (DOWNLOAD)
;
;	USE	R1->R4,EP
;
GETDLB: MOV.W	@(YCODEF,FP),R1 	; GET TEXT BUFFER FROM DOWNLOAD CODE
GETDLA: MOV.W	R1,R4			; SAVE DOWNLOAD CODE
	EXTU	R4			; 1ST = 0
	AND.B	#ZN-H'80,R4             ; CLEAR MSB
	SUB.W	#H'20,R4                ; -> OFFSET
	MULXU.B #ZDLBLK,R4		; TARGET DOWNLOAD AREA OFFSET
	LDC.B	#PAGE DLDBF,EP		; SET DOWNLOAD BUFFER PAGE
	ADD.W	#DLDBF,R4		; + BASE ADDRESS
	MOV.B	@R4,R2			; GET d0 VALUE (PRE. SPACE)
	MOV.B	@(1,R4),R3		; GET d1 VALUE (PATTERN LENGTH)
	EXTU	R2			; GET d0
	EXTU	R3			; GET d1
	BTST.B	#0,R3			;
	BEQ	GETD_2			; BR. IF EVEN PATTERN LENGTH
	ADD.W	#1,R3			; ADJUST PATTERN LENGTH
GETD_2: ADDS.B	#ZDLFSZ,R4		; ADJUST POINTER (START PATTERN ADDRESS)
	RTS
	.END

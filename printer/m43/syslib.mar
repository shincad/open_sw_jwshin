	.PROGRAM	syslib
	.HEADING	"M4324 SYSTEM LIBRARY MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 SYSTEM LIBRARY MODULE			*
;							*
;	FILE NAME	SYSLIB.MAR			*
;	CREATED 	14/DEC/1990			*
;							*
;********************************************************
;
	.EXPORT 	CALSYS,CHKROM,CHKCG, CHKRAM
	.EXPORT 	CLRBF, FILBF, CLRBFW,FILBFW,COPYBF
	.IMPORT 	MSGPOS				; 920117

	.INCLUDE	"COMMON.H"

	.SECTION	SYS1,CODE,ALIGN=16
;
;	CALL SYSTEM LIBRARY FROM ATHER PAGE
;
;	IN	R0 : CALL ADDRESS
;	     R1-R5 : CALL PARAMETER
;
;	OUT  R0-R5 :
;
CALSYS: ADD.W	#2,SP			; ADJUST STACK FOR SR
	JSR	@R0			; CALL ENTRY
	PRTS				;
	.PAGE
;
;	CHECK ROM
;
;	IN	R1 : ROM SUM
;		R2 : ROM SIZE  (0=NO CHECK, 1=512K, 2=1M, 4=2M, 8=4M)
;
;	OUT	Z  : 1=ROM OK,	0=ROM ERROR
;
;CHKROM: TST.B	 R2			 ; CHECK ROM SIZE
;	 BEQ	 CROM_2 		 ; BR IF ROM CHECK SKIP
;	 EXTU	 R2			 ;
;	 NEG.B	 R1			 ;
;	 ADD.B	 R1,R1			 ; SET ZERO SUM VALUE
;	 CLR.B	 R3			 ; RESET EP COUNTER
;	 ADD.B	 #-1,R2 		 ; ADJUST FOR LOOP
;	 BCLR.B  #QMSB,R2		 ;
;	 BNE	 CROM_1 		 ; BR IF SHADOW ROM USE
;	 LDC.B	 R3,EP			 ; SET 0 PAGE
;	 MOV.W	 #H'4000,R4              ;
;	 MOV.W	 #16*ZK/8-1,R5		 ;
;	 BSR	 CCG_2			 ; CHECK H'00000 -> H'03FFF
;	 MOV.W	 #H'8000,R4              ;
;	 MOV.W	 #8*ZK/8-1,R5		 ;
;	 BSR	 CCG_2			 ; CHECK H'06000 -> H'07FFF
;	 ADD.B	 #-1,R2 		 ;
;CROM_1: ADD.B	 #1,R3			 ;
;	 LDC.B	 R3,EP			 ; UPDATE ROM PAGE
;	 BSR	 CCG_1			 ; CHECK H'?0000 -> H'?FFFF
;	 SCB/F	 R2,CROM_1		 ;
;CROM_2: RTS				 ;
;
CHKROM: LDC.B	#PAGE MSGPOS,EP 	; 920117
	MOV.W	#MSGPOS,R4
	MOV.W	#H'0,R2                 ;
	ADD.W	@R4,R2			; 1
	ADD.W	#H'2,R4
	ADD.W	@R4,R2			; 2
	ADD.W	#H'2,R4
	ADD.W	@R4,R2			; 3
	ADD.W	#H'2,R4
	ADD.W	@R4,R2			; 4
	ADD.W	#H'2,R4
	ADD.W	@R4,R2			; 5
	ADD.W	#H'2,R4
	ADD.W	@R4,R2			; 6
	MOV.W	#H'0D8B7,R1             ; UNION
;	MOV.W	#H'0DAA8,R1             ; SEOIL
	RTS
;
;	CHECK CG
;
;	IN	R1 : CHECK SUM
;		EP : CG PAGE
;
;	OUT	Z  : 1=ROM OK,	0=ROM ERROR
;
CHKCG:	NEG.B	R1			; SET ZERO SUM VALUE
CCG_1:	CLR.W	R4			;
	MOV.W	#64*ZK/8-1,R5		;
CCG_2:	ADD.B	@-R4,R1 		; CALCULATE CHECK SUM
	ADD.B	@-R4,R1 		;
	ADD.B	@-R4,R1 		;
	ADD.B	@-R4,R1 		;
	ADD.B	@-R4,R1 		;
	ADD.B	@-R4,R1 		;
	ADD.B	@-R4,R1 		;
	ADD.B	@-R4,R1 		;
	SCB/F	R5,CCG_2		;
	RTS				;
	.PAGE
;
;	CHECK RAM
;
;	IN   EP R4 : RAM START
;		R5 : RAM SIZE  (MUST BE MOD 256)
;
;	OUT	Z  : 1=RAM OK	0=RAM ERROR
;	     EP R4 : NOT CHANGED AT OK RETURN
;		R5 : NOT CHANGED AT OK RETURN
;
CHKRAM: XCH	R3,R5			;
	ADD.W	R3,R4			; GET RAM END POINTER
	SWAP	R3			;
	ADD.B	#-1,R3			; ADJUST FOR LOOP
	MOV.B	#0,R0			; SET TEST PATTERN
	MOV.W	R3,R2			;
	MOV.W	R4,R5			; SET RAM POINTER
CRAM_1: MOV.W	#ZH-1,R1		;
CRAM_2: ADD.B	#-1,R0			; UPDATE TEST PATTERN
	MOV.B	R0,@-R5 		; WRITE TEST PATTERN
	SCB/F	R1,CRAM_2		;
	ADD.B	#-1,R0			; UPDATE TEST APTTERN
	SCB/F	R2,CRAM_1		;
	MOV.B	#0,R0			; SET TEST PATTERN
	MOV.W	R3,R2			;
	MOV.W	R4,R5			; SET RAM POINTER
CRAM_3: MOV.W	#ZH-1,R1		;
CRAM_4: ADD.B	#-1,R0			; UPDATE TEST PATTERN
	CMP.B	@-R5,R0 		; CHECK RAM CONTENT
	SCB/NE	R1,CRAM_4		;
	BNE	CRAM_9			; BR IF RAM ERROR
	ADD.B	#-1,R0			; UPDATE TEST PATTERN
	SCB/F	R2,CRAM_3		;
	MOV.B	#ZN,R0			; SET TEST PATTERN
	MOV.W	R3,R2			;
	MOV.W	R4,R5			; SET RAM POINTER
CRAM_5: MOV.W	#ZH-1,R1		;
CRAM_6: ADD.B	#1,R0			; UPDATE TEST PATTERN
	MOV.B	R0,@-R5 		; WRITE TEST PATTERN
	SCB/F	R1,CRAM_6		;
	ADD.B	#1,R0			; UPDATE TEST PATTERN
	SCB/F	R2,CRAM_5		;
	MOV.B	#ZN,R0			; SET TEST PATTERN
	MOV.B	R3,R5			;
CRAM_7: MOV.W	#ZH-1,R1		;
CRAM_8: ADD.B	#1,R0			; UPDATE TEST PATTERN
	CMP.B	@-R4,R0 		; CHECK RAM CONTENT
	SCB/NE	R1,CRAM_8		;
	BNE	CRAM_5			; BR IF RAM ERROR
	ADD.B	#1,R0			; UPDATE TEST PATTERN
	SCB/F	R3,CRAM_7		;
	ADD.B	#1,R5			;
	SWAP	R5			; UNSAVE R5
	CLR.W	R0			; SET Z-FLAG FOR OK RETURN
CRAM_9: RTS				;
	.PAGE
;
;	CLEAR/FILL BUFFER BY BYTE
;
;	IN	R1 : FILL VALUE
;	     EP R4 : BUFFER POINTER
;		R5 : BYTE SIZE
;
;	OUT	NONE
;
CLRBF:	MOV.B	#0,R1			; SET FILL VALUE
FILBF:	ADD.W	R5,R4			; GET BUFFER END POINTER
	ADD.W	#-1,R5			; ADJUST FOR LOOP
	MOV.W	#ZH-1,R0		;
	SUB.B	R5,R0			; CALCULATE JUMP OFFSET
	SHLL.W	R0			;
	SWAP	R5			;
	EXTU	R5			;
	JMP	@(FILB_1:16,R0) 	;

FILB_1: 				;
	.AREPEAT	256		;
	MOV.B	R1,@-R4 		; FILL BUFFER
	.AENDR				;
	SCB/F	R5,FILB_3		;
FILB_2: RTS				;
	;
FILB_3: JMP	@FILB_1 		;
	.PAGE
;
;	CLEAR/FILL BUFFER BY WORD
;
;	IN	R1 : FILL VALUE
;	     EP R4 : BUFFER POINTER
;		R5 : BYTE SIZE (> 0)
;
;	OUT	NONE
;
CLRBFW: MOV.B	#0,R1			; SET FILL VALUE
FILBFW: MOV.B	R1,R0			;
	SWAP	R1			;
	MOV.B	R0,R1			; SET FILL VALUE
	BTST.B	#0,R4			;
	BEQ	FILW_1			; BR IF WORD BOUNDARY START
	MOV.B	R1,@R4+ 		; FILL BUFFER
	ADD.W	#-1,R5			; ADJUST BYTE SIZE
FILW_1: ADD.W	R5,R4			; GET BUFFER END POINTER
	BTST.B	#0,R4			;
	BEQ	FILW_2			; BR IF WORD BOUNDARY END
	MOV.B	R1,@-R4 		; FILL BUFFER
FILW_2: SHLR.W	R5			; CALCULATE WORD SIZE
	BEQ	FILB_2			; BR IF FILL END
	ADD.W	#-1,R5			; ADJUST FOR LOOP
	MOV.W	#ZH-1,R0		;
	SUB.B	R5,R0			; CALCULATE JUMP OFFSET
	SHLL.W	R0			;
	SWAP	R5			;
	EXTU	R5			;
	JMP	@(FILW_3:16,R0) 	;

FILW_3: 				;
	.AREPEAT	256		;
	MOV.W	R1,@-R4 		; FILL BUFFER
	.AENDR				;
	SCB/F	R5,FILW_4		;
	RTS				;
	;
FILW_4: JMP	@FILW_3 		;
	.PAGE
;
;	COPY BUFFER BY BYTE
;
;	IN   DP R3 : SRC. BUFFER POINTER
;	     EP R4 : DST. BUFFER POINTER
;		R5 : BYTE SIZE
;
;	OUT	NONE
;
COPYBF: ADD.W	#-1,R5			; ADJUST FOR LOOP
	MOV.W	#ZH-1,R0		;
	SUB.B	R5,R0			; CALCULATE JUMP OFFSET
	SHLL.W	R0			;
	SHLL.W	R0			;
	SWAP	R5			;
	EXTU	R5			;
	JMP	@(COPY_1:16,R0) 	;

COPY_1: 				;
	.AREPEAT	256		;
	MOV.B	@R3+,R0 		; COPY BUFFER
	MOV.B	R0,@R4+ 		;
	.AENDR				;
	SCB/F	R5,COPY_2		;
	RTS				;
	;
COPY_2: JMP	@COPY_1 		;
	.END

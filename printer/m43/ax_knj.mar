	.PROGRAM	aplknj
	.HEADING	"M4324 AX LOAD KANJI PATTERN MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX LOAD KANJI PATTERN & EDITING MODULE	*
;							*
;	FILE NAME	AX_KNJ.MAR			*
;	CREATED 	15/MAY/1991			*
;							*
;********************************************************
;
	.EXPORT 	KJVEL, KJVEL1			;\ 03/MAR/1992
	.EXPORT 	LDKNJ1,LDKNJ2,ULNKNJ,OLNKNJ
	.EXPORT 	MKVRT, MKVRT4,CLREDT,CP1T2
	.EXPORT 	EDTCPY,EDTCP1,EDTCPH,SETDSK
	.EXPORT 	LDKNJY, LDKNJX			; 920312 CONNECT
;
	.IMPORT 	VCMTB, VELTB1
	.IMPORT 	KTBHT, KTBVT, QTBHT, QTBVT
	.IMPORT 	SELKCG,SETSPD,LDGIJ, SETIPG
	.IMPORT 	EMPKJ, HELKJ, HEPKJ, KJITL
	.IMPORT 	GETIBP,KOUTSH
	.IMPORT 	KF1HT, KF2HT, KF3HT, KF4HT	; 911202
	.IMPORT 	K21HT, K22HT			; 911206
	.IMPORT 	K23HT				; 911207
	.IMPORT 	REVERS				;\ 04/MAR/1992
	.IMPORT 	AMIKE				; 920325
	.IMPORT 	MSKBL				; 920327
	.IMPORT 	D4SEMI				; 920413 D4-SEMI
;
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
	.INCLUDE	"GACNV.H"
;
;	<< EACH CONSTANT >>
;
ZKFULL: .EQU	 24			; KANJI FULL
ZKHALF: .EQU	 12			; KANJI HALF
ZKJ14:	.EQU	 12			; KANJI 1/4
QKVINV: .EQU	  8			; VERTICAL INVALID FLAG
QK2PAS: .EQU	 15			; VERTICAL ENLARGE 2 PASS BIT FOR KANJI
ZFLSPC: .EQU	H'2121                  ; KANJI FULL SPACE CODE
	;
XSTYLE: .EQU	H'1000+H'0800           ; CHARACTER STYLE MASK
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;	LOAD KANJI CG PATTERN TO IMAGE BUFFER < VERTICAL ENLARGE 1 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING CG PATTERN
;
LDKNJ1: BTST.W	#QKVENL,@(YMODEF,FP)	;
	BEQ	LDK1_2			; BR. IF NOT VERTICAL ENLARGE 1 PASS
LDKJ1V: CMP.W	#ZFLSPC,@(YCODEF,FP)	;
	BEQ	LDK1_2			; BR. IF FULL KANJI SPACE
	BSR	LDKJ2N:16		; EACH KANJI PROCESS
	BSR	EDTCHK:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	KJVEL:16		; MAKE VERTICAL ENLARGE (1 PASS)
	BSR	IMGCPY:16		; COPY PATTERN TO IMAGE BUFFER
;
	MOV.W	R5,@-SP 		; 930128
	JSR	@AMIKE			;   "
	MOV.W	@SP+,R2 		;   "
	CMP.W	R2,R5			;   "
	BCC	LDKN_4			;   "
	XCH	R2,R5			;   "
;
	MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
LDK1_2: RTS
;
;	LOAD KANJI CG PATTERN TO IMAGE BUFFER < NORMAL / VERTICAL ENLARGE 2 PASS >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING CG PATTERN
;
LDKNJX:
LDKNJ2: BTST.W	#QKVENL,@(YMODEF,FP)	;
	BNE	LDKJ2V			; BR. IF VERTICAL ENLARGE LOW PATTERN PROCESS
	CMP.W	#ZFLSPC,@(YCODEF,FP)	;
	BEQ	LDK1_2			; BR. IF FULL KANJI SPACE
	BSR	LDKJ2N:16		; NORMAL KANJI PROCESS
	BSR	EDTCHK:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	IMGCPY:16		; COPY PATTERN TO IMAGE BUFFER
;
	MOV.W	R5,@-SP 		; 921105
	JSR	@AMIKE			;
	MOV.W	@SP+,R2 		; 921127
	CMP.W	R2,R5			;
	BCC	LDKN_4			;
	XCH	R2,R5			;
;
LDKN_4: MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
LDK2_2: RTS
;
; << SUB >>	MAKE VERTICAL ENLARGE LOW PATTERN PROCESS
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	IMGBF : AFTER EDITING CG PATTERN
;
LDKJ2V:
	CMP.W	#ZFLSPC,@(YCODEF,FP)	;
	BEQ	LDK2_2			; BR. IF FULL KANJI SPACE
	BSR	LDKJ2N:16		; EACH KANJI PROCESS
	BSR	EDTCHK:16		; CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSET.W	#QK2PAS,@(YMODEF,FP)	; SET DUMMY FLAG (VERTICAL ENLARGE 2 PASS)
	BSR	KJVEL1:16		; MAKE VERTICAL ENLARGE (2 PASS)
	BSR	IMGCPY:16		; COPY PATTERN TO IMAGE BUFFER
;
	MOV.W	R5,@-SP 		; 930128
	JSR	@AMIKE			;   "
	MOV.W	@SP+,R2 		;   "
	CMP.W	R2,R5			;   "
	BCC	LDKN_4			;   "
	XCH	R2,R5			;   "
;
	BCLR.W	#QK2PAS,@(YMODEF,FP)	; RESET DUMMY FLAG (VERTICAL ENLARGE 2 PASS)
	MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
LDKX_2: RTS
	.PAGE
;
;	CREATE UNDERLINE PATTERN TO IMAGE BUFFER
;
;	IN	FP : TEXT BUFFER POINTER
;
;	<< Notice ! >>	INPUT	QKUNDL = 1
;
ULNKNJ: BTST.W	#QKUNDL,@(YMODEF,FP)	;
	BEQ	ULNK_2			; BR. IF NOT UNDERLINE MODE
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BNE	ULNK_2			; BR. IF VERTICAL FORMAT (OVERLINE)
	BSR	MKULN			; CREATE UNDERLINE PATTERN
ULNK_2: RTS
;
;	OVERLINE PATTERN TO IMAGE BUFFER
;
;	IN	FP : TEXT BUFFER POINTER
;
;	<< Notice ! >>	INPUT	QKUNDL = 1
;				QKVFMT = 1
;
OLNKNJ: BTST.W	#QKUNDL,@(YMODEF,FP)	;
	BEQ	ULNK_2			; BR. IF NOT UNDERLINE MODE
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	ULNK_2			; BR. IF NOT VERTICAL FORMAT
	CMP.B	#ZCMBFM,@(YFMATF,FP)	;
	BNE	MKOLN			; BR. IF NOT KANJI COMBINE MODE
	BTST.W	#QKJ2ND,@(YMODEF,FP)	;
	BEQ	ULNK_2			; BR. IF KANJI COMBINE 1ST MODE
;
; << SUB >>	CREATE KANJI OVERLINE DATA TO IMAGE BUFFER
;
;	IN	FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MKOLN:	CLR.B	R1			; SET UNDERLINE DATA
	MOV.B	#H'01,R0                ; SET 1 DOT OVERLINE DATA
	BTST.W	#QK2ULN,@(YMODEF,FP)	;
	BEQ	MKUL_2			; BR. IF NOT 2 DOTS UNDERLINE
	MOV.B	#H'03,R0                ; SET 2 DOT OVERLINE DATA
	BRA	MKUL_2
;
; << SUB >>	CREATE KANJI UNDERLINE DATA TO IMAGE BUFFER
;
;	IN	FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MKULN:	CLR.B	R0			; SET OVERLINE DATA
	MOV.B	#H'08,R1   ;920320  80  ; SET 1 DOT UNDERLINE DATA
	BTST.W	#QK2ULN,@(YMODEF,FP)	;
	BEQ	MKUL_2			; BR. IF NOT 2 DOTS UNDERLINE
	MOV.B	#H'C0,R1                ; SET 2 DOT UNDERLINE DATA
MKUL_2: MOV.W	@(ZFMTSZ+YCLMCF,FP),R5	; GET NEXT START COLUMN
	SUB.W	@(YCLMCF,FP),R5 	; CALCULATE CURRENT COLUMN
	CLR.W	R4			;
	DIVXU.W #1440/360,R4		; CALCULATE PATTERN LENGTH
	MOV.W	R5,R3			; SAVE PATTERN LENGTH
	MOV.W	@(YCLMCF,FP),R5 	; GET CURRENT COLUMN
	CLR.W	R4			;
	DIVXU.W #1440/360,R4		; CALCULATE PATTERN LENGTH
	MOV.W	R5,R4			;
	MULXU.W #3,R4			;
	ADD.W	#IMGBF,R5		; ADDER IMAGE BUFFER BASE
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	MOV.W	R5,R4			; SAVE STRAT POINTER
	ADD.W	#-1,R3			;
MKUL_4: MOV.B	@R5,R2			; GET 1->8 PIN OLD DATA
	OR.B	R0,R2			; OR WITH OLD DATA TO OVERLINE DATA
	MOV.B	R2,@R5			; SAVE IT
	MOV.B	@(2,R5),R2		; GET 17->24 PIN OLD DATA
	OR.B	R1,R2			; OR WITH OLD DATA TO UNDERLINE DATA
	MOV.B	R2,@(2,R5)		; SAVE IT
	ADDS.B	#3,R5			; UPDATE POINTER
	SCB/F	R3,MKUL_4		; BR. IF NOT END
	MOV.B	@(YSPDPF,FP),R0 	; GET SPEED & PITCH FLAG
	JSR	@SETIPG 		; SET IMAGE BUFFER PAGE
	JSR	@SETSPD 		; SET SPEED
	RTS
	.PAGE
;---------------------------------------
;920312 CONNECTION
LDKNJY: CMP.W	#ZFLSPC,@(YCODEF,FP)	;\
	BEQ	LDKY_2			;\ BR. IF FULL KANJI SPACE
	CMP.B	#H'D4,@(YCODEF,FP)      ;+920416
	BEQ	LDKY_3			;+  "
	CMP.B	#H'26,@(YCODEF,FP)      ;\
	BNE	LDKY_2			;\BR IF NOT KEISEN CODE
LDKY_1: BSR	LDKJ2N:16		;\NORMAL KANJI PROCESS
	BSR	EDTCHK:16		;\CHECK EMPHASIZE/HORIZONTAL ENLARGE/ITALIC MODE
	BSR	EDTKEY:16		;\EDIT FOR KEISEN SETSUZOKU
	BSR	IMGCPY:16		;\COPY PATTERN TO IMAGE BUFFER
	MOV.B	@(YSPDPF,FP),R0 	;\GET SPEED & PITCH FLAG
	JSR	@SETSPD 		;\SET SPEED
LDKY_2: RTS
	.PAGE
;
;
LDKY_3: MOV.W	R3,@-SP 		;+920416 D4-SEMI connection
	MOV.W	@(YCODEF,FP),R3
	SWAP	R3
	CMP.B	#H'B3,R3
	BCC	LDKY_4
LDKY_5: MOV.W	@SP+,R3
	RTS
LDKY_4: CMP.B	#H'DA,R3
	BCC	LDKY_5
	MOV.W	@SP+,R3
	BRA	LDKY_1
;
;	<< KEISEN SETSUZOKU VERTICAL >>
;
;	KEISEN DATA 25->30 PIN = 19->24 PIN DATA ( CODE H'26xx & D4xx)
;
EDTKEY: BTST.B	#RCONN,@UMOD06:8	;  \930406
	BNE	EDXKEN			;    "
;
	BSR	EDTCKA:16		; CHECK EDIT COPY FLAG
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	ADD.W	#-1,R3			;
EDTK_2: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
;
	MOV.B	R2,@R4			; \930406
	AND.B	#H'F0,R2                ;   "
	ROTR.B	R2			;   "
	ROTR.B	R2			;   "
	ROTR.B	R2			;   "
	ROTR.B	R2			;   "
	MOV.B	R2,@(1,R4)		;   "
;
	CLR.B	@(2,R4) 		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,EDTK_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
EDTK_4: RTS
	.PAGE
;
EDXKEN: BSR	EDTCKA:16		; CHECK EDIT COPY FLAG
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	ADD.W	#-1,R3			;
EDXK_2: MOV.B	@(2,R4),R2		; GET 3RD PATTERN
;
	MOV.B	R2,@R4			; \930406
	MOV.B	R2,@(1,R4)		;   "
;
	AND.B	#H'F0,R2                ; \930406
	ROTR.B	R2			;   "
	ROTR.B	R2			;   "
	ROTR.B	R2			;   "
	ROTR.B	R2			;   "
	MOV.B	R2,@(2,R4)		;   "
;
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,EDXK_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
EDXK_4: RTS
	.PAGE
;---------------------------------------
;
; << SUB >>	MAKE NORMAL PATTERN PROCESS < NOT VERTICAL ENLARGE MODE >
;
;	IN	   FP : TEXT BUFFER POINTER
;
;	OUT	   R2 : = 0 -> COPY TO IMAGE BUFFER / NOT = 0 -> NOT COPY
;		   FP : TEXT BUFFER POINTER
;		IMGBF : AFTER EDITING CG PATTERN
;
LDKJ2N: BSR	CLREDT:16		; ALL CLEAR EDIT BUFFER
	MOV.W	@(YMODEF,FP),R1 	; GET MODE FLAG TO TEXT BUFFER
	MOV.W	R1,@-SP 		;+ SAVE MODE FLAG
	BCLR.W	#QK2ULN,@(YMODEF,FP)	; ADJUST MODE FLAG (KANJI LINE)
	BCLR.W	#QKUNDL,@(YMODEF,FP)	; ADJUST MODE FLAG (KANJI UNDERLINE)
	BSR	CHKMDF:16		; CHECK MODE FLAG
	MOV.W	@(YCODEF,FP),R1 	; GET KANJI CODE TO TEXT BUFFER
	MOV.W	R1,R2			; SAVE CODE
	SWAP	R2			;
	CMP.B	#ZGJCD,R2		; CHECK KANJI CODE
	BNE	KJ2N_2			; BR. IF NOT GAIJI CODE
	JSR	@LDGIJ			; GOTO GAIJI PROCESS
	BRA	KJ2N_C
	;
KJ2N_2: CMP.B	#ZCMBFM,@(YFMATF,FP)	; CHECK FORMAT TO TEXT BUFFER
	BNE	KJ2N_3			; BR. IF NOT COMBINE FORMAT
	BSR	KJCMB:16		; BR. IF COMBINE MODE
	BRA	KJ2N_C
	;
KJ2N_3: CLR.W	R4			; RESET OFFSET
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	KJ2N_4			; BR. IF NOT VERTICAL FORMAT
	BSET.B	#3,R4			; SET VERTICAL FORMAT BITS
KJ2N_4: BTST.W	#QKJ14L,@(YMODEF,FP)	;
	BEQ	KJ2N_6			; BR. IF NOT 1/4 LOW MODE
	BSET.B	#2,R4			; SET 1/4 LOW BITS
KJ2N_6: BTST.W	#QKJ14,@(YMODEF,FP)	;
	BEQ	KJ2N_8			; BR. IF NOT 1/4 MODE
	BSET.B	#1,R4			; SET 1/4 MODE BITS
KJ2N_8: BTST.W	#QKHALF,@(YMODEF,FP)	;
	BEQ	KJ2N_A			; BR. IF NOT HALF
KJ2N_81:
	BSET.B	#0,R4			; SET HALF BITS
KJ2N_A: MULXU.B #3,R4			; CALCULATE TABLE OFFSET
	JSR	@(MODTB:16,R4)		; GOTO EACH PROCESS
KJ2N_C: LDC.B	#0,DP			; RESET < DP >
	MOV.W	@SP+,R1 		;+ UNSAVE MODE FLAG
	MOV.W	R1,@(YMODEF,FP) 	; SAVE MODE FLAG
	RTS
	.PAGE
;
;	<< MODE JUMP TABLE >>
;
MODTB:	BRA	KJFLH:16		; KANJI FULL		< Horizontal >
	BRA	KJHFH:16		; KANJI HALF		< Horizontal >
	BRA	K14HH:16		; KANJI 1/4 HIGH	< Horizontal >
	BRA	K14HH:16		; KANJI 1/4 HIGH	< Horizontal >
	BRA	KJFLH:16		; KANJI FULL		< Horizontal >
	BRA	KJHFH:16		; KANJI HALF		< Horizontal >
	BRA	K14LH:16		; KANJI 1/4 LOW 	< Horizontal >
	BRA	K14LH:16		; KANJI 1/4 LOW 	< Horizontal >
	;
	BRA	KJFLV:16		; KANJI FULL		< Vertical >
	BRA	KJHFV:16		; KANJI HALF		< Vertical >
	BRA	K14HV:16		; KANJI 1/4 HIGH	< Vertical >
	BRA	K14HV:16		; KANJI 1/4 HIGH	< Vertical >
	BRA	KJFLV:16		; KANJI FULL		< Vertical >
	BRA	KJHFV:16		; KANJI HALF		< Vertical >
	BRA	K14LV:16		; KANJI 1/4 LOW 	< Vertical >
	BRA	K14LV:16		; KANJI 1/4 LOW 	< Vertical >
;
; << SUB >>	CHECK EMPHASIZE or HORIZONTAL ENLARGE or ITALIC MODE
;
;	IN	   R2 : COPY FLAG (0 ... NOT EDIT COPY)
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : EACH PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		   R4 : PATTERN START POINTER
;		   R5 : PATTERN END   POINTER
;		   FP : TEXT BUFFER POINTER
;		IMGBF : MAKE EACH PATTERN
;
;	USE	R0->FP,DP,EP
;
EDTCHK: BSR	MDCHK:16		; CHECK MODE FLAG
	MULXU.B #3,R1			; OFFSET x 3 = TABLE OFFSET
	JSR	@(MODFLG:16,R1) 	; EXECUTE MAKE EACH PATTERN PROCESS
	LDC.B	#0,DP			; RESET < DP >
	RTS
;
;	<< EDITING MODE FLAG TABLE >>
;
MODFLG: BRA	EDTCK7:16		; (00) NORMAL
	BRA	EDTCK0:16		; (01) EMPHASIZE
	BRA	EDTCK1:16		; (02) HORIZONTAL ENLARGE
	BRA	EDTCK2:16		; (03) EMPHASIZE & HORIZONTAL ENLARGE
	BRA	EDTCK3:16		; (04) ITALIC
	BRA	EDTCK4:16		; (05) EMPHASIZE & ITALIC
	BRA	EDTCK5:16		; (06) HORIZONTAL ENLARGE & ITALIC
	BRA	EDTCK6:16		; (07) EMPHASIZE & HORIZONTAL ENLARGE & ITALIC
	.PAGE
;
;	<< NORMAL >>
;
EDTCK7:
	BTST.B	#QPMSKF,@(YMODKF,FP)	;\ 9/MAR/1992 MASKING BLOCK
	BNE	EDTC_Z			;\
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 9/MAR/1992 REVERSE
	BNE	EDTC_Z			;\
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BEQ	EDTC_2			; BR. IF NOT STYLE MODE
EDTC_Z: BSR	EDTCPY:16		; COPY PATTERN TO EDIT BUFFER
	BTST.B	#QPMSKF,@(YMODKF,FP)	;\ 9/MAR/1992 MASKING BLOCK
	BEQ	EDTC_2			;\
	JSR	@MSKBL

EDTC_2: RTS
;
;	<< EMPHASIZE >>
;
EDTCK0: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@EMPKJ			; MAKE EMPHASIZE PATTERN
	RTS
;
;	<< HORIZONTAL ENLARGE >>
;
EDTCK1: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@HELKJ			; MAKE HORIZONTAL ENLARGE PATTERN
	RTS
;
;	<< EMPHASIZE & HORIZONTAL ENLARGE >>
;
EDTCK2: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@HEPKJ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	RTS
;
;	<< ITALIC >>
;
EDTCK3: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@KJITL			; MAKE ITALIC PATTERN
	RTS
;
;	<< EMPHASIZE & ITALIC >>
;
EDTCK4: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@EMPKJ			; MAKE EMPHASIZE PATTERN
	JSR	@KJITL			; MAKE ITALIC PATTERN
	RTS
;
;	<< HORIZONTAL ENLARGE & ITALIC >>
;
EDTCK5: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@HELKJ			; MAKE HORIZONTAL ENLARGE PATTERN
	JSR	@KJITL			; MAKE ITALIC PATTERN
	RTS
;
;	<< EMPHASIZE & HORIZONTAL ENLARGE & ITALIC >>
;
EDTCK6: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	JSR	@HEPKJ			; MAKE EMPHASIZE & HORIZONTAL ENLARGE PATTERN
	JSR	@KJITL			; MAKE ITALIC PATTERN
	RTS
;
;	<< CHECK EDIT COPY FLAG >>
;
EDTCKA: TST.B	R2			;
	BNE	EDCK_2			; BR. IF COPY END
	BSR	EDTCPY:16		; COPY PATTERN TO EDIT BUFFER
EDCK_2: RTS
	.PAGE
;
; << SUB >>	KANJI FULL			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
KJFLH:	BSR	CVKCDH:16		; CONVERSION KANJI CODE (HORIZONTAL)
	MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
;
; << SUB >>	KANJI FULL			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
KJFLV:	BSR	CVKCDV:16		; CONVERSION KANJI CODE (VERTICAL)
	MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	EDTCPY:16		; COPY PATTERN TO EDIT BUFFER
	BSR	MKVRT:16		; MAKE PATTERN TO VERTICAL FORMAT
	RTS
	.PAGE
;
; << SUB >>	KANJI HALF			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
KJHFH:	BSR	CVKCDH:16		; CONVERSION KANJI CODE (HORIZONTAL)
	TST.B	R3			;
	BEQ	KJHH_2			; BR. IF FULL CG
	MOV.W	#ZKHALF,R3		; SET SPECIAL HALF CG LENGTH (= 12)
	CLR.W	R2			; SET NO COPY FLAG
	RTS
;
;	< FULL CG >
;
KJHH_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MKHFH:16		; MAKE FULL -> HALF PATTERN
	MOV.W	#ZKHALF,R3		; SET SPECIAL HALF CG LENGTH (= 12)
	RTS
;
; << SUB >>	KANJI HALF			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
KJHFV:	BSR	CVKCDV:16		; CONVERSION KANJI CODE (VERTICAL)
	TST.B	R3			;
	BEQ	KJHV_2			; BR. IF FULL CG
	MOV.W	#ZKHALF,R3		; SET SPECIAL HALF CG LENGTH (= 12)
	BSR	EDTCPH:16		; COPY HALF CG TO EDIT BUFFER
	MOV.W	#ZKFULL,R3		; SET FULL CG COLUNM (= 24)
	BSR	MKVRT:16		; MAKE PATTERN TO VERTICAL FORMAT
	RTS
;
;	< FULL CG >
;
KJHV_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MKHFV:16		; MAKE FULL -> HALF PATTERN
	BSR	MKVRT:16		; MAKE PATTERN TO VERTICAL FORMAT
	RTS
	.PAGE
;
; << SUB >>	KANJI 1/4 HIGH			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
K14HH:	BSR	CVKCDH:16		; CONVERSION KANJI CODE (HORIZONTAL)
	TST.B	R3			;
	BEQ	K4HH_2			; BR. IF FULL CG
	MOV.W	#ZKJ14,R3		; SET SPECIAL 1/4 CG LENGTH (= 12)
	BSR	EDC4HH:16		; COPY PATTERN TO EDIT BUFFER
	RTS
;
;	< FULL CG >
;
K4HH_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MK14HH:16		; MAKE FULL -> 1/4 HIGH PATTERN
	MOV.W	#ZKJ14,R3		; SET 1/4 CG LENGTH (= 12)
	RTS
;
; << SUB >>	KANJI 1/4 HIGH			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
K14HV:	BSR	CVKCDV:16		; CONVERSION KANJI CODE (VERTICAL)
	TST.B	R3			;
	BEQ	K4HV_2			; BR. IF FULL CG
	MOV.W	#ZKJ14,R3		; SET SPECIAL 1/4 CG LENGTH (= 12)
	BSR	EDC4HV:16		; COPY PATTERN TO EDIT BUFFER
	BSR	MKVRT4:16		; MAKE PATTERN TO VERTICAL FORMAT (1/4)
	RTS
;
;	< FULL CG >
;
K4HV_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MK14HV:16		; MAKE FULL -> 1/4 HIGH PATTERN
	MOV.W	#ZKJ14,R3		; SET 1/4 CG LENGTH (= 12)
	BSR	MKVRT4:16		; MAKE PATTERN TO VERTICAL FORMAT (1/4)
	RTS
	.PAGE
;
; << SUB >>	KANJI 1/4 LOW			< HORIZONTAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
K14LH:	BSR	CVKCDH:16		; CONVERSION KANJI CODE (HORIZONTAL)
	TST.B	R3			;
	BEQ	K4LH_2:16		; BR. IF FULL CG
	MOV.W	#ZKJ14,R3		; SET SPECIAL 1/4 CG LENGTH (= 12)
	BSR	EDC4LH:16		; COPY PATTERN TO EDIT BUFFER
	CMP.W	#H'213F,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'213F
	CMP.W	#H'214A,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'214A
	CMP.W	#H'214B,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'214B
	CMP.W	#H'215C,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'215C
	CMP.W	#H'215D,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'215D
	CMP.W	#H'215E,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'215E
	CMP.W	#H'2161,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'2161
	CMP.W	#H'2165,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'2165
	CMP.W	#H'2166,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'2166
	CMP.W	#H'2167,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'2167
	CMP.W	#H'2174,@(YCODEF,FP)    ;
	BEQ	K4LH_4			; BR. IF SPECIAL CG FOR H'2174
	CMP.W	#H'2176,@(YCODEF,FP)    ;
	BNE	K4LH_6			; BR. IF NOT SPECIAL CG FOR H'2176
K4LH_4: MOV.W	R4,@-SP 		;+ SAVE PATTERN POINTER
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	ADD.W	#-1,R3			;
K4LH_5: SHLL.B	@(1,R4) 		; SHIFT FOR LEFT TO 4 TIMES
	ROTXL.B @(2,R4) 		; ROTATE FOR LEFT TO CARRY
	SHLL.B	@(1,R4) 		;
	ROTXL.B @(2,R4) 		;
	SHLL.B	@(1,R4) 		;
	ROTXL.B @(2,R4) 		;
	SHLL.B	@(1,R4) 		; MAKE 9->16 PIN DATA
	ROTXL.B @(2,R4) 		;	 TO 13->20 PIN DATA
	ADDS.B	#3,R4			; UPDATE PATTERN POINTER
	SCB/F	R3,K4LH_5		; BR. IF PATTERN END
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	@SP+,R4 		;+ UNSAVE PATTERN POINTER
K4LH_6: RTS
;
;	< FULL CG >
;
K4LH_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MK14LH:16		; MAKE FULL -> 1/4 LOW PATTERN
	MOV.W	#ZKJ14,R3		; SET 1/4 CG LENGTH (= 12)
	RTS
;
; << SUB >>	KANJI 1/4 LOW			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
K14LV:	BSR	CVKCDV:16		; CONVERSION KANJI CODE (VERTICAL)
	TST.B	R3			;
	BEQ	K4LV_2			; BR. IF FULL CG
	MOV.W	#ZKJ14,R3		; SET SPECIAL 1/4 CG LENGTH (= 12)
	BSR	EDC4LV:16		; COPY PATTERN TO EDIT BUFFER
	BSR	MKVRT4:16		; MAKE PATTERN TO VERTICAL FORMAT (1/4)
	RTS
;
;	< FULL CG >
;
K4LV_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH
	BSR	MK14LV:16		; MAKE FULL -> 1/4 HIGH PATTERN
	MOV.W	#ZKJ14,R3		; SET 1/4 CG LENGTH (= 12)
	BSR	MKVRT4:16		; MAKE PATTERN TO VERTICAL FORMAT (1/4)
	RTS
	.PAGE
;
; << SUB >>	KANJI COMBINE			< VERTICAL >
;
;	IN	R1 : KANJI CODE
;		FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
KJCMB:	BTST.W	#QKJ2ND,@(YMODEF,FP)	;
	BNE	KJCM_4			; BR. IF KANJI COMBINE 2ND CODE
	BSR	CNVKCD:16		; CONVERSION KANJI CODE
	TST.B	R3			;
	BEQ	KJCM_2			; BR. IF FULL CG
	MOV.W	#ZKHALF,R3		; SET SPECIAL HALF CG LENGTH (= 12)
	BSR	EDTCPY			; COPY SPECIAL HALF CG TO EDIT BUFFER
	BRA	KJCM_A
;
;	< FULL CG >
;
KJCM_2: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MKHFH:16		; MAKE FULL -> HALF PATTERN
	BRA	KJCM_A
;
;	< 2ND CODE >
;
KJCM_4: BSR	CNVKCD:16		; CONVERSION KANJI CODE
	TST.W	R3			;
	BEQ	KJCM_6			; BR. IF FULL CG
	MOV.W	#ZKHALF,R3		; SET SPECIAL HALF CG LENGTH (= 12)
	BSR	EDTCP1			; COPY SPECIAL HALF CG TO EDIT BUFFER
	BRA	KJCM_A
	;
KJCM_6: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24)
	BSR	MKHFH1			; MAKE FULL -> HALF PATTERN
KJCM_A: MOV.W	#ZKFULL,R3		; SET FULL CG LENGTH (= 24 -> COMBINE)
	BSR	MKVRT:16		; MAKE PATTERN TO VERTICAL FORMAT
	RTS
	.PAGE
;
; << SUB >>	COPY PATTERN TO EDIT BUFFER 1		< FULL CG / SPECIAL HALF CG >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;			EDTCP1 : COMBINE 2ND CODE (RIGHT)
;			EDTCPY : FULL CG / SPECIAK HALF CG FOR HORIZONTAL (LEFT)
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
EDTCP1: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#ZKHALF*3,R0		; SET ADJUST EDIT 1 POINTER
	BRA	EDCP_2
	;
EDTCPY: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
EDCP_2: SHLR.W	R3			; LENGTH / 2
	ADD.W	#-1,R3			; ADJUST COUNTER
EDCP_4: MOV.W	@R4+,R2 		; GET PATTERN
	MOV.W	R2,@R0+ 		; SAVE IT
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	SCB/F	R3,EDCP_4		; BR. IF NOT END
SETPTR: MOV.W	@SP+,R4 		;+ UNSAVE DESTIN. POINTER (NEW SOURCE)
	POPEP				;+ UNSAVE < DP > (NEW EP)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	#01,R2			; SET EDITING MODE
	RTS
	.PAGE
;
; << SUB >>	COPY HALF PATTERN TO EDIT BUFFER 1	< SPECIAL HALF CG -> VERTICAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
EDTCPH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	#6/2-1,R2		; SET CLEAR SIZE
	MOV.W	R2,@-SP 		;+ SAVE CLEAR SIZE
EDCH_2: CLR.W	@R0+			; CLEAR AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,EDCH_2		; BR. IF NOT END
	SHLR.W	R3			; LENGTH / 2
	ADD.W	#-1,R3			; ADJUST COUNTER
EDCH_4: MOV.W	@R4+,R2 		; GET PATTERN
	MOV.W	R2,@R0+ 		; SAVE IT
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	MOV.W	@R4+,R2 		;
	MOV.W	R2,@R0+ 		;
	SCB/F	R3,EDCH_4		; BR. IF NOT END
	MOV.W	@SP+,R2 		;+ UNSAVE CLEAR SIZE
EDCH_6: CLR.W	@R0+			; CLEAR AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,EDCH_6		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	MAKE HALF & COPY PATTERN TO EDIT BUFFER 1	< HORIZONTAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;			MKHFH1 : FULL CG -> HALF CG FOR COMBINE 2ND (RIGHT)
;			MKHFH  : FULL CG -> HALF CG FOR HORIZONTAL (LEFT)
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MKHFH1: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#ZKHALF*3,R0		; SET ADJUST EDIT 1 POINTER
	BRA	MKHF_2
	;
MKHFH:	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
MKHF_2: MOV.W	R4,R5			; SAVE START POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST NEXT PATTERN POINTER (DESTIN.)
	SHLR.W	R3			; LENGTH / 2
	MOV.W	R3,@-SP 		;+ SAVE COMPRESS LENGTH
	ADD.W	#-1,R3			; ADJUST COUNTER
MKHF_4: MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH PATTERN TO NEXT PATTERN
	MOV.B	R2,@R0+ 		; SAVE PATTERN
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		;
	MOV.B	R2,@R0+ 		;
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		;
	MOV.B	R2,@R0+ 		;
	MOV.W	R5,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,MKHF_4		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE COMPRESS LENGTH
MKHF_6: CLR.W	@R0+			; CLEAR OLD PATTERN
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R3,MKHF_6		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	MAKE HALF & COPY PATTERN TO EDIT BUFFER 1	< VERTICAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MKHFV:	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE START POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST NEXT PATTERN POINTER (DESTIN.)
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	#6/2-1,R2		; SET CLEAR SIZE
	MOV.W	R2,@-SP 		;+ SAVE CLEAR SIZE
MKHV_2: CLR.W	@R0+			; CLEAR AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,MKHV_2		; BR. IF NOT END
	SHLR.W	R3			; LENGTH / 2
	ADD.W	#-1,R3			; ADJUST COUNTER
MKHV_4: MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH PATTERN TO NEXT PATTERN
	MOV.B	R2,@R0+ 		; SAVE PATTERN
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		;
	MOV.B	R2,@R0+ 		;
	MOV.B	@R4+,R2 		;
	OR.B	@R5+,R2 		;
	MOV.B	R2,@R0+ 		;
	MOV.W	R5,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,MKHV_4		; BR. IF NOT END
	MOV.W	@SP+,R2 		;+ UNSAVE CLEAR SIZE
MKHV_6: CLR.W	@R0+			; CLEAR AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,MKHV_6		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	MAKE 1/4 LOW & COPY PATTERN TO EDIT BUFFER 1	< HORIZONTAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MK14LH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTHZE
	MOV.W	R4,R5			; SAVE START POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST NEXT PATTERN POINTER (DESTIN.)
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R3,@-SP 		;+ SAVE COMPRESS LENGTH
	SHLR.W	R3			; LENGTH / 2
	ADD.W	#-1,R3			; ADJUST COUNTER
	MOV.W	#VCMTB,R2		; SET VERTICAL COMPRESS TABLE POINTER
MK4L_2: MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	@R2,R1			; GET COMPRESS DATA
	AND.B	#H'F0,R1                ; MASK HIGH NIBBLE
	CLR.B	@R0+			; SAVE 1->8 PIN DATA
	MOV.B	R1,@R0+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	@R2,R1			; GET COMPRESS DATA
	AND.B	#H'0F,R1                ; MASK LOW NIBBLE
	MOV.B	R1,@R0			;
	MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	@R2,R1			; GET COMPRESS DATA
	AND.B	#H'F0,R1                ; MASK HIGH NIBBLE
	OR.B	@R0,R1			;
	MOV.B	R1,@R0+ 		; SAVE 17->24 PIN DATA
	MOV.W	R5,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,MK4L_2		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE COMPRESS LENGTH
	SHLR.W	R3			;
	ADD.W	#-1,R3			;
MK4L_6: CLR.W	@R0+			; CLEAR OLD PATTERN
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R3,MK4L_6		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	MAKE 1/4 HIGH & COPY PATTERN TO EDIT BUFFER 1
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;			MK14HH : FULL CG -> 1/4 CG FOR HORIZONTAL (HIGH-LEFT)
;			MK14LV : FULL CG -> 1/4 CG FOR VERTICAL (LOW-LEFT)
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MK14LV:
MK14HH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE START POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST NEXT PATTERN POINTER (DESTIN.)
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
MK4H_4: MOV.W	R3,@-SP 		;+ SAVE COMPRESS LENGTH
	SHLR.W	R3			; LENGTH / 2
	ADD.W	#-1,R3			; ADJUST COUNTER
	MOV.W	#VCMTB,R2		; SET VERTICAL COMPRESS TABLE POINTER
MK4H_2: MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	@R2,R1			; GET COMPRESS DATA
	AND.B	#H'0F,R1                ; MASK LOW NIBBLE
	MOV.B	R1,@R0			;
	MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	@R2,R1			; GET COMPRESS DATA
	AND.B	#H'F0,R1                ; MASK HIGH NIBBLE
	OR.B	@R0,R1			;
	MOV.B	R1,@R0+ 		; SAVE 1->8 PIN DATA
	MOV.B	@R4+,R2 		; GET PATTERN
	OR.B	@R5+,R2 		; OR WITH NEXT PATTERN TO PATTERN
	MOV.B	@R2,R1			; GET COMPRESS DATA
	AND.B	#H'0F,R1                ; GET LOW NIBBLE
	MOV.B	R1,@R0+ 		; SAVE 9->16 PIN DATA
	CLR.B	@R0+			; SAVE 17->24 PIN DATA
	MOV.W	R5,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,MK4H_2		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE COMPRESS LENGTH
	SHLR.W	R3			;
	ADD.W	#-1,R3			;
MK4H_6: CLR.W	@R0+			; CLEAR OLD PATTERN
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R3,MK4H_6		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	MAKE 1/4 HIGH & COPY PATTERN TO EDIT BUFFER 1	< VERTICAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
MK14HV: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE START POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST NEXT PATTERN POINTER (DESTIN.)
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	#12/2-1,R2		; SET CLEAR SIZE
MK4V_2: CLR.W	@R0+			; CLEAR UNDERFLOW AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,MK4V_2		; BR. IF NOT END
	BRA	MK4H_4
;
; << SUB >>	COPY 1/4 HIGH PATTERN TO EDIT BUFFER 1	< SPECIAL 1/4 CG -> HORIZONTAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
EDC4LH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			; ADJUST COUNTER
EDCL_2: CLR.B	@R0+			; SAVE PATTERN
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		;
	SCB/F	R3,EDCL_2		; BR. IF NOT END
	BRA	SETPTR
	.PAGE
;
; << SUB >>	COPY 1/4 LOW PATTERN TO EDIT BUFFER 1
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;			EDC4HH : SPECIAL 1/4 CG FOR HORIZONTAL (HIGH-LEFT)
;			EDC4LV : SPECIAL 1/4 CG FOR VERTICAL (LOW-LEFT)
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
EDC4LV:
EDC4HH: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
EDCL_4: ADD.W	#-1,R3			; ADJUST COUNTER
EDCL_6: MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		; SAVE IT
	MOV.B	@R4+,R2 		; GET PATTERN
	MOV.B	R2,@R0+ 		;
	CLR.B	@R0+			; SAVE PATTERN
	SCB/F	R3,EDCL_6		; BR. IF NOT END
	BRA	SETPTR
;
; << SUB >>	COPY 1/4 LOW PATTERN TO EDIT BUFFER 1	< SPECIAL 1/4 CG -> VERTICAL >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
EDC4HV: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE START POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST NEXT PATTERN POINTER (DESTIN.)
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
	PUSHDP				;+ SAVE < DP >
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	#12/2-1,R2		; SET CLEAR SIZE
EDCV_2: CLR.W	@R0+			; CLEAR UNDERFLOW AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R2,EDCV_2		; BR. IF NOT END
	BRA	EDCL_4
	.PAGE
;
; << SUB >>	COPY EDBF1 TO EDBF2
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EDBF1 : EACH PATTERN
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDBF2)
;		EDBF1 : ALL CLEAR
;		EDBF2 : EACH PATTERN
;
;	USE	R1->R3
;
CP1T2:	MOV.W	#EDBF1+6,R1		; SET EDIT BUFFER 1 POINTER (SOURCE)
	MOV.W	#EDBF2+6,R2		; SET EDIT BUFFER 2 POINTER (DESTIN.)
	BRA	CP21_2
;
; << SUB >>	COPY EDBF2 TO EDBF1
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EDBF2 : EACH PATTERN
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDBF1)
;		EDBF1 : EACH PATTERN
;		EDBF2 : ALL CLEAR
;
;	USE	R1->R3
;
CP2T1:	MOV.W	#EDBF2+6,R1		; SET EDIT BUFFER 2 POINTER (SOURCE)
	MOV.W	#EDBF1+6,R2		; SET EDIT BUFFER 1 POINTER (DESTIN.)
CP21_2: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R1,@-SP 		;+ SAVE CLEAR AREA POINTER
	ADD.W	#-1,R3			;
CP21_4: MOV.B	@R1+,R0 		; GET PATTERN
	MOV.B	R0,@R2+ 		; SAVE IT
	MOV.B	@R1+,R0 		;
	MOV.B	R0,@R2+ 		;
	MOV.B	@R1+,R0 		;
	MOV.B	R0,@R2+ 		;
	SCB/F	R3,CP21_4		; BR. IF NOT END
	MOV.W	#114/2-6,R3		; SET CLEAR LENGTH (/ 2)
	ADD.W	#-1,R3			;
	MOV.W	@SP+,R1 		;+ UNSAVE CLEAR AREA POINTER
CP21_6: CLR.W	@R1+			; CLEAR AREA
	CLR.W	@R1+			;
	CLR.W	@R1+			;
	SCB/F	R3,CP21_6		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
;
; << SUB >>	CLEAR EDIT BUFFER 1
;
;	USE	R0,R3,DP
;
CLREDT: MOV.W	#114-1-1,R3		; SET CLEAR PATTERN LENGTH
	BSR	SETDS1:16		; SET DESTIN. POINTER (EDIT 1)
CLED_2: CLR.W	@R0+			; CLEAR AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	SCB/F	R3,CLED_2		; BR. IF NOT END
	RTS
	.PAGE
;
;----------------------------------------
;920312 CONNECT
; << SUB >>	COPY PATTERN TO IMAGE BUFFER
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (CG / EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) (IN x 2 -> 2 COLUMN COPY)
;		   R4 : PATTERN START POINTER
;		   R5 : PATTERN END   POINTER
;		   FP : TEXT BUFFER POINTER
;		IMGBF : EACH PATTERN
;
;	USE	R0->FP,EP,DP
;
;	DP R0 : IMAGE BUFFER POINTER
;
IMGCPY:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	IMGI_Z			;\ BR IF NOT REVERSED MODE
	JSR	@REVERS 		;\ MAKE REVERS PATTERN
IMGI_Z: MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BEQ	IMGC_2			; BR. IF NOT OUTLINE/SHADOW
IMGCP2: JSR	@KOUTSH 		; MAKE OUTLINE & SHADOW
IMGC_2: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	BSR	SETDSK:16		; SET DESTIN. POINTER (IMAGE BUFFER)
	MOV.W	R0,@-SP 		;+ SAVE DESTIN. POINTER
	CMP.B	#ZKFULL,R3		;
	BEQ	CPYKNJ:16		; BR. IF KANJI FULL
	MOV.B	@(YSPDPF,FP),R5 	; GET SPEED/PITCH FLAG
	AND.B	#ZSPDMK,R5		; MASK SPEED FLAG
	CMP.B	#Z15SPD,R5		;
	BEQ	IMGC_8:16		; BR. IF KANJI MIDDLE SPEED
	MOV.B	@(YPRESP,FP),R2 	; GET PRE. SPACE
	BEQ	IMGC_5			; BR. IF PRE. SPACE = 0
	EXTU	R2			;
	BTST.W	#QKEISN,@(YMODEF,FP)	;\
	BEQ	IMGC_3A 		;\BR. IF NOT KEISEN SETSUZOKU MODE
	ADD.W	#-1,R2			;\
IMGC_3: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,IMGC_3		;\BR. IF NOT END
	BRA	IMGC_Y
;
;--------------------
IMGC_3A:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	IMGC_5			;\ BR IF NOT REVERSED MODE
	SHLL.W	R2
	ADD.W	#-1,R2			;\
IMGC_31:
	MOV.B	#H'FF,R5
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,IMGC_31		;\BR. IF NOT END
	BRA	IMGC_Y
;--------------------
IMGC_5: EXTU	R2			;\
	MULXU.B #3+3,R2 		;\CALCULATE LEFT SPACE x 8
	ADD.W	R2,R0			;\
IMGC_Y: ADD.W	#-1,R3			;\
IMGC_4: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R3,IMGC_4		;\BR. IF NOT END
	MOV.B	@(YBCKSP,FP),R2 	;\GET BACK SPACE
	BEQ	IMGC_7			;\BR. IF PRE. SPACE = 0
	EXTU	R2			;\
	BTST.W	#QKEISN,@(YMODEF,FP)	;\
;330?	BEQ	IMGC_6A 		;\BR. IF NOT KEISEN SETSUZOKU MODE
	BEQ	IMGC_7
	SUBS.B	#3,R4			;\ADJUST
	ADD.W	#-1,R2			;\
IMGC_6: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,IMGC_6		;\BR. IF NOT END
	BRA	IMGC_7
;--------------------
IMGC_6A:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	IMGC_7			;\ BR IF NOT REVERSED MODE
	SHLL.W	R2
	ADD.W	#-1,R2			;\
IMGC_61:
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,IMGC_61		;\BR. IF NOT END
;--------------------
IMGC_7: MOV.W	R0,R5			; SAVE END POINTER
;	MOV.W	R3,FP			;-921126
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	ADD.W	R2,R3			; ADJUST
	SHLL.W	R3			; LENGTH x 2
	LDC.B	#0,DP			; RESET < DP >
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE				;
;
;	<< KANJI MIDDLE SPEED >>		< 2 COLUMN COPY >
;
IMGC_8:
	MOV.B	@(YPRESP,FP),R2 	; GET PRE. SPACE
	BEQ	IMGC_A			; BR. IF PRE. SPACE = 0
	EXTU	R2			;
	BTST.W	#QKEISN,@(YMODEF,FP)	;\
	BEQ	IMGC_9A 		;\BR. IF NOT KEISEN SETSUZOKU MODE
	ADD.W	#-1,R2			;\
IMGC_9: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA

	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA
	SCB/F	R2,IMGC_9		;\BR. IF NOT END
	BRA	IMGC_X			;\
;
;------
IMGC_9A:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	IMGC_A			;\ BR IF NOT REVERSED MODE
	SHLL.W	R2
	ADD.W	#-1,R2			;\
IMGC_91:
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA

	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	SCB/F	R2,IMGC_91		;\BR. IF NOT END
	BRA	IMGC_X
;------
IMGC_A: EXTU	R2			;\
	MULXU.B #3+3,R2 		;\CALCULATE LEFT SPACE x 8
	ADD.W	R2,R0			;\
IMGC_X: ADD.W	#-1,R3			;\
IMGC_B: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA

	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA
	SCB/F	R3,IMGC_B		;\BR. IF NOT END
	MOV.B	@(YBCKSP,FP),R2 	;\GET BACK SPACE
	BEQ	IMGC_D			;\BR. IF PRE. SPACE = 0
	EXTU	R2			;
	BTST.W	#QKEISN,@(YMODEF,FP)	;
;330?	BEQ	IMGC_CA 		;\BR. IF NOT KEISEN SETSUZOKU MODE
	BEQ	IMGC_D
	SUBS.B	#3,R4			;\ADJUST
	ADD.W	#-1,R2			;\
IMGC_C: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA

	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA
	SCB/F	R2,IMGC_C		;\BR. IF NOT END
;
IMGC_D: MOV.W	R0,R5			; SAVE END POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	ADD.W	R2,R3			; ADJUST
	SHLL.W	R3			; LENGTH x 2
	LDC.B	#0,DP			; RESET < DP >
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;------
IMGC_CA:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	IMGC_D			;\ BR IF NOT REVERSED MODE
	SHLL.W	R2
	ADD.W	#-1,R2			;\
IMGC_C1:
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 17->24 PIN DATA

	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	SCB/F	R2,IMGC_C1		;\BR. IF NOT END
	BRA	IMGC_D
;------
	.PAGE
;
;	<< NORMAL FULL >>
;
CPYKNJ: MOV.B	@(YSPDPF,FP),R5 	;\GET SPEED/PITCH FLAG
	AND.B	#ZSPDMK,R5		;\MASK SPEED FLAG
	CMP.B	#Z15SPD,R5		;\
	BEQ	IMGC_8			;\BR. IF KANJI MIDDLE SPEED
	MOV.B	@(YPRESP,FP),R2 	;\GET PRE. SPACE
	BEQ	CPYK_5			;\BR. IF PRE. SPACE = 0
	EXTU	R2			;\
	BTST.W	#QKEISN,@(YMODEF,FP)	;\
	BEQ	CPYK_3A 		;\BR. IF NOT KEISEN SETSUZOKU MODE
	ADD.W	#-1,R2			;\
CPYK_3: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,CPYK_3		;\BR. IF NOT END
	BRA	CPYK_Y
;--------------------
CPYK_3A:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	CPYK_5			;\ BR IF NOT REVERSED MODE
	SHLL.W	R2
	ADD.W	#-1,R2			;\
CPYK_31:
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,CPYK_31		;\BR. IF NOT END
	BRA	CPYK_Y
;--------------------
;
CPYK_5: EXTU	R2			;\
	MULXU.B #3+3,R2 		;\CALCULATE LEFT SPACE x 8
	ADD.W	R2,R0			;\
CPYK_Y:
	.AREPEAT	24
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4+,R5 		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	.AENDR

	MOV.B	@(YBCKSP,FP),R2 	;\GET BACK SPACE
	BEQ	CPYK_7			;\BR. IF PRE. SPACE = 0
	EXTU	R2			;\
	BTST.W	#QKEISN,@(YMODEF,FP)	;\
;330?	BEQ	CPYK_6A 		;\BR. IF NOT KEISEN SETSUZOKU MODE
	BEQ	CPYK_7
	SUBS.B	#3,R4			;\ADJUST
	ADD.W	#-1,R2			;\
CPYK_6: MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@R4,R5			;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(1,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	@R0,R5			;\GET OLD DATA
	OR.B	@(2,R4),R5		;\OR WITH OLD DATA TO DATA
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,CPYK_6		;\BR. IF NOT END
	BRA	CPYK_7
;--------------------
CPYK_6A:
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BEQ	CPYK_7			;\ BR IF NOT REVERSED MODE
	SHLL.W	R2
	ADD.W	#-1,R2			;\
CPYK_61:
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 1->8 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0+ 		;\SAVE 9->16 PIN DATA
	MOV.B	#H'FF,R5                ;
	MOV.B	R5,@R0			;\SAVE 17->24 PIN DATA
	ADDS.B	#4,R0			;\UPDATE IMAGE BUFFER POINTER
	SCB/F	R2,CPYK_61		;\BR. IF NOT END
;--------------------
;
CPYK_7: MOV.W	R0,R5			;\SAVE END POINTER
;	MOV.W	R3,FP			;-921126
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	ADD.W	R2,R3			;
	SHLL.W	R3			; LENGTH x 2
	LDC.B	#0,DP			; RESET < DP >
	CLR.W	R2			; SET NORMAL COPY FLAG
	RTS
	.PAGE
;CONNECT
;---------------------------------------
;
; << SUB >>	MAKE KANJI VERTICAL ENLARGE PATTERN
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP
;
KJVEL:	BSR	EDTCKA			; CHECK EDIT COPY FLAG
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	MOV.W	#VELTB1,R2		; SET VERTICAL ENLARGE BASE TABLE
	ADD.W	#-1,R3			;
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BNE	KJVL_4			; BR. IF OUTLINE/SHADOW
KJVL_2: MOV.B	@R4,R2			; GET 1ST PATTERN
	MOV.B	@R2,R1			; GET LOW NIBBLE (1ST)
	MOV.B	R1,@R4+ 		; SAVE 1->8 PIN DATA
	MOV.B	@(256,R2),R1		; GET HIGH NIBBLE (1ST)
	MOV.B	@R4,R2			; GET 2ND PATTERN
	MOV.B	R1,@R4+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R2,R1			; GET LOW NIBBLE (2ND)
	MOV.B	R1,@R4+ 		; SAVE 17->24 PIN DATA
	SCB/F	R3,KJVL_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
	;
KJVL_4: CLR.B	R0			; CLEAR MASK DATA
	BTST.B	#4,@(1,R4)		;
	BEQ	KJVL_6			; BR. IF 13 PIN DATA OFF
	BSET.B	#7,R0			; SET MASK DATA
KJVL_6: MOV.B	@R4,R2			; GET 1ST PATTERN
	MOV.B	@R2,R1			; GET LOW NIBBLE (1ST)
	MOV.B	R1,@R4+ 		; SAVE 1->8 PIN DATA
	MOV.B	@(256,R2),R1		; GET HIGH NIBBLE (1ST)
	MOV.B	@R4,R2			; GET 2ND PATTERN
	MOV.B	R1,@R4+ 		; SAVE 9->16 PIN DATA
	MOV.B	@R2,R1			; GET LOW NIBBLE (2ND)
	OR.B	R0,R1			;
	MOV.B	R1,@R4+ 		; SAVE 17->24 PIN DATA
	SCB/F	R3,KJVL_4		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
	.PAGE
;
;	<< VERTICAL ENLARGE 2 PASS >>
;
KJVEL1: BSR	EDTCKA			; CHECK EDIT COPY FLAG
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	MOV.W	#VELTB1,R2		; SET VERTICAL ENLARGE BASE TABLE
	ADD.W	#-1,R3			;
	MOV.W	@(YMODEF,FP),R1 	;
	AND.W	#XSTYLE,R1		; MASK EXCEPT STYLE BITS
	BNE	KJVL_C			; BR. IF OUTLINE/SHADOW
KJVL_A: MOV.B	@(1,R4),R2		; GET 2ND PATTERN
	MOV.B	@(256,R2),R1		; GET HIGH NIBBLE (2ND)
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET LOW NIBBLE (3RD)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@(256,R2),R1		; GET HIGH NIBBLE (3RD)
	MOV.B	R1,@(2,R4)		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,KJVL_A		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
	;
KJVL_C: CLR.B	R0			; CLEAR MASK DATA
	BTST.B	#3,@(1,R4)		;
	BEQ	KJVL_E			; BR. IF 12 PIN DATA OFF
	BSET.B	#0,R0			; SET MASK DATA
KJVL_E: MOV.B	@(1,R4),R2		; GET 2ND PATTERN
	MOV.B	@(256,R2),R1		; GET HIGH NIBBLE (2ND)
	OR.B	R0,R1			;
	MOV.B	R1,@R4			; SAVE 1->8 PIN DATA
	MOV.B	@(2,R4),R2		; GET 3RD PATTERN
	MOV.B	@R2,R1			; GET LOW NIBBLE (3RD)
	MOV.B	R1,@(1,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@(256,R2),R1		; GET HIGH NIBBLE (3RD)
	MOV.B	R1,@(2,R4)		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE POINTER
	SCB/F	R3,KJVL_C		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
	.PAGE
;
; << SUB >>	MAKE VERTICAL FORMAT TO EDIT BUFFER	< FULL / HALF >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
;		IN	DATA	  0->7 --->> CONVERTOR 0->7
;		OUT	CONVERTOR 7->0 --->> DATA      7->0
;
MKVRT:	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	MKVR_2			; BR. IF NOT VERTICAL FORMAT
	MOV.W	FP,@-SP 		;+ SAVE TEXT BUFFER POINTER
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	BSR	SETDS2:16		; SET DESTIN. POINTER (EDIT 2)
	MOV.W	R0,R5			; SET DESTIN. POINTER
	MOV.W	#DATCV0,FP		; SET H-V CONVERTOR ADDRESS PORT
	BSR	MKVR1			; HORIZONTAL FORMAT TO VERTICAL FORMAT 1
	ADD.W	#1,R4			; UPDATE SOURCE POINTER
	ADDS.B	#ZKCGCL,R5		; UPDATE DESTIN. POINTER
	BSR	MKVR1			;
	ADD.W	#1,R4			;
	ADDS.B	#ZKCGCL,R5		;
	BSR	MKVR1			;
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,FP 		;+ UNSAVE TEXT BUFFER POINTER
	BSR	CP2T1			; COPY EDBF2 TO EDBF1
MKVR_2: RTS
	.PAGE
;
; << SUB >>	MAKE VERTICAL FORMAT TO EDIT BUFFER	< 1/4 >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
;		IN	DATA	  0->7 --->> CONVERTOR 0->7
;		OUT	CONVERTOR 7->0 --->> DATA      7->0
;
MKVRT4: BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	MKVR_2			; BR. IF NOT VERTICAL FORMAT
	MOV.W	FP,@-SP 		;+ SAVE TEXT BUFFER POINTER
	MOV.W	R4,@-SP 		;+ SAVE START POINTER
	BSR	SETDS2:16		; SET DESTIN. POINTER (EDIT 2)
	MOV.W	R0,R5			; SAVE DESTIN. POINTER
	MOV.W	#DATCV0,FP		; SET H-V CONVERTOR ADDRESS PORT
	BSR	MKVR1			; HORIZONTAL FORMAT TO VERTICAL FORMAT 1
	ADD.W	#1,R4			; UPDATE SOURCE POINTERNTER
	ADDS.B	#ZKCGCL,R5		; UPDATE DESTIN. POINTER
	BSR	MKVR1			;
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,FP 		;+ UNSAVE TEXT BUFFER POINTER
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	#ZKFULL,R3		; SET COPY LENGTH (= 24)
	BSR	CP2T1			; COPY EDBF2 TO EDBF1
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
MKV4_2: RTS
	.PAGE
;
;	IN/OUT	FP : H-V CONVERTOR 0
;
MKVR1:	MOV.B	@R4,R0			; GET PATTERN 0
	MOV.B	R0,@FP			; PUT H-V CONVERTOR 0
	MOV.B	@(3,R4),R0		; GET PATTERN 1
	MOV.B	R0,@(1,FP)		; PUT H-V CONVERTOR 1
	MOV.B	@(6,R4),R0		; GET PATTERN 2
	MOV.B	R0,@(2,FP)		; PUT H-V CONVERTOR 2
	MOV.B	@(9,R4),R0		; GET PATTERN 3
	MOV.B	R0,@(3,FP)		; PUT H-V CONVERTOR 3
	MOV.B	@(12,R4),R0		; GET PATTERN 4
	MOV.B	R0,@(4,FP)		; PUT H-V CONVERTOR 4
	MOV.B	@(15,R4),R0		; GET PATTERN 5
	MOV.B	R0,@(5,FP)		; PUT H-V CONVERTOR 5
	MOV.B	@(18,R4),R0		; GET PATTERN 6
	MOV.B	R0,@(6,FP)		; PUT H-V CONVERTOR 6
	MOV.B	@(21,R4),R0		; GET PATTERN 7
	MOV.B	R0,@(7,FP)		; PUT H-V CONVERTOR 7
	MOV.B	@(7,FP),R0		; GET H-V CONVERTOR 7
	MOV.B	R0,@(2+21,R5)		; SAVE PATTERN 7
	MOV.B	@(6,FP),R0		; GET H-V CONVERTOR 6
	MOV.B	R0,@(2+18,R5)		; SAVE PATTERN 6
	MOV.B	@(5,FP),R0		; GET H-V CONVERTOR 5
	MOV.B	R0,@(2+15,R5)		; SAVE PATTERN 5
	MOV.B	@(4,FP),R0		; GET H-V CONVERTOR 4
	MOV.B	R0,@(2+12,R5)		; SAVE PATTERN 4
	MOV.B	@(3,FP),R0		; GET H-V CONVERTOR 3
	MOV.B	R0,@(2+9,R5)		; SAVE PATTERN 3
	MOV.B	@(2,FP),R0		; GET H-V CONVERTOR 2
	MOV.B	R0,@(2+6,R5)		; SAVE PATTERN 2
	MOV.B	@(1,FP),R0		; GET H-V CONVERTOR 1
	MOV.B	R0,@(2+3,R5)		; SAVE PATTERN 1
	MOV.B	@FP,R0			; GET H-V CONVERTOR 0
	MOV.B	R0,@(2,R5)		; SAVE PATTERN 0
	.PAGE
;
;	IN/OUT	FP : H-V CONVERTOR 0
;
MKVR2:	MOV.B	@(ZKCGCL,R4),R0 	; GET PATTERN 0
	MOV.B	R0,@FP			; PUT H-V CONVERTOR 0
	MOV.B	@(3+ZKCGCL,R4),R0	; GET PATTERN 1
	MOV.B	R0,@(1,FP)		; PUT H-V CONVERTOR 1
	MOV.B	@(6+ZKCGCL,R4),R0	; GET PATTERN 2
	MOV.B	R0,@(2,FP)		; PUT H-V CONVERTOR 2
	MOV.B	@(9+ZKCGCL,R4),R0	; GET PATTERN 3
	MOV.B	R0,@(3,FP)		; PUT H-V CONVERTOR 3
	MOV.B	@(12+ZKCGCL,R4),R0	; GET PATTERN 4
	MOV.B	R0,@(4,FP)		; PUT H-V CONVERTOR 4
	MOV.B	@(15+ZKCGCL,R4),R0	; GET PATTERN 5
	MOV.B	R0,@(5,FP)		; PUT H-V CONVERTOR 5
	MOV.B	@(18+ZKCGCL,R4),R0	; GET PATTERN 6
	MOV.B	R0,@(6,FP)		; PUT H-V CONVERTOR 6
	MOV.B	@(21+ZKCGCL,R4),R0	; GET PATTERN 7
	MOV.B	R0,@(7,FP)		; PUT H-V CONVERTOR 7
	MOV.B	@(7,FP),R0		; GET H-V CONVERTOR 7
	MOV.B	R0,@(1+21,R5)		; SAVE PATTERN 7
	MOV.B	@(6,FP),R0		; GET H-V CONVERTOR 6
	MOV.B	R0,@(1+18,R5)		; SAVE PATTERN 6
	MOV.B	@(5,FP),R0		; GET H-V CONVERTOR 5
	MOV.B	R0,@(1+15,R5)		; SAVE PATTERN 5
	MOV.B	@(4,FP),R0		; GET H-V CONVERTOR 4
	MOV.B	R0,@(1+12,R5)		; SAVE PATTERN 4
	MOV.B	@(3,FP),R0		; GET H-V CONVERTOR 3
	MOV.B	R0,@(1+9,R5)		; SAVE PATTERN 3
	MOV.B	@(2,FP),R0		; GET H-V CONVERTOR 2
	MOV.B	R0,@(1+6,R5)		; SAVE PATTERN 2
	MOV.B	@(1,FP),R0		; GET H-V CONVERTOR 1
	MOV.B	R0,@(1+3,R5)		; SAVE PATTERN 1
	MOV.B	@FP,R0			; GET H-V CONVERTOR 0
	MOV.B	R0,@(1,R5)		; SAVE PATTERN 0
	.PAGE
;
;	IN/OUT	FP : H-V CONVERTOR 0
;
MKVR3:	MOV.B	@(ZKCGCL*2,R4),R0	; GET PATTERN 0
	MOV.B	R0,@FP			; PUT H-V CONVERTOR 0
	MOV.B	@(3+ZKCGCL*2,R4),R0	; GET PATTERN 1
	MOV.B	R0,@(1,FP)		; PUT H-V CONVERTOR 1
	MOV.B	@(6+ZKCGCL*2,R4),R0	; GET PATTERN 2
	MOV.B	R0,@(2,FP)		; PUT H-V CONVERTOR 2
	MOV.B	@(9+ZKCGCL*2,R4),R0	; GET PATTERN 3
	MOV.B	R0,@(3,FP)		; PUT H-V CONVERTOR 3
	MOV.B	@(12+ZKCGCL*2,R4),R0	; GET PATTERN 4
	MOV.B	R0,@(4,FP)		; PUT H-V CONVERTOR 4
	MOV.B	@(15+ZKCGCL*2,R4),R0	; GET PATTERN 5
	MOV.B	R0,@(5,FP)		; PUT H-V CONVERTOR 5
	MOV.B	@(18+ZKCGCL*2,R4),R0	; GET PATTERN 6
	MOV.B	R0,@(6,FP)		; PUT H-V CONVERTOR 6
	MOV.B	@(21+ZKCGCL*2,R4),R0	; GET PATTERN 7
	MOV.B	R0,@(7,FP)		; PUT H-V CONVERTOR 7
	MOV.B	@(7,FP),R0		; GET H-V CONVERTOR 7
	MOV.B	R0,@(21,R5)		; SAVE PATTERN 7
	MOV.B	@(6,FP),R0		; GET H-V CONVERTOR 6
	MOV.B	R0,@(18,R5)		; SAVE PATTERN 6
	MOV.B	@(5,FP),R0		; GET H-V CONVERTOR 5
	MOV.B	R0,@(15,R5)		; SAVE PATTERN 5
	MOV.B	@(4,FP),R0		; GET H-V CONVERTOR 4
	MOV.B	R0,@(12,R5)		; SAVE PATTERN 4
	MOV.B	@(3,FP),R0		; GET H-V CONVERTOR 3
	MOV.B	R0,@(9,R5)		; SAVE PATTERN 3
	MOV.B	@(2,FP),R0		; GET H-V CONVERTOR 2
	MOV.B	R0,@(6,R5)		; SAVE PATTERN 2
	MOV.B	@(1,FP),R0		; GET H-V CONVERTOR 1
	MOV.B	R0,@(3,R5)		; SAVE PATTERN 1
	MOV.B	@FP,R0			; GET H-V CONVERTOR 0
	MOV.B	R0,@R5			; SAVE PATTERN 0
	RTS
	.PAGE
;
; << SUB >>	CHECK & RESET MODE FLAG
;
;	IN	FP : TEXT BUFFER POINTER
;
;	OUT	R2 : MODE FLAG
;		FP : TEXT BUFFER POINTER
;
;	USE	R2,FP
;
CHKMDF: MOV.W	@(YCODEF,FP),R1 	; GET KANJI CODE
	MOV.W	R1,R5			; SAVE KANJI CODE
	MOV.W	R1,R0			;
	SWAP	R5			;
	SHLL.W	R0			; OFFSET x 2
	BSR	CHKVEN:16		; CHECK VERTICAL ENABLE
	BEQ	CHKM_C			; BR. IF VERTICAL ENABLE
	BCLR.W	#QKVFMT,@(YMODEF,FP)	; RESET VERTICAL FLAG
CHKM_C: CMP.B	#ZCMBFM,@(YFMATF,FP)	;
	BNE	CHKM_2			; BR. IF NOT COMBINE MODE
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	CHKM_A			; BR. IF NOT VERTICAL FORMAT
	BCLR.W	#QKJ14,@(YMODEF,FP)	; RESET 1/4 MODE
	BRA	CHKM_6
	;
CHKM_A: BCLR.W	#QKJ2ND,@(YMODEF,FP)	; RESET KANJI COMBINE 2ND FLAG
	MOV.B	#ZKNJFM,@(YFMATF,FP)	; SET KANJI FORMAT (OVERWRITE)
CHKM_2: BTST.W	#QKJ14,@(YMODEF,FP)	;
	BEQ	CHKM_4			; BR. IF NOT 1/4 MODE
	BCLR.W	#QKHALF,@(YMODEF,FP)	; RESET HALF MODE
CHKM_4: BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	CHKM_8			; BR. IF NOT VERTICAL FORMAT
CHKM_6: BCLR.W	#QPITLC,@(YMODEF,FP)	; RESET ITALIC MODE
CHKM_8: MOV.W	@(YMODEF,FP),R2 	; GET MODE FLAG
	RTS
	.PAGE
;
; << SUB >>	CONVERSION KANJI CODE TO KANJI CODE
;
;	IN	R1 : KANJI CODE
;
;			CNVKCD : KANJI COMBINE
;			CVKCDH : KANJI HORIZONTAL
;			CVKCDV : KANJI VERTICAL
;
;	OUT	R1 : KANJI CODE (KANJI CODE -> KANJI CODE)
;			MSB ON : OFFSET H'48 FLAG
;		R3 : = H'00 ... VERTICAL ENABLE  MODE
;		     = H'80 ... VERTICAL DISABLE MODE
;
;	USE	R0->FP,EP
;
CNVKCD: BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BNE	CVKCDV			; BR. IF VERTICAL FORMAT MODE
CVKCDH: CLR.B	R3			; SET VERTICAL ENABLE FLAG
	MOV.W	R1,R5			; SAVE KANJI CODE
	SWAP	R5			;
	CMP.B	#H'70,R5                ; 911202
	BCC	CVKH_7			; 911202 H'70xx->H'7Cxx
	CMP.B	#H'30,R5                ;
	BCC	CVKH_A			; 911206 H'30xx->H'6Fxx
	;
CVKH_2: LDC.B	#PAGE KTBHT,EP		; SET TABLE PAGE
	MOV.W	#KTBHT,R4		; SET TABLE BASE ADDRESS
	BTST.W	#QKJ14,@(YMODEF,FP)	;
	BEQ	CVKH_3			; BR. IF NOT 1/4 MODE
	BTST.W	#QKVENL,@(YMODEF,FP)	;
	BNE	CVKH_3			; BR. IF VERTICAL ENLARGE MODE
	LDC.B	#PAGE QTBHT,EP		; SET 1/4 TABLE PAGE
	MOV.W	#QTBHT,R4		; SET 1/4 TABLE BASE ADDRESS
CVKH_3: MOV.W	R5,@-SP 		;+ SAVE KANJI CODE
	SUB.B	#H'21,R5                ; - H'21 (= OFFSET)
	EXTU	R5			;
	SHLL.W	R5			; OFFSET x 2
	ADD.W	R5,R4			; BASE + OFFSET
	MOV.W	@R4,R4			; GET TABLE BASE ADDRESS
	MOV.W	@SP+,R5 		;+ UNSAVE KANJI CODE
CVKH_4: SWAP	R5			; GET 2ND CODE
	SHLL.W	R5			; OFFSET x 2
	MOV.B	R5,R4			; BASE + OFFSET
	MOV.W	@R4,R1			; GET CHANGE KANJI CODE
	CLR.B	R3			; SET VERTICAL ENABLE FLAG
CVKH_5: BRA	GETKCG:16
;
CVKH_A: CMP.B	#H'49,R5                ; 911206
	BCC	CVKH_5			;
	BTST.B	#QKGODI,@(YMODKF,FP)	;
	BNE	CVKH_B
	BRA	CVKH_5
CVKH_B: BSET.B	#QKCSWC,@UMOD01:8	;
	BRA	CVKH_5			;
;
CVKH_7: CMP.B	#H'D4,R5                ; 920413 D4-SEMI
	BEQ	D4_PRO			;      "
	CMP.B	#H'70,R5                ; 911206
	BEQ	CVKF_1			;
	CMP.B	#H'71,R5                ;
	BEQ	CVKF_2			;
	CMP.B	#H'72,R5                ;
	BEQ	CVKF_3			;
	CMP.B	#H'73,R5                ;
	BEQ	CVKF_4			;
;
	BSET.B	#QKCSWC,@UMOD01:8	; 911206
	CMP.B	#H'77,R5                ; 911206+
	BEQ	CVKF_8
	CMP.B	#H'7B,R5                ; 911206+
	BEQ	CVKF_C
	CMP.B	#H'7C,R5
	BEQ	CVKF_D

	SUB.B	#H'2B,R5                ; 911206
	SWAP	R5			; 911206
	MOV.W	R5,R1			;   "
	SWAP	R5			;   "
	BRA	CVKH_5
	.PAGE
;
;	<< VERTICAL MODE >>
;
CVKCDV:
	BRA	CVKCDH			; 911204
;
;
CVKF_1: LDC.B	#PAGE KF1HT,EP		; SET TABLE PAGE
	MOV.W	#KF1HT,R4		; SET TABLE BASE ADDRESS
	BRA	CVKH_4
CVKF_2: LDC.B	#PAGE KF2HT,EP		; SET TABLE PAGE
	MOV.W	#KF2HT,R4		; SET TABLE BASE ADDRESS
	BRA	CVKH_4
CVKF_3: LDC.B	#PAGE KF3HT,EP		; SET TABLE PAGE
	MOV.W	#KF3HT,R4		; SET TABLE BASE ADDRESS
	BRA	CVKH_4
CVKF_4: LDC.B	#PAGE KF4HT,EP		; SET TABLE PAGE
	MOV.W	#KF4HT,R4		; SET TABLE BASE ADDRESS
	BRA	CVKH_4
;
CVKF_8: LDC.B	#PAGE K21HT,EP
	MOV.W	#K21HT,R4
	BRA	CVKH_4
CVKF_C: LDC.B	#PAGE K22HT,EP
	MOV.W	#K22HT,R4
	BRA	CVKH_4
CVKF_D: LDC.B	#PAGE K23HT,EP
	MOV.W	#K23HT,R4
	BRA	CVKH_4
;
;
; << SUB >>	CHECK VERTICAL ENABLE
;
;	IN	R1 : KANJI CODE (High/Low)
;		R5 : KANJI CODE (Low/High)
;
;	OUT	R1 : KANJI CODE (High/Low)
;		R3 : = 0 VERTICAL ENABLE
;		R5 : KANJI CODE (Low/High)
;
;	USE	R1,R4,R5,EP
;
CHKVEN:
CHKV_6: CLR.B	R3			; SET VERTICAL ENABLE FLAG
	RTS
;
D4_PRO: LDC.B	#PAGE D4SEMI,EP 	; 920413 D4-SEMI
	MOV.W	#D4SEMI,R4
	SWAP	R5
	SUB.B	#H'80,R5
	SHLL.B	R5
	ADD.B	R5,R4			;
	BSET.B	#QKCSWC,@UMOD01:8	; 415+
	MOV.W	@R4,R1			; 415+
	CLR.B	R3			; 415+
	BRA	GETKCG:16		; 415+
	.PAGE
;
; << SUB >>	CONVERSION KANJI CODE & SET CG ADRESS
;
;	IN	   R1 : KANJI CODE
;			MSB ON : OFFSET H'48 FLAG
;		   R3 : =    0 ... VERTICAL ENABLE  MODE
;			= H'80 ... VERTICAL DISABLE MODE
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : CG OFFSET (0 = FULL CG / H'48 = SPECIAL CG (HALF / 1/4))
;		EP R4 : KANJI CG ADDRESS
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
GETKCG: CLR.W	R3			; CLEAR SPECIAL CG OFFSET VALUE
	TST.W	R1			;
	BPL	GETK_4			; BR. IF NOT SPECIAL CG
	MOV.W	#ZKCGCL*3,R3		; SET SPECIAL CG OFFSET VALUE
GETK_4: SWAP	R1			;
	AND.B	#ZN-H'80,R1             ; CLEAR MSB
	SWAP	R1			;
	JSR	@SELKCG 		; SELECT KANJI CG
	ADD.W	R3,R4			; + OFFSET VALUE
	CLR.W	R2			; SET NOT KANJI SPACE CODE FLAG
	RTS
	.PAGE
;
; << SUB >	SET DESTINATION POINTER 1	< EDIT BUFFER 1 >
;
SETDS1: MOV.W	#EDBF1,R0		; SET EDIT BUFFER 1 POINTER
	BRA	SETD_2
;
; << SUB >	SET DESTINATION POINTER 2	< EDIT BUFFER 2 >
;
SETDS2: MOV.W	#EDBF2,R0		; SET EDIT BUFFER 2 POINTER
SETD_2: LDC.B	#PAGE EDBF1,DP		; SET EDIT PAGE
	CLR.W	@R0+			; CLEAR UNDERFLOW AREA
	CLR.W	@R0+			;
	CLR.W	@R0+			;
	RTS
;
; << SUB >	SET DESTINATION POINTER 3	< IMAGE BUFFER >
;
SETDSK: BSR	IMGPST			; SET IMAGE BUFFER POINTER
	ADD.W	#IMGBF,R0		; ADDER IMAGE BUFFER BASE
	LDC.B	#PAGE IMGBF,DP		; SET IMAGE BUFFER PAGE
	RTS
;
; << SUB >>	SET IMAGE BUFFER START POINTER
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R0 : IMAGE BUFFER POINTER
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,EP
;
IMGPST: MOV.W	R4,@-SP 		;+ SAVE PATTERN POINTER
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	@(YCLMCF,FP),R1 	; GET CURRENT COLUMN
	MOV.B	@(YSPDPF,FP),R3 	; GET SPEED/PITCH FLAG
	JSR	@GETIBP 		; GET IMAGE BUFFER POINTER (= R1)
	MOV.B	@(YPRESP,FP),R2 	; GET LEFT SPACE TO TEXT BUFFER
	BEQ	IMGP_2			; BR. IF PRE. SPACE = 0
	EXTU	R2			;
	MULXU.B #3+3,R2 		; CALCULATE LEFT SPACE x 8
; 920312 CONNECT
	BTST.W	#QKEISN,@(YMODEF,FP)	;\
	BNE	IMGP_2			;\BR IF KEISEN SETSUZOKU MODE
;
	BTST.B	#QPREVS,@(YMODKF,FP)	;\ 21/MAR/1992
	BNE	IMGP_2			;\BR IF KEISEN SETSUZOKU MODE
;
	ADD.W	R2,R1			; + UPDATE IMAGE BUFFER POINTER
IMGP_2: MOV.W	R1,R0			; SAVE IMAGE BUFFER POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	@SP+,R4 		;+ UNSAVE PATTERN POINTER
	RTS
	.PAGE
;
; << SUB >>	CHECK MODE FLAG & MAKE STYLE & VERTICAL FORMAT PATTERN
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R1 : JUMP TABLE OFFSET
;		   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : EACH PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R1,FP
;	NO USE	EP R4
;
;		bit0	Emphasize
;		bit1	Horizontal Enlarge
;		bit2	Italic
;		bit3->7 No Define
;
MDCHK:	CLR.W	R1			; CLEAR MODE OFFSET
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BNE	MKMD_2			; BR. IF VERTICAL ENLARGE (SKIP ITALIC)
	BTST.W	#QPITLC,@(YMODEF,FP)	;
	BEQ	MKMD_2			; BR. IF NOT ITALIC MODE
	BSET.B	#2,R1			; SET EMPHASIZE MODE BIT
MKMD_2: BTST.W	#QPEMPH,@(YMODEF,FP)	;
	BEQ	MKMD_4			; BR. IF NOT EMPHASIZE MODE
	BSET.B	#0,R1			; SET EMPHASIZE MODE BIT
MKMD_4: BTST.W	#QPHENL,@(YMODEF,FP)	;
	BEQ	MKMD_6			; BR. IF NOT HORIZONTAL ENLARGE MODE
	BSET.B	#1,R1			; SET HORIZONTAL ENLARGE MODE BIT
MKMD_6: RTS
	.END


	.PROGRAM	apldp3
	.HEADING	"M4324 DATA PROCESS PASS 3 MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 DATA PROCESS PASS 3 APPLICATION MODULE	*
;							*
;	FILE NAME	AX_DP3.MAR			*
;	CREATED 	04/JUL/1991			*
;							*
;********************************************************
;
	.EXPORT 	DP3TBL,D3PTBL,D3HTBL
	.EXPORT 	DP3STA,LFCAN, INSP1

	.IMPORT 	DP3STK,D3HPKT,D3LPKT,D3WPKT,VTC,   VTBF
	.IMPORT 	DP1ON, SWTONE,CLRLFP,GETLFP,SETLFP,CMDCAN
	.IMPORT 	DP3INI,CHKCAN,RELPRB,RELDP3,WTACTF
	.IMPORT 	CRESC, PBCL,  LVPM
	.IMPORT 	INI2,  INIA,  INISHT,ZLFP2
	.IMPORT 	HSADJ1,HSADJ2,HSADJ3,HSPUOP
	.IMPORT 	HSINIT,HSOPEN,HSOPN1,HSOPSR,HSOPSS,CRINI
	.IMPORT 	INIDP3,INIMEX,INIPR, INIPR1,CRHOME,HSMDCH
	.IMPORT 	CHKHDC,GETPKT,SETECC,GETPFP,SETRS, RSHM
	.IMPORT 	CHKPMD,SELPMD,SETPMD,INSERT,CHKEJC,EJECT
	.IMPORT 	CHKLF, FEEDF, FEEDF1,FEEDR, FEEDR1,FEEDN
	.IMPORT 	CUTPF, CUTPF1,PRT,   DTOPC ,DTPAV, SETADV,SETLCD

	.INCLUDE	"COMMON.H"
	.INCLUDE	"M43RTM.H"
	.INCLUDE	"GAHEAD.H"
	.INCLUDE	"GAINT.H"
	.INCLUDE	"PNLIOS.H"
	.INCLUDE	"SYSRAM.H"
	.INCLUDE	"SYSPRT.H"
	.INCLUDE	"AX_EEP.H"
	.INCLUDE	"AX_IOS.H"
	.INCLUDE	"AX_MON.H"
	.INCLUDE	"AX_LF.H"
	.INCLUDE	"AX_DP3.H"
	.INCLUDE	"AX_RAM.H"
	.PAGE
;	.SECTION	APLRAM,DUMMY,LOCATE=H'FE00
;
;	DP3 CONSTANT
;
ZXVTC:	.EQU	   16			; MAX VT COUNT
ZPHMIN: .EQU	 2304			; MIN PAPER HOTCHKISS PRINT COLUMN
ZPHMAX: .EQU	19448			; MAX PAPER HOTCHKISS PRINT COLUMN
ZLFC1:	.EQU	   71			;  71/360 INCH
ZLFC2:	.EQU	  240			; 240/360 INCH

;
;	DP3 WORK AREA
;
	.ORG	H'FEA0
DP3F:	.RES.B	  1			; DATA PROCESS PASS 3 FLAG 1
QTOFFM: .EQU	  0			;   1:TEAR OFF MODE
QTOPP:	.EQU	  1			;   1:TOP MARGIN POSITION
QPRLFP: .EQU	  2			;   1:PRINT FEED PRESENT
QLFCE:	.EQU	  3			;   1:LF CANCEL ENABLE
;	.EQU	  4			;
QPECKD: .EQU	  5			;   1:PE CHECK DISABLE
;	.EQU	  6			;
;	.EQU	  7			;

DP3R2S: .RES.B	  1			; PACKET DATA R2 SAVE
DP3R3S: .RES.W	  1			; PACKET DATA R3 SAVE
DP3R4S: .RES.W	  1			; PACKET DATA R4 SAVE
DP3PP:	.RES.W	  1			; PACKET POINTER
LFS:	.RES.W	  1			; LF PITCH SAVE
PGLS1:	.RES.W	  1			; PAGE LENGTH SAVE 1
PGLS2:	.RES.W	  1			; PAGE LENGTH SAVE 2  (PRINTABLE AREA)
LFC:	.RES.W	  1			; LF COUNTER
LFC1:	.RES.W	  1			; LF COUNTER FOR MULTI PASS PRINT
LFC2:	.RES.W	  1			; LF COUNTER FOR OFFLINE PRINT
CUTC:	.RES.W	  1			; CUT POSITION FEED COUNTER
TOPMC:	.RES.W	  1			; TOP MARGIN COUNTER
TOPMS:	.RES.W	  1			; TOP MARGIN SAVE AT INSERT
MAXPC:	.RES.W	  1			; MAX PRINT COLUMN COUNTER
PGLHS1: .RES.B	  1			; PAGE LENGTH HIGH SAVE 1
PGLHS2: .RES.B	  1			; PAGE LENGTH HIGH SAVE 2
LFHC:	.RES.B	  1			; LF HIGH COUNTER
LFRC:	.RES.B	  1			; REVERSE LF COUNTER
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;	TASK DEFINITION TABLE
;
	.ALIGN		  2
DP3TBL: .DATA.W 	DP3TCB		; TCB
	.DATA.B 	  3		; PRIORITY
	.DATA.B 	ZTIST4		; STATUS
	.DATA.W 	DP3STK		; STACK
	.DATA.W 	DP3INI		; ENTRY
	.DATA.B 	PAGE DP3INI	; CP
	.DATA.B 	  0		; DP
	.DATA.B 	  0		; EP
	.DATA.B 	ZBR		; BR
	.DATA.W 	  0		; NO MAIL BOX
D3PTBL: .DATA.W 	  3		; NO. OF PACKET
	.DATA.W 	D3WPKT		; PACKET POINTER
	.DATA.W 	  1		; NO. OF PACKET DATA
	.DATA.W 	D3HPKT		; PACKET POINTER
	.DATA.W 	  4		; NO. OF PACKET DATA
	.DATA.W 	D3LPKT		; PACKET POINTER
	.DATA.W 	  8		; NO. OF PACKET
					;
D3HTBL: .DATA.W 	  2		; NO. OF PACKET
	.DATA.W 	D3WPKT		; PACKET POINTER
	.DATA.W 	  1		; NO. OF PACKET DATA
	.DATA.W 	D3HPKT		; PACKET POINTER
;	.DATA.W 	  4		; NO. OF PACKET DATA
					;
D3LTBL: .DATA.W 	  1		; NO. OF PACKET
	.DATA.W 	D3LPKT		; PACKET POINTER
;	.DATA.W 	  8		; NO. OF PACKET DATA
	.PAGE
;
;	INITIALIZE DP3 PRINT FORMAT
;
;	IN	NONE
;
;	OUT	FP : PRINT FORMAT POINTER
;
INIPF:	MOV.W	#ZPHMIN,@MAXPC:8	; RESET MAX PRINT COLUMN
	BCLR.B	#QRBRBN,@OPTF:8 	;
	BTST.B	#QRBRBM,@EEPBF+E2CPF2	;
	BEQ	INIP_1			; BR IF COLOR RIBBON
	BSET.B	#QRBRBN,@OPTF:8 	; SET RED/BLACK RIBBON ATTACHED
INIP_1: JSR	@SETRS			; SET RIBBON SHIFT TYPE
	BEQ	INIP_8			; BR IF NOT RIBBON TYPE CHANGE
	JSR	@RSHM			; RIBBON SHIFT FOR HOME
INIP_8: BCLR.B	#Q7PM,@PRMDF:8		;
	BTST.B	#QCPYEM,@EEPBF+E2CPF2	;
	BEQ	INIPF1			;
	BSET.B	#Q7PM,@PRMDF:8		; SET COPY ENHANCE MODE
INIPF1: CLR.W	R0			;
	MOV.W	#VTC,FP 		;
	MOV.W	R0,@(0,FP)		; CLEAR VT COUNTER
	MOV.W	R0,@(2,FP)		;
	MOV.W	R0,@(4,FP)		;
	MOV.W	R0,@(6,FP)		;
	MOV.W	#Z6LPI,@LFS:8		; SET LF PITCH
INIPF2: JSR	@GETPFP 		; GET PRINT FORMAT POINTER
	BCLR.B	#QTOFFM,@DP3F:8 	;
	BTST.B	#QSERVM,@MODEF:8	;
	BNE	INIP_2			; BR IF SERVICE MODE
	BTST.B	#QSPCM,@MODEF:8 	;
	BEQ	INIP_3			; BR IF NOT SPEC. CHANGE MODE
INIP_2: MOV.W	#11*ZFINCH,R1		; SET 11 INCH PAGE LENGTH
	MOV.W	R1,R2			; SET NO BOTTOM MARGIN
	BRA	INIP_6			;
					;
INIP_3: BTST.B	#QTEAR,@(E2PF2,FP)	;
	BEQ	INIP_4			; BR IF NOT TEAR OFF MODE
	BSET.B	#QTOFFM,@DP3F:8 	;
INIP_4: MOV.B	#Z6LPI,R0		; GET 1/6 INCH
	MOV.B	@(E2PGL,FP),R1		; GET DEFAULT PAGE LENGTH
	BNE	INIP_7			; BR. IF NOT PAGE LENGTH = 0
	MOV.B	#1,R1			;
INIP_7: MULXU.B R0,R1			; CALCULATE n/180 INCH PAGE LENGTH
	MOV.B	@(E2BTM,FP),R2		; GET DEFAULT BOTTOM MARGIN
	MULXU.B R2,R0			; CALCULATE n/180 INCH BOTTOM MARGIN
	MOV.W	R1,R2			;
	SUB.W	R0,R2			; CALCULATE PAGE LENGTH 2
	BHI	INIP_6			; BR IF PAGE LENGTH 2 < PAGE LENGTH 1
	MOV.W	R1,R2			;
INIP_6: CLR.W	R0			;
	MOV.W	R1,@PGLS1:8		; SET PAGE LENGTH 1
	MOV.B	R0,@PGLHS1:8		;
	MOV.W	R2,@PGLS2:8		; SET PAGE LENGTH 2
	MOV.B	R0,@PGLHS2:8		;
	MOV.W	R0,@LFC:8		; RESET LF COUNTER
	MOV.B	R0,@LFHC:8		;
	RTS				;
	.PAGE
;
;	SET TOP MARGIN FROM PRINT FORMAT
;
;	IN	NONE
;
;	OUT	NONE
;
SETTOP: JSR	@GETPFP 		; GET PRINT FORMAT POINTER
	MOV.B	@PAMDF:8,R0		; GET PAPER MODE
	SUB.B	#ZSHT,R0		;
	BCC	SETT_1			; BR IF SHEET/ACSF MODE
	MOV.B	#-1,R0			; SET OFFSET FOR FORMS/BOTTOM
SETT_1: SHLL.B	R0			; CALCULATE TOP MARGIN OFFSET
	ADDS.B	R0,FP			; GET TOP MARGIN POINTER
	MOV.W	@(E2TOPS,FP),R0 	; GET TOP MARGIN FROM EEPROM
	SHLL.W	R0			; CONVERT TO 1/360 INCH PITCH
	MOV.W	R0,@TOPMC:8		; SET TOP MARGIN COUNTER
	RTS				;

;
;	SET ERROR CHECK CONDITION
;
STERCC: MOV.W	@LFC1:8,R0		;
	BNE	STER_1			; BR IF LF COUNTER FOR MULTI PASS PRINT <> 0
	JSR	@SETECC 		; SET ERROR CHECK CONDITION
STER_1: RTS

;
;	SET PE CHECK ENABLE
;
SETPEE: BCLR.B	#QPECKD,@DP3F:8 	;
	BEQ	STER_1			; BR IF LF COUNTER FOR MULTI PASS PRINT = 0
	MOV.W	R0,@-SP 		;
	MOV.W	R2,@-SP 		;
	CALMON	#FSPEE			; SET PE CHECK ENABLE
	MOV.W	@SP+,R2 		;
	MOV.W	@SP+,R0 		;
	RTS

;
;	SET PE CHECK DISABLE
;
SETPED: MOV.W	R2,@-SP 		;
	CALMON	#FSPED			; SET PE CHECK DISABLE
	MOV.W	@SP+,R2 		;
	BSET.B	#QPECKD,@DP3F:8 	; SET PE CHECK DISABLE FLAG
	RTS
	.PAGE
;
;	INSERT PAPER		INSP1 : INSERT IF PE
;				INSP2 : ALWAYS INSERT
;				INSPS : INSERT IF SHEET SET
;	IN	NONE
;
;	OUT	NONE
;
INSPS:	CMP.B	#ZSHT,@PAMDF:8		;
	BCS	INSP_2			; BR IF NOT SHEET/ACSF MODE
	BTST.B	#QSPES,@SNSF:8		;
	BNE	INSP_1			; BR IF SHEET SET
	RTS				;

INSP1:	BTST.B	#QSERVM,@MODEF:8	;
	BNE	INSP_1			; BR IF SERVICE MODE
	BTST.B	#QSPCM,@MODEF:8 	;
	BNE	INSP_1			; BR IF SPEC. CHANGE MODE
INSP3:	CMP.B	#ZACF0,@PAMDF:8 	;
	BCS	INSP_2			; BR IF NOT ACSF MODE
INSP_1: BTST.B	#QINSM,@PRMDF:8 	;
	BNE	INSP_2			; BR IF ALREADY INSERTED
INSP2:					;
	CALMON	#FSPED			; SET PE CHECK DISABLE
	BSR	INSP			; INSERT PAPER
	CALMON	#FSPEE			; SET INSERT ERROR
INSP_2: RTS				;

INSP:	MOV.W	@TOPMC:8,R2		; GET TOP MARGIN
	MOV.B	@PAMDF:8,R3		; GET PAPER MODE
	JSR	@INSERT 		; INSERT PAPER
	BNE	CLRLFC			; BR IF INSERT ERROR
	BSET.B	#QTOPP,@DP3F:8		; SET TOP MARGIN POSITION FLAG
	MOV.W	@TOPMC:8,R0		; GET TOP MARGIN
	MOV.W	R0,@TOPMS:8		; SAVE TOP MARGIN AT INSERT
CLRLFC: CLR.W	R0			;
	MOV.W	R0,@LFC:8		; RESET LF COUNTER
	MOV.B	R0,@LFHC:8		;
	MOV.W	R0,@LFC1:8		; RESET PRINT LF COUNTER 1
	MOV.W	R0,@LFC2:8		; RESET PRINT LF COUNTER 2
	MOV.B	R0,@LFRC:8		; RESET REVERSE LF COUNTER
	MOV.W	R0,@CUTC:8		; RESET CUT POSITION FEED COUNTER
	RTS				;
	.PAGE
;
;	EJECT PAPER		EJCP1 : EJECT IF NOT PE
;				EJCP2 : ALWAYS EJECT BY PAPER MODE
;				EJCPX : ALWAYS EJECT
;	IN	NONE
;
;	OUT	NONE
;
EJCPX:	MOV.B	@SNSF:8,R0		;
	AND.B	#XBPES+XFPES+XSPES,R0	; GET PE SENSOR STATUS
	BEQ	EJCP2			; BR IF NOT SENSOR PE
EJCP_1: MOV.B	#ZBTM,R3		;
	BTST.B	#QBPES,@SNSF:8		;
	BNE	EJCP_2			; BR IF NOT BOTTOM PE
	MOV.B	#ZFORM,R3		;
	BTST.B	#QFPES,@SNSF:8		;
	BNE	EJCP_2			; BR IF NOT FORMS PE
	MOV.B	#ZSHT,R3		;
	BRA	EJCP_2			;
					;
EJCP1:	MOV.B	@SNSF:8,R0		;
	AND.B	#XBPES+XFPES+XSPES,R0	; GET PE SENSOR STATUS
	BNE	EJCP_1			; BR IF NOT SENSOR PE
	JSR	@CHKEJC 		;
	BEQ	EJCP_3			; BR IF ALREADY EJECT DONE
EJCP2:	MOV.B	@PAMDF:8,R3		; GET PAPER MODE
EJCP_2: 				;
	CALMON	#FSPED			; SET PE CHECK DISABLE
	BSR	EJCP			; EJECT PAPER
	CALMON	#FSPEE			; SET INSERT ERROR
	RTS				;
					;
EJCPP:	JSR	@CHKEJC 		;
	BEQ	EJCP_3			; BR IF ALREADY EJECT DONE
EJCP:	MOV.W	@DP3PP:8,R1		; GET PACKET POINTER
	JSR	@EJECT			; EJECT PAPER
	BNE	EJCP_6			; BR IF EJECT ERROR
EJCP_3: JSR	@CLRLFP 		; RESET LF POSITION COUNTER
EJCP_6: BCLR.B	#QTOPP,@DP3F:8		; RESET TOP MARGIN POSITION FLAG
	BRA	CLRLFC			; RESET LF COUNTER
					;
EJCPS:	JSR	@GETPFP 		; GET PRINT FORMAT POINTER
	MOV.W	#4-1,R5 		;
	MOV.W	@(E2TOPS,FP),R3 	; GET TOP MARGIN OF SHEET
EJCP_4: ADD.W	#E2TOP0-E2TOPS,FP	;
	CMP.W	@(E2TOPS,FP),R3 	; GET MIN. TOP MARGIN
	BLS	EJCP_5			;
	MOV.W	@(E2TOPS,FP),R3 	;
EJCP_5: SCB/F	R5,EJCP_4		;
	SHLL.W	R3			; CONVERT TO 1/360 INCH PITCH
	JSR	@INISHT 		; INITIALIZE SHEET
	BRA	EJCP_3			;
	.PAGE
;
;	CHECK PULL OUT PAPER
;
;	IN	NONE
;
;	OUT  R2-R3 : NOT CHNAGE
;		 Z : 0=PULL OUT
;
CHKPUL: MOV.W	R2,@-SP 		;
	MOV.W	#Z6LPI,R2		; SET FEED COUNT FOR CHECK
	JSR	@CHKLF			; CHECK LF CONDITION
	BEQ	CHKP_1			; BR IF NOT PULL OUT
	MOV.W	R3,@-SP 		;
	BSR	EJCP2			; EJECT PAPER
	MOV.W	@SP+,R3 		;
	MOV.W	@SP+,R2 		;
	MOV.B	#1,R0			; RESET Z-FLAG FOR PULL OUT
	RTS				;
					;
CHKP_1: MOV.W	@SP+,R2 		;
	MOV.B	#0,R0			; SET Z-FLAG FOR NOT PULL OUT
CHKP_2: RTS				;
	.PAGE
;
;	CUT PSOITION FEED RETURN
;
;	IN	NONE
;
;	OUT	NONE
;
CUTPR:	MOV.W	@CUTC:8,R2		; GET CUT POSITION FEED COUNT
	BEQ	CHKC_3			; BR IF NOT CUT POSITION
	CLR.W	@CUTC:8 		; RESET CUT POSITION FEED COUNTER
	BSR	CHKCUT			; CHECK CUT FEED CONDITION
	BEQ	CHKC_3			; BR IF NOT OK
	JSR	@FEEDN			; RETURN TO TOP MARGIN POSITION
	BSET.B	#QTOPP,@DP3F:8		; SET TOP MARGIN POSITION FLAG
	RTS				;

;
;	CHECK CUT POSITION FEED CONDITION
;
;	IN	NONE
;
;	OUT	 Z : 1=NOT CUT POSITION FEED
;
CHKCUT: BTST.B	#QFPES,@SNSF:8		;
	BEQ	CHKC_3			; BR IF FORMS PE
	CMP.B	#ZBTM,@PAMDF:8		;
	BCS	CHKC_3			; BR IF FORMS MODE
CHKC_2: MOV.B	#0,R0			; SET Z-FLAG FOR NOT OK
CHKC_3: RTS				;
	.PAGE
;
;	CHECK VT/FF
;
;	IN   R2-R4 : ORIGINAL PACKET DATA
;
;	OUT  R2-R4 : NEW PACKET DATA
;
CHKVT:	CMP.B	#ZPLFCD,R2		;
	BEQ	CHKV_5			; BR IF LF CODE
	CMP.B	#ZPFORJ,R2		;
	BEQ	CHKV_6			; BR IF ESC + J CODE
	CMP.B	#ZPREVJ,R2		;
	BEQ	CHKV_7			; BR IF ESC + j CODE
	CMP.B	#ZPVTCD,R2		;
	BNE	CHKV_3			; BR IF VT CODE
	CLR.W	FP			;
	MOV.B	R4,FP			; GET VT CHANNEL
	CLR.W	R0			;
	MOV.B	@(VTC,FP),R0		; GET VT COUNT
	BEQ	CHKV_2			; BR IF NO VT
	ADD.W	#-1,R0			; ADJUST FOR LOOP
	MULXU.B #ZXVTC*3,FP		;
	ADD.W	#VTBF,FP		; GET VT BUFFER POINTER
CHKV_1: MOV.B	@FP+,R1 		; GET VT POSITION
	MOV.B	@FP+,R3 		;
	SWAP	R3			;
	MOV.B	@FP+,R3 		;
	CMP.W	@PGLS1:8,R3		;
	SUBX.B	@PGLHS1:8,R1		;
	BCC	CHKV_2			; BR IF PAGE LENGTH =< VT POSITION
	MOV.B	@(-3,FP),R1		;
	SUB.W	@LFC:8,R3		; CALCULATE FEED COUNT
	SUBX.B	@LFHC:8,R1		;
	BHI	CHKV_4			; BR IF VT HIT
	SCB/F	R0,CHKV_1		;
CHKV_2: MOV.B	#ZPFFCD,R2		; CHANGE TO FORM FEED CODE
CHKV_3: CMP.B	#ZPFFCD,R2		;
	BNE	CHKV_4			; BR IF NOT FF CODE
	CMP.B	#ZACF0,@PAMDF:8 	;
	BCS	CHKV_4			; BR IF NOT ACSF MODE
	MOV.B	#ZPEJCD,R2		; CHANGE TO EJECT CODE
CHKV_4: RTS				;

CHKV_5: TST.W	@LFS:8			;
	BEQ	CHKV_8			; BR IF LF COUNT = 0
	RTS

CHKV_7: CMP.B	#ZBTM,@PAMDF:8		;
	BEQ	CHKV_8			; BR IF BOTTOM MODE
	CMP.B	#ZBTMP,@PAMDF:8 	;
	BEQ	CHKV_8			; BR IF BOTTOM HOTCHKISS MODE
CHKV_6: TST.B	R3			;
	BNE	CHKV_4			; BR IF NOT FEED COUNT = 0
CHKV_8: MOV.B	#ZPNOP,R2		; REWRITE NOP CODE
	RTS
	.PAGE
;
;	DP3 START
;
;	IN	NONE
;
;	OUT	NONE
;
DP3STA: JSR	@INIDP3 		; INITIALIZE DP3
	MOV.B	@OPTAF:8,R0		; GET OPTION FLAG FOR PORT
	MOV.B	R0,@OPTF:8		; SAVE OPTION FLAG
	BSR	INIPF			; INITIALZIE DP3 PRINT FORMAT
	JSR	@CRINI			; INITIALINE CR
	MOV.B	@(E2PAMD,FP),R3 	; GET POWER ON DEFAULT PAPER MODE
	JSR	@SELPMD 		; SELECT PAPER MODE
	BSR	SETTOP			; SET TOP MARGIN
	MOV.W	R0,@TOPMS:8		; SAVE TOP MARGIN AT INSERT
	CMP.B	#ZSHT,R3		;
	BCC	DP3S_1			; BR IF SHEET/ACSF MODE
	BTST.B	#QSPES,@SNSF:8		;
	BEQ	DP3S_2			; BR IF NOT SHEET PE
DP3S_1: BSR	EJCPS			; EJECT SHEET
DP3S_2: BTST.B	#QJAME,@ERRSF:8 	; CHECK EJECT STATUS
	BNE	DP3S_3			; BR IF EJECT ERROR
	BSR	DP3S_8			; INITIALIZE ACSF
DP3S_3: JSR	@LVPM			; CHANGE LEVER
	CMP.B	#ZBTM,@PAMDF:8		;
	BCC	DP3S_5			; BR IF NOT FORMS MODE
	BTST.B	#QFPES,@SNSF:8		;
	BEQ	DP3S_4			; BR IF FORMS PE
	BSET.B	#QTOPP,@DP3F:8		; SET TOP MARGIN POSITION FLAG
	MOV.W	@TOPMC:8,R3		; GET TOP MARGIN
	JSR	@SETLFP 		; SET LF POSITION COUNTER
	BRA	DP3S_5			;
					;
DP3S_8: CMP.B	#ZACF0,@PAMDF:8 	;
	BEQ	DP3S_9:16		;+++ BR IF SF-260
;+++	BEQ	INI2			; BR IF SF-260
	BHI	INIA			; BR IF MULTI BIN ACSF MODE
DP3S_9: RTS				;
					;
DP3S_4: BTST.B	#QSERVM,@MODEF:8	;
	BNE	DP3S_5			; BR IF SERVICE MODE
	BSR	INSP			; INSERT FORMS
DP3S_5: 				;
	CALMON	#FSPEE+FMONE		; ENABLE STATUS MONITOR
;	BRA	DP3STP			;
	.PAGE
;
;	WAIT PACKET
;
DP3STP: MOV.W	#DP3STK,SP		; RESET DP3 STACK
DP3WTP: JSR	@GETPKT 		; GET PACKET DATA
	MOV.W	R1,@DP3PP:8		; SAVE PACKET POINTER
	BSR	CHKVT			; CHECK PACKET DATA FOR VT/FF
	MOV.B	R2,@DP3R2S:8		; SAVE PACKET DATA
	MOV.W	R3,@DP3R3S:8		;
	MOV.W	R4,@DP3R4S:8		;
	MOV.W	@DP3PP:8,R1		;
	CMP.W	#D3HPKT,R1		; CHECK PACKET POINTER
	BEQ	DP3W_6			; BR IF HIGH PRIORITY PACKET DATA
	CMP.B	#ZPVTST,R2		;
	BLS	DP3W_4			; BR IF NO ACTION PACKET DATA
	CMP.B	#ZPFFCD,R2		;
	BCS	DP3W_8			; BR IF NOT FEED PACKET DATA
	CMP.B	#ZPPRF,R2		;
	BCS	DP3W_2			; BR IF FEED PACKET DATA
	CMP.B	#ZPPRT,R2		;
	BCS	DP3W_1			; BR IF PRINT FEED PACKET DATA
	CMP.B	#ZPPRE,R2		;
	BEQ	DP3W_4			; BR IF PRINT END PACKET DATA
	BTST.B	#QSLACT,@INTPRE 	;
	BNE	DP3W_9			; BR IF SLAVE CPU ACTIVE
	JSR	@CHKHDC 		; CHECK HEAD COOLING
	BNE	DP3WTP			; BR IF HEAD COOLING MODE
DP3W_1: BSR	CUTPR			; RETURN CUT POSITION FEED
DP3W_2: BSR	CHKPUL			; CHECK PULL OUT
	BNE	DP3W_9			; BR IF PULL OUT PAPER
	BSR	INSP3			; INSERT ACSF IF NO PAPER
	MOV.B	@DP3R2S:8,R2		; UNSAVE PACKET DATA
	MOV.W	@DP3R3S:8,R3		;
	MOV.W	@DP3R4S:8,R4		;
DP3W_3: BTST.B	#QSERVM,@MODEF:8	;
	BNE	DP3W_4			; BR IF SERVICE MODE
	BTST.B	#QSPCM,@MODEF:8 	;
	BNE	DP3W_4			; BR IF SPEC. CHANGE MODE
	MOV.B	@ERRF:8,R0		;
	BNE	DP3W_7			; BR IF ANY ERROR
	BTST.B	#QDP3S,@PRMDF:8 	;
	BNE	DP3W_9			; BR IF DP3 SUSPEND MODE
DP3W_4: MULXU.B #3,R2			;
	JSR	@(DP3JTB:16,R2) 	; EXECUTE DATA PROCESS PASS 3
	JSR	@CHKCAN 		; CHECK COMMAND CANCEL
	BNE	DP3W_9			; BR IF CANCEL DONE
DP3W_5: MOV.W	@DP3PP:8,R1		; UNSAVE CURRENT PACKET POINTER
	JSR	@RELDP3 		; RELEASE PACKET DATA
	BRA	DP3WTP			;
					;
DP3W_6: MULXU.B #3,R2			;
	JSR	@(DP3JTB:16,R2) 	; EXECUTE DATA PROCESS PASS 3
	JSR	@CHKCAN 		; CHECK COMMAND CANCEL
	BRA	DP3W_5			;
					;
DP3W_7: BSET.B	#QDP3S,@PRMDF:8 	; SET DP3 SUSPEND MODE
	BCLR.B	#QDOFF,@PSWDF:8 	; RESET PANEL SW DISABLE BY OFFLINE
	BRA	DP3W_9			;
					;
DP3W_8: BTST.B	#QSLACT,@INTPRE 	;
	BEQ	DP3W_3			; BR IF NOT SLAVE CPU ACTIVE
DP3W_9: JSR	@WTACTF 		; WAIT SLAVE CPU ACTION END
	BRA	DP3WTP			;
	.PAGE
;
;	DP3 PACKET CODE JUMP TABLE
;
DP3JTB: BRA	D3NOP:16		;  0  NOP
	BRA	D3OWN:16		;  1  OWN CODE
	BRA	D3INI:16		;  2  INITIALIZE AT MODE EXIT
	BRA	D3ON:16 		;  3  INITIALIZE AT ONLINE
	BRA	D3PE:16 		;  4  INITIALIZE AT PE
	BRA	D3OFF:16		;  5  INITIALIZE AT OFFLINE
	BRA	D3CVC:16		;  6  INITIALIZE AT COVER CLOSE
	BRA	D3IPR:16		;  7  INITIALIZE AT INPUT PRIME
	BRA	D3MDC:16		;  8  PRINT MODE CHANGE
	BRA	D3PFC:16		;  9  PRINT FORMAT CHANGE
	BRA	D3FASW:16		; 10  TOP MARGIN FWD ADJUST FEED SW
	BRA	D3RASW:16		; 11  TOP MARGIN RVS ADJUST FEED SW
	BRA	D3F1SW:16		; 12  1/180 INCH FWD FEED SW
	BRA	D3R1SW:16		; 13  1/180 INCH RVS FEED SW
	BRA	D3LFSW:16		; 14  LF SW
	BRA	D3INSW:16		; 15  INSERT SW
	BRA	D3EJSW:16		; 16  EJECT SW
	BRA	D3EJPE:16		; 17  EJECT BY PE
	BRA	D3CPSW:16		; 18  CUT POSITION FEED SW
	BRA	D3260M:16		; 19  SF-260 MODE SET
	BRA	D3PMSW:16		; 20  PAPER MODE SW
	BRA	D3HMSW:16		; 21  HEAD SHIFT MODE SW
	BRA	D3HSA1:16		; 22  HEAD SHIFT ADJUST 1
	BRA	D3HSA2:16		; 23  HEAD SHIFT ADJUST 2
	BRA	D3HSA3:16		; 24  HEAD SHIFT ADJUST 3
	BRA	D3HSA4:16		; 25  HEAD SHIFT ADJUST 4
	BRA	D3EES:16		; 26  STX + A  (EEPROM DATA SET)
	BRA	D3EEW:16		; 27  STX + W  (EEPROM WRITE)
	BRA	D38LP:16		; 28  ESC + 0  (1/8   INCH LF SET)
	BRA	D36LP:16		; 29  ESC + 2  (1/6   INCH LF SET)
	BRA	D33LP:16		; 30  ESC + 3  (n/180 INCH LF SET)
	BRA	D3ALP:16		; 31  ESC + A  (n/60  INCH LF SET)
	BRA	D3PAGL:16		; 32  ESC + C  (n LINE PAGE LENGTH SET)
	BRA	D3PAGI:16		; 33  ESC + C  (n INCH PAGE LENGTH SET)
	BRA	D3SSKP:16		; 34  ESC + N  (n LINE SKIP SET)
	BRA	D3RSKP:16		; 35  ESC + O  (SKIP PERFORATION RESET)
	BRA	D3VTCL:16		; 36  ESC + b  (VT PSOITION CLEAR)
	BRA	D3VTST:16		; 37  ESC + b  (VT POSITION SET)
	BRA	D3IPRN:16		; 38  ESC + @  (PRINTER RESET)
	BRA	D3ACSF:16		; 39  ESC + EM (ACSF CONTROL)
	BRA	D3PTYP:16		; 40  ESC + |  (PAPER CONTROL)
	BRA	EJCP2:16		; 41  FF       (EJECT ACSF)
	BRA	D3FFCD:16		; 42  FF       (FORM FEED)
	BRA	D3VTCD:16		; 43  VT       (VERTICAL TAB)
	BRA	D3LFCD:16		; 44  LF       (LINE FEED)
	BRA	D3FORJ:16		; 45  ESC + J  (FWD n/180 INCH FEED)
	BRA	D3REVJ:16		; 46  ESC + j  (RVS n/180 INCH FEED)
	BRA	D3PRF:16		; 47  CR       (FEED BY PRINT)
	BRA	D3PRG:16		; 48  CR       (FEED BY PRINT)
	BRA	D3PRT:16		; 49  CR       (PRINT)
	BRA	D3PRS:16		; 50  CR       (PRINT START)
	BRA	D3PRE:16		; 51  CR       (PRINT END)
	.PAGE
;
;	OWN CODE
;
;	IN	R3 : PARAMETER
;		R4 : OWN CODE ENTRY
;
;	OUT	NONE
;
D3OWN:	MOV.W	R3,R2			; SET PARAMETER
	MOV.W	R3,R1			; SET PARAMETER
	JMP	@R4			; GOTO OWN CODE

;
;	INITIALIZE AT POWER ON MODE EXIT
;
;	IN	NONE
;
;	OUT	NONE
;
D3INI:	JSR	@INIMEX 		; INITIALIZE AT MODE EXIT
	BSR	INIPF			; INITIALZIE DP3 PRINT FORMAT
	MOV.B	@(E2PAMD,FP),R3 	; GET POWER ON DEFAULT PAPER MODE
	BSR	D3PAMD:16		;
	JSR	@HSOPSR 		; RESET HEAD SHIFT OPEN SKIP
	MOV.B	@PAMDF:8,R3		; GET PAPER MODE
	CMP.B	#ZSHT,R3		;
	BCC	D3IN_1			; BR IF SHEET MODE
	CMP.B	#ZBTM,R3		;
	BCC	D3NOP			; BR IF NOT FORMS MODE
	BTST.B	#QFPES,@SNSF:8		;
	BEQ	INSP			; BR IF FORMS PE
D3NOP:	RTS				;

D3IN_1: BEQ	D3IN_2			; BR IF SHEET MODE
	BTST.B	#QHSAIN,@EEPBF+E2CPF2	;
	BNE	D3IN_2			; BR IF HEAD SHIFT AT INSERT
	JSR	@HSOPSS 		; SET HEAD SHIFT OPEN SKIP
D3IN_2: BRA	EJCP1			; EJECT SHEET IF NOT PE
	.PAGE
;
;	INITIALIZE AT ONLINE
;
;	IN	NONE
;
;	OUT	NONE
;
D3ON:	JSR	@PBCL			; CLOSE PAPER BAIL
	BSR	CHKPUL			; CHECK PULL OUT
	MOV.B	@ERRF:8,R0		;
	BNE	D3NOP			; BR IF ANY ERROR
	BSR	CUTPR			; RETURN CUT POSITION FEED
	JSR	@WTACTF 		; WAIT SLAVE CPU ACTION END
	MOV.B	@ERRF:8,R0		;
	BNE	D3NOP			; BR IF ANY ERROR OCCURED
	BCLR.B	#QDP3S,@PRMDF:8 	; RESET DP3 SUSPEND MODE
	JMP	@DP1ON			; OUTPUT ONLINE I/F SIGNAL

;
;	INITIALIZE AT PE/OFFLINE
;
;	IN	NONE
;
;	OUT	NONE
;
D3PE:	BTST.B	#QPE2ER,@ERRF:8 	;
	BEQ	D3OFF			; BR IF NOT PE2 ERROR
	BSR	CLRLFC			; RESET LF COUNTER
	MOV.W	#ZPHMIN,@MAXPC:8	; RESET MAX PRINT COLUMN
D3OFF:	BTST.B	#QPREM,@MODEF:8 	;
	BNE	D3OF_2			; BR IF ALREADY PRINT ENABLE MODE
	BTST.B	#QSERVM,@MODEF:8	;
	BNE	D3OF_1			; BR IF NOT SERVICE MODE
	BTST.B	#QSPCM,@MODEF:8 	;
	BNE	D3OF_1			; BR IF SPEC. CHANGE MODE
	BTST.B	#QDIPR,@PSWDF:8 	;
	BNE	D3OF_1			; BR IF INPUTPRIME RECEIVED
	BTST.B	#QCVRER,@ERRF:8 	;
	BEQ	D3OF_3			; BR IF NOT COVER OPEN
	JSR	@HSOPN1 		; OPEN HEAD SHIFT
	JSR	@CRHOME 		; MOVE CR TO HOME POSITION
	BSR	PLF1R:16		; CHECK RETURN LF POSITION
	CALMON	#FRPEO			; RESET PE OVVERIDE MODE
	BRA	D3OF_1			;
					;
D3OF_3: JSR	@HSOPN1 		; OPEN HEAD SHIFT
	JSR	@CRHOME 		; MOVE CR TO HOME POSITION
	BSR	CHKPUL			; CHECK PULL OUT
	BSR	PLF1R:16		; CHECK RETURN LF POSITION
	CALMON	#FRPEO			; RESET PE OVVERIDE MODE
	JSR	@LVPM			; CHECK LEVER AND PAPER BAIL
D3OF_1: BSET.B	#QDP3S,@PRMDF:8 	; SET DP3 SUSPEND MODE
	BCLR.B	#QDOFF,@PSWDF:8 	; RESET PANEL SW DISABLE BY OFFLINE
D3OF_2: RTS				;
	.PAGE
;
;	INITIALIZE AT COVER CLOSE
;
;	IN	R3 : WAIT TCB POINTER
;
;	OUT	NONE
;
D3CVC:	BTST.B	#QDIPR,@PSWDF:8 	;
	BNE	D3NOP			; BR IF INPUT PRIME MODE
	JSR	@HSINIT 		; INITIALIZE HEAD SHIFT
	JSR	@INIPR1 		; INITIALIZE PRINTER
	JMP	@LVPM			; CHECK LEVER AND PAPER BAIL

;
;	INITIALIZE AT INPUT PRIME
;
;	IN	NONE
;
;	OUT	NONE
;
D3IPR:	BTST.B	#QCVRER,@ERRF:8 	;
	BNE	D3IPR			; BR IF COVER ERROR
	JSR	@INIPR			; INITIALIZE PRINTER
	MOV.W	#ZPHMIN,@MAXPC:8	; RESET MAX PRINT COLUMN
	CMP.B	#ZSHT,@PAMDF:8		;
	BCS	D3IP_2			; BR IF FORMS/BOTTOM MODE
	BSR	EJCP2			; EJECT SHEET/ACSF
	BRA	D3IP_1			;
					;
D3IP_2: BSR	PLF1R:16		; CHECK RETURN LF POSITION
D3IP_1: JSR	@LVPM			; CHECK LEVER AND PAPER BAIL
;	BRA	D3MDC			;

;
;	MODE CHANGE
;
;	IN	NONE
;
;	OUT	NONE
;
D3MDC:	MOV.W	#D3LPKT,R1		;
	JSR	@RELDP3 		; RELEASE PACKET DATA
	BCS	INIPF1			; BR IF NO PACKET DATA
	CMP.B	#ZPPRT,R2		;
	BNE	D3MDC			; BR IF NOT PRINT PACKET DATA
	MOV.B	@R3,R0			; GET PRINT OPTION FLAG
	JSR	@RELPRB 		; RELEASE PRINT BUFFER
	BRA	D3MDC			;

;
;	PRINT FORMAT CHANGE
;
;	IN	NONE
;
;	OUT	NONE
;
D3PFC:	BSR	INIPF2			; INITIALIZE PRINT FORMAT
	BRA	SETTOP			; SET TOP MARGIN
	.PAGE
;
;	TOP MARGIN ADJUST FEED SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3FASW: BTST.B	#QTOPP,@DP3F:8		;
	BEQ	D3RA_1			; BR IF NOT TOP MARGIN POSITION
	CMP.W	#ZXTOP*ZF180,@TOPMS:8	;
	BCC	D3RA_1			; BR IF ALREADY MAX
	BSR	D3F1SW			; FORWARD FEED 1/180 INCH
	BNE	D3RA_1			; BR IF FEED CANCEL
	ADD.W	@TOPMS:8,R3		; UPDATE TOP MARGIN
	MOV.W	R3,@TOPMS:8		;
	MOV.W	R3,@TOPMC:8		; UPDATE TOP MARGIN COUNTER
	RTS				;

D3RASW: BTST.B	#QTOPP,@DP3F:8		;
	BEQ	D3RA_1			; BR IF NOT TOP MARGIN POSITION
	CMP.W	#ZNTOP*ZF180,@TOPMS:8	;
	BLS	D3RA_1			; BR IF ALREADY MIN
	BSR	D3R1SW			; REVERSE FEED 1/180 INCH
	BNE	D3RA_1			; BR IF FEED CANCEL
	NEG.W	R3			;
	ADD.W	@TOPMS:8,R3		; UPDATE TOP MARGIN
	MOV.W	R3,@TOPMS:8		;
	MOV.W	R3,@TOPMC:8		; UPDATE TOP MARGIN COUNTER
D3RA_1: RTS				;

;
;	1/180 INCH FEED  SW
;
;	IN	NONE
;
;	OUT	R3 : FEED COUNT
;		 Z : 0=COMMAND CANCEL
;
D3F1SW: JSR	@SWTONE 		; CLICK TONE ON
	BSR	CHKPUL			; CHECK PULL OUT
	BNE	D3RA_1			; BR IF PULL OUT PAPER
	MOV.W	#ZF180,R3		;
	JMP	@FEEDF1 		; FORWARD FEED 1/180 INCH

D3R1SW: JSR	@SWTONE 		; CLICK TONE ON
	BSR	CHKPUL			; CHECK PULL OUT
	BNE	D3RA_1			; BR IF PULL OUT PAPER
	CALMON	#FSPED			; SET PE CHECK DISABLE
	MOV.W	#ZF180,R3		;
	JSR	@FEEDR1 		; REVERSE FEED 1/180 INCH
	JSR	@WTACTF 		; WAIT FEED END
	CALMON	#FSPEE			; SET PE CHECK ENABLE
	BTST.B	#QCCAND,@PRLFF:8	; CHECK COMMAND CANCEL STATUS
	RTS
	.PAGE
;
;	LF SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3LFSW: JSR	@SWTONE 		; CLICK TONE ON
	CMP.B	#ZSHT,@PAMDF:8		;
	BCS	D3LF_5			; BR IF NOT SHEET/ACSF MODE
	BSR	INSPS			; INSERT SHEET
D3LF_5: BSR	D3LF_4			; FEED 1 LINE
	MOV.W	#10-1,R3		; SET 500mS LOOP COUNT
D3LF_1: MOV.W	#50/ZTI,R2		;
	WAITSK				; WAIT 50mS
	MOV.B	@PSWDF:8,R0		;
	BNE	D3LF_3			; BR IF PANEL SW DISABLE
	BTST.W	#QSW6,@SWSF:8		;
	BEQ	D3LF_3			; BR IF LF SW OFF
	SCB/F	R3,D3LF_1		; BR IF NOT 500mS TIME OUT
D3LF_2: JSR	@SWTONE 		; CLICK TONE ON
	BSR	D3LF_4			; FEED 1 LINE
	MOV.B	@PSWDF:8,R0		;
	BNE	D3LF_3			; BR IF PANEL SW DISABLE
	BTST.W	#QSW6,@SWSF:8		;
	BNE	D3LF_2			; BR IF LF SW ON
D3LF_3: RTS				;
	;
D3LF_4: CLR.B	R2			; RESET FEED COUNT HIGH
	MOV.W	@LFS:8,R3		; GET LF PITCH
	BCLR.B	#QCCAND,@PRLFF:8	; RESET COMMAND CANCEL DONE
	BRA	FWDLF:16		; FEED 1 LINE
	.PAGE
;
;	FF/INSERT SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3INSW: JSR	@SWTONE 		; CLICK TONE ON
	BTST.B	#QINSM,@PRMDF:8 	;
	BEQ	INSP2			; BR IF NOT INSERT MODE
	CMP.B	#ZSHT,@PAMDF:8		;
	BCC	EJCPX			; BR IF SHEET/ACSF MODE
	BSR	CHKCUT			; CHECK TEAR OFF CONDITION
	BEQ	D3FF:16 		; BR IF CUT POSITION FEED NG
	MOV.W	@CUTC:8,R2		; GET CUT POSITION FEED COUNT
	BNE	D3CP1:16		; BR IF ALREADY CUT POSITION
	BTST.B	#QTOFFM,@DP3F:8 	;
	BEQ	D3FF:16 		; BR IF NOT TEAR OFF MODE
	BRA	D3CP			;

;
;	EJECT SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3EJSW: CMP.B	#ZBTM,@PAMDF:8		;
	BCS	D3EJ_1			; BR IF NOT BOTTOM MODE
	CMP.B	#ZSHT,@PAMDF:8		;
	BCC	D3EJ_1			; BR IF NOT BOTTOM MODE
	MOV.B	@SNSF:8,R0		; GET SENSOR STATUS
	AND.B	#XFPES+XSPES,R0 	;
	BNE	D3EJ_1			; BR IF EXIST FORMS/SHEET PAPER
	JSR	@CHKEJC 		; CHECK BOTTOM EJECT DONE
	BEQ	D3EJ_2			; BR IF ALREADY EJECT DONE
D3EJ_1: JSR	@SWTONE 		; CLICK TONE ON
	BRA	EJCPX			; EJECT PAPER

;
;	EJECT AT PE
;
;	IN	NONE
;
;	OUT	NONE
;
D3EJPE: CMP.B	#ZACF0,@PAMDF:8 	;
	BCC	D3EJ_3			; BR IF ACSF MODE
	BTST.B	#QPE2ER,@ERRF:8 	;
	BNE	D3EJ_4			; BR IF PE2 ERROR
D3EJ_2: RTS				;
					;
D3EJ_3: BTST.B	#QINSM,@PRMDF:8 	;
	BNE	D3EJ_2			; BR IF NOT ACSF PE
D3EJ_4: MOV.W	#ZPHMIN,@MAXPC:8	; RESET MAX PRINT COLUMN
	BRA	EJCP1			; EJECT PAPER
	.PAGE
;
;	CUT PSOITION FEED SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3CPSW: BSR	CHKCUT			; CHECK CUT FEED CONDITION
	BEQ	D3CP_3			; BR IF NOT CUT POSITION FEED
	MOV.W	@CUTC:8,R2		; GET CUT POSITION FEED COUNT
	BNE	D3CP_5			; BR IF ALREADY CUT POSITION
	JSR	@SWTONE 		; CLICK TONE ON
	MOV.B	@LFHC:8,R2		;
	BNE	D3CP			; BR IF NOT TOF POSITION
	MOV.W	@LFC:8,R3		; GET LF COUNTER
	BEQ	D3CP_1			; BR IF TOF POSITION
D3CP:	MOV.W	@PGLS1:8,R3		; GET PAGE LENGTH
	MOV.B	@PGLHS1:8,R2		;
	SUB.W	@LFC:8,R3		; CALCULATE FEED PULSE COUNT
	SUBX.B	@LFHC:8,R2		;
D3CP_1: MOV.W	@LFC1:8,R1		; GET MULTI PASS PRINT LF COUNTER 1
	BPL	D3CP_2			; BR IF REVERSE ADJUST CASE
	NEG.W	R1			;
D3CP_2: SUB.W	R1,R3			; ADJUST FEED COUNT
	SUBX.B	#0,R2			;
	MOV.W	@TOPMS:8,R1		; GET TOP MARGIN POSITION
	JSR	@CUTPF			; FEED TO NEXT CUT POSITION
	BNE	D3CP_4			; BR IF FEED CANCEL
D3CP_7: MOV.W	R5,R3			; GET CUT POSITION
	JSR	@SETLFP 		; SET LF POSITION
	SUB.W	@TOPMS:8,R3		; CALCULATE CUT POSITION FEED COUNT
	MOV.W	R3,@CUTC:8		; SET CUT POSITION FEED COUNTER
	BEQ	D3CP_3			; BR IF NO CUT POSITION FEED
	BCLR.B	#QTOPP,@DP3F:8		; RESET TOP MARGIN POSITION FLAG
D3CP_3: CLR.W	R0			;
	MOV.W	R0,@LFC:8		; RESET LF COUNTER
	MOV.B	R0,@LFHC:8		;
	BSR	SETPEE			; SET PE CHECK ENABLE
	MOV.W	R0,@LFC1:8		; RESET PRINT LF COUNTER 1
	MOV.W	R0,@LFC2:8		; RESET PRINT LF COUNTER 2
D3CP_4: RTS				;

D3CP_5: MOV.B	@LFHC:8,R2		;
	BNE	D3CP_6			; BR IF NOT TOF POSITION
	MOV.W	@LFC:8,R3		; GET LF COUNTER
	BEQ	D3CP_4			; BR IF TOF POSITION
D3CP_6: JSR	@SWTONE 		; CLICK TONE ON
D3CP1:	MOV.W	@PGLS1:8,R3		; GET PAGE LENGTH
	MOV.B	@PGLHS1:8,R2		;
	SUB.W	@LFC:8,R3		; CALCULATE FEED PULSE COUNT
	SUBX.B	@LFHC:8,R2		;
	BSR	FWDLF1:16		; FEED TO NEXT TOF POSITION
	BNE	D3CP_4			; BR IF FEED CANCEL
	JSR	@CUTPF1 		; GET CUT POSITION
	BRA	D3CP_7			;
	.PAGE
;
;	SF-260 AUTO/MANUL MODE SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3260M: MOV.B	@OPTF:8,R0		;
	AND.B	#XACSW+XSELA,R0 	;
	BNE	D326_3			; BR IF NOT SF-260 ATTACHED
	CMP.B	#ZSHT,@PAMDF:8		;
	BCC	D326_1			; BR IF SHEET/ACSF MODE
	CALMON	#FCPES			; CHECK PAPER MODE
	RTS				;
					;
D326_1: MOV.B	#ZSHT,R3		;
	BTST.B	#QMNSW,@OPTF:8		;
	BNE	D326_2			; BR IF SF-260 MANUAL MODE
	MOV.B	#ZACF0,R3		;
D326_2: CMP.B	@PAMDF:8,R3		;
	BEQ	D326_3			; BR IF NOT PAPER MODE CHANGE
	MOV.B	R3,@DP3R3S+1:8		; SET NEW APAER MODE
	BCLR.B	#QJAME,@ERRSF:8 	; RESET EJECT JAM STATUS
	BCLR.B	#QJAMI,@ERRSF:8 	; RESET INSERT JAM STATUS
	JSR	@HSOPSR 		; RESET HEAD SHIFT OPEN SKIP
	MOV.B	@DP3R3S+1:8,R3		; GET NEW PAPER MODE
	JSR	@SETPMD 		; SET NEW PAPER MODE
	BSR	SETTOP			; SET TOP MARGIN
	CALMON	#FRPEO			; RESET PE OVERRIDE MODE AND CHECK PE
	MOV.B	@PAMDF:8,R3		;
	CALIOS	#DSPPAM 		; DISPALY OLD PAPER MODE
D326_3: RTS				;
	.PAGE
;
;	PAPER MODE SW
;
;	IN	R3 : PAPER MODE
;
;	OUT	NONE
;
D3PMSW: CMP.B	#ZSHT,R3		;
	BCS	D3PAMD			; BR IF FORMS/BOTTOM MODE
	MOV.B	@OPTF:8,R0		;
	AND.B	#XACSW+XSELA,R0 	;
	BNE	D3PAMD			; BR IF NOT SF-260 ATTACHED
	MOV.B	#ZSHT,R3		;
	BTST.B	#QMNSW,@OPTF:8		;
	BNE	D3PAMD			; BR IF SF-260 MANUAL MODE
	MOV.B	#ZACF0,R3		;
D3PAMD: MOV.B	R3,@DP3R3S+1:8		; SET NEW PAPER MODE
	JSR	@CHKPMD 		;
	BEQ	D3PM_2			; BR IF INVALID PAPER MODE
	CMP.B	@PAMDF:8,R3		;
	BEQ	D3PM_2			; BR IF NOT PAPER MODE CHANGE
	CALMON	#FSPED			; SET PE CHECK DISABLE
	BCLR.B	#QJAME,@ERRSF:8 	; RESET EJECT JAM STATUS
	BCLR.B	#QJAMI,@ERRSF:8 	; RESET INSERT JAM STATUS
	JSR	@HSOPSR 		; RESET HEAD SHIFT OPEN SKIP
	MOV.B	@DP3R3S+1:8,R3		; GET NEW PAPER MODE
	MOV.B	@PAMDF:8,R4		; GET OLD PAPER MODE
	BSR	D3PM_3			; EJECT OLD PAPER
	BTST.B	#QJAME,@ERRSF:8 	;
	BNE	D3PM_1			; BR IF EJECT ERROR
	MOV.B	@DP3R3S+1:8,R3		;
	JSR	@SETPMD 		; SET NEW PAPER MODE
	BSR	SETTOP			; SET TOP MARGIN
	JSR	@LVPM			; CHANGE LEVER
	CMP.B	#ZBTM,R3		;
	BCC	D3PM_1			; BR IF NEW <> FORMS MODE
	BTST.B	#QFPES,@SNSF:8		;
	BNE	D3PM_1			; BR IF ALREADY PAPER PRESENT
	BSR	INSP			; INSERT FORMS
D3PM_1: 				;
	CALMON	#FRPEO			; RESET PE OVERRIDE MODE AND CHECK PE
	CALMON	#FSPEE			; SET PE CHECK ENABLE
	MOV.B	@PAMDF:8,R3		;
	CALIOS	#DSPPAM 		; DISPALY OLD PAPER MODE
D3PM_2: RTS				;
					;
D3PM_3: CMP.B	#ZBTM,R3		;
	BCC	D3PM_4			; BR IF NEW <> FORMS MODE
	CMP.B	#ZBTM,R4		;
	BCC	EJCPP			; BR IF OLD <> FORMS MODE
	RTS				;
					;
D3PM_4: CMP.B	#ZSHT,R3		;
	BCC	D3PM_5			; BR IF NEW <> BOTTOM MODE
	CMP.B	#ZBTM,R4		;
	BCS	EJCPP			; BR IF OLD <> BOTTOM MODE
	CMP.B	#ZSHT,R4		;
	BCC	EJCPP			; BR IF OLD <> BOTTOM MODE
	RTS				;
					;
D3PM_5: CMP.B	#ZACF0,R3		;
	BCC	D3PM_6			; BR IF NEW = ACSF MODE
	CMP.B	#ZSHT,R4		;
	BCS	EJCPP			; BR IF OLD <> SHEET/ACSF MODE
	RTS				;
					;
D3PM_6: CMP.B	#ZACF1,R3		;
	BCC	D3PM_7			; BR IF NEW = MULTI BIN ACSF MODE
	CMP.B	#ZSHT,R4		;
	BCC	D3PM_8			; BR IF OLD = SHEET/ACSF MODE
	BSR	EJCPP			; EJECT PAPER IF BEFORE EJECT
	BTST.B	#QJAME,@ERRSF:8 	; CHECK EJECT STATUS
	BEQ	INI2			; BR IF NOT EJECT ERROR
	RTS				;
					;
D3PM_7: CMP.B	#ZACF1,R4		;
	BCC	D3PM_8			; BR IF OLD = MULTI BIN ACSF MODE
	BSR	EJCPP			; EJECT PAPER IF BEFORE EJECT
	BTST.B	#QJAME,@ERRSF:8 	; CHECK EJECT STATUS
	BEQ	INIA			; BR IF NOT EJECT ERROR
D3PM_8: RTS				;
	.PAGE
;
;	HEAD SHIFT MODE SW
;
;	IN	NONE
;
;	OUT	NONE
;
D3HMSW:
	LEDCHK	#QLMNH			;
	BNE	D3PM_8			; BR. IF LED OFF
	JSR	@SWTONE 		; CLICK TONE ON
	JMP	@HSMDCH 		; CHANGE HEAD SHIFT MODE

;
;	HEAD SHIFT ADJUST
;
;	IN	R3 : PAPARMETER
;
;	OUT	NONE
;
D3HSA1: BSR	EJCP1			; EJECT PAPER
	MOV.W	@DP3R3S:8,R3		;
	JMP	@HSADJ1 		; HEAD SHIFT ADJUST 1

D3HSA2: BSR	EJCP1			; EJECT PAPER
	MOV.W	@DP3R3S:8,R3		;
	JMP	@HSADJ2 		; HEAD SHIFT ADJUST 2

D3HSA3: BSR	EJCP1			; EJECT PAPER
	MOV.W	@DP3R3S:8,R3		;
	JMP	@HSADJ3 		; HEAD SHIFT ADJUST 3

D3HSA4: BSR	EJCP1			; EJECT PAPER
	JMP	@HSPUOP 		; HEAD SHIFT ADJUST 4
	.PAGE
;
;	STX + A  (EEPROM DATA SET)
;
;	IN	R3 : EEPROM BYTE DATA
;		R4 : EEPROM BYTE ADDRESS
;
;	OUT	NONE
;
D3EES:	MOV.W	#EEPBF,FP		;
	MOV.B	R4,FP			; GET EEPROM BUFFER POINTER
	MOV.B	R3,@FP			; SET EEPROM DATA
	CMP.B	#E2OPCS,R4		;
	BCS	D3EE_2			; BR IF NOT SLAVE CPU DATA
	CMP.B	#E2OPCB+2,R4		;
	BCS	DTOPC			; BR IF PE CHECK COUNT
	CMP.B	#E2PRA1,R4		;
	BCS	D3EE_2			; BR IF NOT SLAVE CPU DATA
	CMP.B	#E2ADV,R4		;
	BCS	D3EE_1			; BR IF PRINT POSITION ADJUST
	CMP.B	#E2ADV+1,R4		;
	BEQ	SETADV			; BR IF TOP SENSOR A/D THRESHOLD
	CMP.B	#E2CON,R4		;
	BEQ	SETLCD			; BR IF LCD CONTRAST
	CMP.B	#E2PRAV,R4		;
	BNE	D3EE_2			; BR IF NOT USER PRINT ADJUST VALUE
D3EE_1: MOV.B	@EEPBF+E2PRAV,R2	; GET USER CORRECTION VALUE
	JMP	@DTPAV			;

;
;	STX + W  (EEPROM WRITE)
;
;	IN	NONE
;
;	OUT	NONE
;
D3EEW:					;
	CALIOS	#EESAVE 		; SAVE DATA TO EEPROM
D3EE_2: RTS				;
	.PAGE
;
;	ESC + 0  (1/8 INCH LF PITCH SET)
;
;	IN	NONE
;
;	OUT	NONE
;
D38LP:	MOV.W	#Z8LPI,@LFS:8		; SET 1/8 INCH
	RTS				;

;
;	ESC + 2  (1/6 INCH LF PITCH SET)
;
;	IN	NONE
;
;	OUT	NONE
;
D36LP:	MOV.W	#Z6LPI,@LFS:8		; SET 1/6 INCH
	RTS				;

;
;	ESC + 3 + n  (n/180 INCH LF PITCH SET)
;
;	IN	R3 : n
;
;	OUT	NONE
;
D33LP:
;921125 MULXU.B #ZF180,R3		; CONVERT TO 1/360 INCH PITCH
	MULXU.B #ZF120,R3		; 921125
	MOV.W	R3,@LFS:8		; SET n/180 INCH
	RTS				;

;
;	ESC + A + n  (n/60 INCH LF PITCH SET)
;
;	IN	R3 : n
;
;	OUT	NONE
;
D3ALP:	BCLR.B	#QMSB,R3		; IGNORE MSB
	MULXU.B #ZF60,R3		; CONVERT TO 1/360 INCH PITCH
	MOV.W	R3,@LFS:8		; SET n/60 INCH
D3AL_1: RTS				;
	.PAGE
;
;	ESC + C + n  (n LINE PAGE LENGTH SET)
;
;	IN	R3 : n
;
;	OUT	NONE
;
D3PAGL: AND.B	#ZN-ZMSB,R3		; IGNORE MSB
	BEQ	D3RSKP			; BR IF n = 0
	MOV.W	@LFS:8,R0	;1006	;
;	MOV.W	#60,R0			; 921006
	BEQ	D3RSKP			; BR IF LF PITCH = 0
	BRA	D3PAG			;

;
;	ESC + C + 0 + n  (n INCH PAGE LENGTH SET)
;
;	IN	R3 : n
;
;	OUT	NONE
;
D3PAGI: AND.B	#ZN-ZMSB,R3		; IGNORE MSB
	BEQ	D3RSKP			; BR IF n = 0
	CMP.B	#22,R3			;
	BHI	D3RSKP			; BR IF n > 22
	MOV.W	#ZFINCH,R0		;
D3PAG:	EXTU	R3			;
	MULXU.W R3,R0			; CALCULATE n/180 INCH PAGE LENGTH
	MOV.W	R1,@PGLS1:8		; SET PAGE LENGTH 1
	MOV.B	R0,@PGLHS1:8		;
	MOV.W	R1,@PGLS2:8		; SET PAGE LENGTH 2
	MOV.B	R0,@PGLHS2:8		;
	CLR.W	@LFC:8			; RESET LF COUNTER
	CLR.B	@LFHC:8 		;
	RTS				;
	.PAGE
;
;	ESC + N + n  (n LINE SKIP PERFORATION SET)
;
;	IN	R3 : n
;
;	OUT	NONE
;
D3SSKP: AND.B	#ZN-ZMSB,R3		; IGNORE MSB
	BEQ	D3SK_2			; BR IF n = 0
	MOV.W	@LFS:8,R0		; GET LF PITCH
D3SKP:	EXTU	R3			;
	MULXU.W R3,R0			; CALCULATE n/180 INCH PAGE LENGTH
	MOV.W	@PGLS1:8,R3		; GET PAGE LENGTH 1
	MOV.B	@PGLHS1:8,R2		;
	SUB.W	R1,R3			; CALCULATE PAGE LENGTH 2
	SUBX.B	R0,R2			;
	BCS	D3SK_2			; BR IF PAGE LENGTH 2 > PAGE LENGTH 1
	BNE	D3SK_1			; BR IF PAGE LENGTH 2 < PAGE LENGTH 1
	TST.W	R3			;
	BEQ	D3SK_2			; BR IF PAGE LENGTH 2 = PAGE LENGTH 1
D3SK_1: MOV.W	R3,@PGLS2:8		; SET PAGE LENGTH 2
	MOV.B	R2,@PGLHS2:8		;
D3SK_2: RTS				;

;
;	ESC + O  (SKIP PERFORATION RESET)
;
;	IN	NONE
;
;	OUT	NONE
;
D3RSKP: MOV.W	@PGLS1:8,R3		; GET PAGE LENGTH 1
	MOV.B	@PGLHS1:8,R2		;
	MOV.W	R3,@PGLS2:8		; SET PAGE LENGTH 2
	MOV.B	R2,@PGLHS2:8		;
	RTS				;
	.PAGE
;
;	ESC + b  (VT POSITION CLEAR)
;
;	IN	R4 : CHANNEL
;
;	OUT	NONE
;
D3VTCL: CLR.W	FP			;
	MOV.B	R4,FP			; GET VT CHANNEL
	CLR.B	@(VTC,FP)		; RESET VT COUNTER
	RTS				;

;
;	ESC + B  (VT POSITION SET)
;	ESC + b  (VT POSITION SET)
;
;	IN	R3 : nTH LINE VT POSITION
;		R4 : CHANNEL
;
;	OUT	NONE
;
D3VTST: CLR.W	FP			;
	MOV.B	R4,FP			; GET VT CHANNEL
	MOV.B	@(VTC,FP),R0		; GET VT COUNT
	CMP.B	#ZXVTC,R0		;
	BCC	D3VT_1			; BR IF ALREADY MAX COUNT
	ADD.B	#1,@(VTC,FP)		; UPDATE VT COUNTER
	MULXU.B #ZXVTC*3,FP		; CALCULATE VT BUFFER OFFSET
	ADD.W	#VTBF,FP		; ADD VT BUFFER BASE ADDRESS
	ADDS.B	R0,FP			;
	ADDS.B	R0,FP			;
	ADDS.B	R0,FP			;
	MOV.W	@LFS:8,R0		; GET LF PITCH
	EXTU	R3			;
	MULXU.W R3,R0			; CALCULATE n/180 INCH PAGE LENGTH
	MOV.B	R0,@FP			;
	MOV.B	R1,@(2,FP)		; SET VT POSITION
	SWAP	R1			;
	MOV.B	R1,@(1,FP)		;
D3VT_1: RTS				;
	.PAGE
;
;	ESC + @  (PRINTER RESET)
;
;	IN	NONE
;
;	OUT	NONE
;
D3IPRN: JSR	@INIPR			; INITIALIZE PRINTER MECHANISM
	BRA	INIPF1			; INITIALIZE PRINT FORMAT

;
;	SELECT ASCF CONTROL FUNCTION
;
;	IN	R3 : FUNCTION CODE
;
;	OUT	NONE
;
D3ACSF: CMP.B	#ZACF0,@PAMDF:8 	;
	BCS	D3AC_2			; BR IF NOT ACSF MODE
	BEQ	D3AC_1			; BR IF SF-260 MODE
	BTST.B	#QINSM,@PRMDF:8 	;
	BNE	D3AC_1			; BR IF NOT ACSF PE
	CMP.B	#"0",R3                 ;
	BEQ	D3AC_3			; BR IF SHEET MODE SELECT
	CMP.B	#"1",R3                 ;
	BEQ	D3AC_4			; BR IF ACSF 1ST BIN SELECT
	CMP.B	#"2",R3                 ;
	BEQ	D3AC_4			; BR IF ACSF 2ND BIN SELECT
D3AC_1: CMP.B	#"R",R3                 ;
	BEQ	EJCP2			; BR IF EJECT FUNCTION
D3AC_2: RTS				;
					;
D3AC_3: MOV.B	#"1"+ZSHT-ZACF1,R3      ;
D3AC_4: SUB.B	#"1"-ZACF1,R3           ; MAKE PAPER MODE NO.
	BRA	D3PAMD			; CHANGE PAPER MODE
	.PAGE
;
;	SELECT PAPER CONTROL FUNCTION
;
;	IN	R3 : FUNCTION CODE
;
;	OUT	NONE
;
D3PTYP: CMP.B	#"0",R3                 ;
	BEQ	D3PT_3			; BR IF SHEET MODE SELECT
	CMP.B	#"1",R3                 ;
	BEQ	D3PT_2			; BR IF ACSF 1ST BIN SELECT
	CMP.B	#"2",R3                 ;
	BEQ	D3PT_2			; BR IF ACSF 2ND BIN SELECT
	CMP.B	#"3",R3                 ;
	BEQ	D3PT_2			; BR IF ACSF 3RD BIN SELECT
	CMP.B	#"4",R3                 ;
	BEQ	INSP3			; BR IF INSERT FUNCTION
	CMP.B	#"F",R3                 ;
	BEQ	D3PT_4			; BR IF FORMS MODE SELECT
	CMP.B	#"f",R3                 ;
	BEQ	D3PT_5			; BR IF PAPER HOTCHKISS FORMS SELECT
	CMP.B	#"R",R3                 ;
	BEQ	EJCPX			; BR IF EJECT FUNCTION
D3PT_1: RTS				;
					;
D3PT_2: BTST.B	#QACSW,@OPTF:8		;
	BNE	D3PT_1			; BR IF NO ACSF ATTACHED
	SUB.B	#"1"-ZACF1,R3           ; MAKE PAPER MODE NO.
	JSR	@CHKPMD 		;
	BNE	D3PAMD			; BR IF VALID PAPER MODE
	MOV.B	#ZACF2,R3		; SELECT ACSF1 MODE
	CMP.B	#(XMNSW+XSELA)/4,R0	;
	BEQ	D3PAMD			; BR IF 2 BIN ACSF ATTACHED
D3PT_3: MOV.B	#ZSHT,R3		; SELECT SHEET MODE
	JSR	@CHKPMD 		;
	BNE	D3PAMD			; BR IF VALID PAPER MODE
	MOV.B	#ZACF0,R3		; SELECT ACSF0 MODE
	BRA	D3PAMD			;
					;
D3PT_4: MOV.B	#ZFORM,R3		; SELECT FORMS MODE
	BRA	D3PAMD			;
					;
D3PT_5: MOV.B	#ZFORMP,R3		; SELECT PAPER HOTCHKISS FORMS MODE
	BRA	D3PAMD			;
	.PAGE
;
;	FORM FEED
;
;	IN	NONE
;
;	OUT	NONE
;
D3FFCD: BSR	STERCC			; SET ERROR CHECK CONDITION
	BSR	CHKCUT			; CHECK CUT POSITION
	BEQ	D3FF			; BR IF NOT CUT POSITION FEED
	MOV.W	@CUTC:8,R2		; GET CUT POSITION FEED COUNT
	BNE	D3FF_2			; BR IF ALREADY CUT POSITION
	BTST.B	#QTOFFM,@DP3F:8 	;
	BEQ	D3FF			; BR IF NOT TEAR OFF MODE
	BTST.B	#QPBDI,@PRBFF:8 	;
	BNE	D3FF			; BR IF PRINT DATA IN PACKET
	BTST.B	#QPRFST,@PRMDF:8	;
	BNE	D3FF			; BR IF EXIST DATA FOR TEXT BUFFER
	MOV.W	@DABDC:8,R0		;
	BNE	D3FF			; BR IF INPUT DATA
	BSR	D3CP			; FEED FOR CUT POSITION
	BRA	RPEOV			; RESET PE OVERRIDE

D3FF_2: BSR	D3CP1			; CUT POSITION FEED
	BRA	RPEOV			; RESET PE OVERRIDE

D3FF:	MOV.W	@PGLS1:8,R3		; GET PAGE LENGTH 1
	MOV.B	@PGLHS1:8,R2		;
	SUB.W	@LFC:8,R3		; CALCULATE FEED PULSE COUNT
	SUBX.B	@LFHC:8,R2		;
	BSR	FWDLF1:16		; FEED TO NEXT TOF POSITION
RPEOV:	BTST.B	#QPEOVM,@PRMDF:8	;
	BEQ	RPEO_1			; BR IF NOT PE OVERRIDE MODE
	JSR	@WTACTF 		; WAIT FEED END
	CALMON	#FRPEO			; RESET PE OVERRIDE MODE
RPEO_1: RTS				;
	.PAGE
;
;	VT
;
;	IN	R4 : VT CHANNEL
;
;	OUT	NONE
;
D3VTCD: MOV.B	R4,FP			; GET VT CHANNEL
	MULXU.B #ZXVTC*3,FP		;
	ADD.W	#VTBF,FP		; GET VT BUFFER POINTER
D3VT_9: MOV.B	@FP+,R2 		; GET VT POSITION
	MOV.B	@FP+,R3 		;
	SWAP	R3			;
	MOV.B	@FP+,R3 		;
	SUB.W	@LFC:8,R3		; CALCULATE FEED COUNT
	SUBX.B	@LFHC:8,R2		;
	BLS	D3VT_9			; BR IF NOT VT HIT
	BSR	STERCC			; SET ERROR CHECK CONDITION
	BRA	D3LF1			; FEED TO NEXT VT POSITION
	.PAGE
;
;	LF
;
;	IN	NONE
;
;	OUT	NONE
;
D3LFCD: BSR	STERCC			; SET ERROR CHECK CONDITION
D3LF:	CLR.B	R2			; RESET FEED COUNT HIGH
	MOV.W	@LFS:8,R3		; GET LF PITCH
D3LF1:	TST.B	R2			;
	BNE	D3LF_A			; BR IF ENOUGH FEED COUNT
	CMP.W	#ZF20P,R3		;
	BCS	D3LF_E			; BR IF NOT ENOUGH FEED COUNT
D3LF_A: MOV.B	@SNSF:8,R0		; GET SENSOR STATUS
	AND.B	#XBPES+XFPES+XSPES,R0	;
	BEQ	D3LF_E			; BR IF NO PAPER
	MOV.W	R3,FP			;
	MOV.W	R2,@-SP 		;
	MOV.W	@DP3PP:8,R1		;
	LKNPKT				; LOOK NEXT PACKET DATA
	BCS	D3LF_C			; BR IF NO NEXT PACKET DATA
	MOV.W	FP,R3			; UNSAVE FEED COUNT
	BCLR.B	#QWACTF,R2		; RESET ACTION WAIT FLAG
	CMP.B	#ZPPRS,R2		;
	BNE	D3LF_D			; BR IF NOT PRINT START PACKET DATA
	TST.W	R4			;
	BPL	D3LF_D			; BR IF NOT REVERSE FEED PRINT
	MOV.W	@SP+,R2 		;
	MOV.W	@LFC1:8,R5		; GET CURRENT PRINT FEED COUNT
	MOV.W	R5,@-SP 		;
	MOV.W	R4,@-SP 		;
	SUB.W	R4,R5			;
	MOV.W	R5,@LFC1:8		; ADJUST PRINT FEED COUNTER
	BSR	FWDLF			; FEED FORWARD
	BNE	D3LF_B			; BR IF FEED CANCEL
	MOV.W	@SP+,R4 		;
	MOV.W	@SP+,R5 		;
	MOV.W	R4,@LFC1:8		; SET NEW PRINT FEED COUNT
	BRA	RPEOV			; RESET PE OVERRIDE
					;
D3LF_B: MOV.W	@SP+,R4 		;
	MOV.W	@SP+,R5 		;
	MOV.W	R5,@LFC1:8		; UNSAVE PRINT FEED COUNT
	BRA	RPEOV			; RESET PE OVERRIDE
					;
D3LF_C: MOV.W	@SP+,R2 		;
	MOV.W	FP,R3			;
	BSET.B	#QLFCE,@DP3F:8		; SET LF CANCEL ENABLE
	BSR	FWDLF			; FEED FORWARD
	BCLR.B	#QLFCE,@DP3F:8		; RESET LF CANCEL ENABLE
	MOV.B	@ERRF:8,R0		;
	BNE	RPEOV			; BR IF ANY ERROR
	JSR	@CHKCAN 		; RESET COMMAND CANCEL FLAG
	BEQ	RPEOV			; BR IF NOT FEED CANCEL
	BSR	STERCC			; SET ERROR CHECK CONDITION
	BRA	D3LF1			; RETRY FEED
					;
D3LF_D: MOV.W	@SP+,R2 		;
D3LF_E: BSR	FWDLF			; FEED FORWARD
	BRA	RPEOV			; RESET PE OVERRIDE
	.PAGE
;
;	CANCEL LF COMMAND FOR REVERSE FEED PRINT
;
;	IN	NONE
;
;	OUT	R4 : NOT CHNAGE
;		FP : NOT CHANGE
;
LFCAN:	BTST.B	#QLFCE,@DP3F:8		;
	BNE	CMDCAN			; BR IF CANCEL ENABLE
	RTS				;

;
;	ESC + J + n  (FORWARD FEED)
;
;	IN	R3 : FEED COUNT
;
;	OUT	NONE
;
D3FORJ: BSR	STERCC			; SET ERROR CHECK CONDITION
	CLR.B	R2			;
;921110 MULXU.B #ZF180,R3		; CALCULATE FEED COUNT
	MULXU.B #ZF120,R3		;
	BRA	D3LF1			; FEED n/180 INCH
	.PAGE
;
;	FORWARD FEED
;
;	IN   R2-R3 : FEED COUNT
;
;	OUT  R2-R3 : NOT CHNAGE
;		 Z : 0=FEED CANCEL
;
FWDLF:	CMP.B	#ZSHT,@PAMDF:8		;
	BCC	FWDLF1			; BR IF SHEET/ACSF MODE
	BSR	FWDLF2:16		; GET NEW LF COUNTER
	CMP.W	@PGLS2:8,R1		;
	SUBX.B	@PGLHS2:8,R0		;
	BCS	FWDLF1			; BR IF NOT SKIP REGION
	MOV.W	@PGLS1:8,R3		;
	MOV.B	@PGLHS1:8,R2		;
	SUB.W	@LFC:8,R3		; CORRECT FEED PULSE COUNT
	SUBX.B	@LFHC:8,R2		;
FWDLF1: BSR	CHKPUL			; CHECK PULL OUT
	BNE	FWDL_2			; BR IF PAPER PULL OUT
	MOV.W	R3,@-SP 		;
	MOV.W	R2,@-SP 		;
	MOV.W	@LFC1:8,R1		; GET MULTI PASS PRINT LF COUNTER 1
	BMI	FWDL_3			; BR IF FORWARD ADJUST CASE
	SUB.W	R1,R3			;
	SUBX.B	#0,R2			;
	BCC	FWDL_4			; BR IF FORWARD FEED
	NOT.W	R3			;
	NOT.B	R2			;
	ADD.W	#1,R3			; MAKE 2'S COMPLEMENT
	ADDX.B	#0,R2			;
	BSR	SETPED			; SET PE CHECK DISABLE
	JSR	@FEEDR			; FEED REVERSE
	BEQ	FWDL_5			; BR IF NOT FEED CANCEL
FWDL_1: MOV.W	@SP+,R2 		;
	MOV.W	@SP+,R3 		;
	MOV.B	#1,R0			; RESET Z-FLAG FOR CANCEL
	RTS				;
					;
FWDL_2: BSET.B	#QCCAND,@PRLFF:8	; SET COMMAND CANCEL DONE
	BSR	SETPEE			; SET PE CHECK ENABLE
	MOV.B	#1,R0			; RESET Z-FLAG FOR CANCEL
	RTS				;
					;
FWDL_3: SUB.W	R1,R3			;
	SUBX.B	#0,R2			;
FWDL_4: BEQ	FWDL_5			; BR IF FEED COUNT = 0
	JSR	@FEEDF			; FEED FORWARD
	BNE	FWDL_1			; BR IF FEED CANCEL
FWDL_5: MOV.W	@SP+,R2 		;
	MOV.W	@SP+,R3 		;
	CLR.B	R0			;
	CLR.W	R1			;
	MOV.B	@LFRC:8,R1		;
	BEQ	FWDL_7			;
	SUB.W	R3,R1			; UPDATE REVERSE LF COUNTER
	SUBX.B	R2,R0			;
	BCC	FWDL_6			; BR IF NOT UNDERFLOW
	CLR.W	R1			;
FWDL_6: MOV.B	R1,@LFRC:8		;
FWDL_7: BSR	FWDLF2			; UP LF COUNTER
	MOV.W	R1,@LFC:8		;
	MOV.B	R0,@LFHC:8		;
	BCLR.B	#QTOPP,@DP3F:8		; RESET TOP MARGIN POSITION FLAG
	CLR.W	R0			;
	BSR	SETPEE			; SET PE CHECK ENABLE
	MOV.W	R0,@LFC1:8		; RESET PRINT LF COUNTER 1
	MOV.W	R0,@LFC2:8		; RESET PRINT LF COUNTER 2
	RTS				;
	;
FWDLF2: MOV.W	@LFC:8,R1		; GET LF COUNTER
	MOV.B	@LFHC:8,R0		;
	ADD.W	R3,R1			; UPDATE LF COUNTER
	ADDX.B	R2,R0			;
	SUB.W	@PGLS1:8,R1		;
	SUBX.B	@PGLHS1:8,R0		;
	BCS	FWDL_9			; BR IF NOT TURN PAGE
FWDL_8: SUB.W	@PGLS1:8,R1		; CORRECT LF COUNTER
	SUBX.B	@PGLHS1:8,R0		;
	BCC	FWDL_8			;
FWDL_9: ADD.W	@PGLS1:8,R1		;
	ADDX.B	@PGLHS1:8,R0		;
	RTS				;
	.PAGE
;
;	ESC + j + n  (REVERSE FEED)
;
;	IN	R3 : FEED COUNT
;
;	OUT	NONE
;
D3REVJ: BSR	STERCC			; SET ERROR CONDITION
;921110 MULXU.B #ZF180,R3		; CALCULATE FEED COUNT
	MULXU.B #ZF120,R3		; CALCULATE FEED COUNT
	BSR	RVSLF			; FEED n/180 INCH REVERSE
	BRA	RPEOV			; RESET PE OVERRIDE

;
;	REVERSE FEED
;
;	IN	R3 : FEED COUNT
;
;	OUT	R3 : NOT CHNAGE
;		 Z : 0=FEED CANCEL
;
RVSLF:	CMP.B	#ZBTM,@PAMDF:8		;
	BEQ	RVSL_A			; BR IF BOTTOM MODE
	CMP.B	#ZBTMP,@PAMDF:8 	;
	BNE	RVSL_B			; BR IF NOT BOTTOM HOTCHKISS MODE
RVSL_A: MOV.W	#ZRLF1,R1		;
	BRA	RVSL_C			;

RVSL_B: BTST.B	#QACSW,@OPTF:8		;
	BNE	RVSLF1			; BR IF NOT ACSF ATTACHED
	CMP.B	#ZSHT,@PAMDF:8		;
	BCS	RVSLF1			; BR IF FORMS/BOTTOM MODE
	MOV.W	#ZRLF,R1		;
RVSL_C: SUB.B	@LFRC:8,R1		; CALCULATE REAMIN FEED COUNT
	BCC	RVSL_1			; BR IF NOT REACH MAX COUNT
	CLR.W	R1			; RESET FEED PULSE COUNT
RVSL_1: CMP.W	R1,R3			;
	BLS	RVSLF1			; BR IF NOT REACH MAX COUNT
	MOV.W	R1,R3			; CORRECT FEED COUNT
RVSLF1: CLR.B	R2			;
	BSR	CHKPUL			; CHECK PULL OUT
	BNE	RVSL_3			; BR IF PAPER PULL OUT
	MOV.W	R3,@-SP 		;
	MOV.W	@LFC1:8,R1		; GET MULTI PASS PRINT LF COUNTER 1
	BPL	RVSL_4			; BR IF REVERSE ADJUST CASE
	ADD.W	R1,R3			;
	BLS	RVSL_5			; BR IF REVERSE FEED
	NEG.W	R3			; MAKE 2'S COMPLEMENT
	JSR	@FEEDF1 		; FEED FORWARD
	BEQ	RVSL_6			; BR IF NOT FEED CANCEL
RVSL_2: MOV.W	@SP+,R3 		;
	MOV.B	#1,R0			; RESET Z-FLAG FOR CANCEL
	RTS				;
					;
RVSL_3: BSET.B	#QCCAND,@PRLFF:8	; SET COMMAND CANCEL DONE
	BSR	SETPEE			; SET PE CHECK ENABLE
	MOV.B	#1,R0			; RESET Z-FLAG FOR CANCEL
	RTS				;
					;
RVSL_4: ADD.W	R1,R3			;
RVSL_5: BEQ	RVSL_6			; BR IF FEED COUNT = 0
	BSR	SETPED			; SET PE CHECK DISABLE
	JSR	@FEEDR1 		; FEED REVERSE
	BNE	RVSL_2			; BR IF FEED CANCEL
RVSL_6: MOV.W	@SP+,R3 		;
	CLR.W	R1			;
	CMP.B	#ZBTM,@PAMDF:8		;
	BEQ	RVSL_D			; BR IF BOTTOM MODE
	CMP.B	#ZBTMP,@PAMDF:8 	;
	BEQ	RVSL_D			; BR IF NOT BOTTOM HOTCHKISS MODE
	BTST.B	#QACSW,@OPTF:8		;
	BNE	RVSL_7			; BR IF NOT ACSF ATTACHED
	CMP.B	#ZSHT,@PAMDF:8		;
	BCS	RVSL_7			; BR IF FORMS/BOTTOM MODE
RVSL_D: MOV.B	@LFRC:8,R1		;
	ADD.W	R3,R1			; UPDATE REVERSE LF COUNTER
RVSL_7: MOV.B	R1,@LFRC:8		;
	BSR	RVSLF2			; UPDATE LF COUNTER
	MOV.W	R1,@LFC:8		;
	MOV.B	R0,@LFHC:8		;
	BCLR.B	#QTOPP,@DP3F:8		; RESET TOP MARGIN POSITION FLAG
	CLR.W	R0			;
	BSR	SETPEE			; SET PE CHECK ENABLE
	MOV.W	R0,@LFC1:8		; RESET PRINT LF COUNTER 1
	MOV.W	R0,@LFC2:8		; RESET PRINT LF COUNTER 2
	RTS				;
	;
RVSLF2: MOV.W	@LFC:8,R1		; UPDATE LF COUNTER
	MOV.B	@LFHC:8,R0		;
	SUB.W	R3,R1			;
	SUBX.B	#0,R0			;
	BCC	RVSL_9			; BR IF NOT TURN PAGE
RVSL_8: ADD.W	@PGLS1:8,R1		;
	ADDX.B	@PGLHS1:8,R0		;
	BCC	RVSL_8			;
RVSL_9: RTS				;
	.PAGE
;
;	FEED AFTER PRINT
;
;	IN	R3 : FEED COUNT
;		R4 : PRINT TYPE
;
;	OUT	NONE
;
D3PRF:	BSR	D3PRF1			; FEED TO NEXT PRINT POSITION
	BRA	RPEOV			; RESET PE OVERRIDE

D3PRF1: CLR.B	R2			; RESET FEED COUNT HIGH
	TST.B	R4			;
	BPL	FWDLF1			; BR IF NOT PRINT CONTINUE
	MOV.W	@LFC2:8,R0		;
	MOV.W	R0,@-SP 		;
	BSR	FWDLF1			; FEED TO NEXT PRINT POSITION
	MOV.W	@SP+,R0 		;
	ADD.W	R0,R3			; UPDATE PRINT LF COUNTER 2
	MOV.W	R3,@LFC2:8		;
	RTS				;

;
;	FEED AFTRE BAR CODE + OCR-B PRINT
;
;	IN	NONE
;
;	OUT	NONE
;
D3PRG:	BSR	D3PRG1			; FEED TO NEXT PRINT POSITION
	BRA	RPEOV			; RESET PE OVERRIDE

D3PRG1: MOV.W	@LFS:8,R3		; GET LF PITCH
	BEQ	D3PR_3			; BR IF LF PITCH = 0
	CLR.W	R0			;
	MOV.W	@LFC:8,R1		;
	MOV.B	@LFHC:8,R0		;
	DIVXU.W R3,R0			; LF COUNT / LF PITCH
	CLR.B	R2			; RESET FEED COUNT HIGH
	SUB.W	R0,R3			; CALCULATE CORRECT FEED COUNT
	BRA	FWDLF			; FEED TO (n x LF PITCH) POSITION
	.PAGE
;
;	PRINT
;
;	IN	R3 : PRINT COMMAND BUFFER POINTER
;
;	OUT	NONE
;
D3PRT:	MOV.W	R4,R3			; SET PRINT POSITION
	BSR	PLF1			; FEED TO PRINT POSITION
	MOV.W	@DP3R3S:8,FP		; SET PRINT COMMAND BUFFER POINTER
	JSR	@PRT			; PRINT OUT BUFFER
	BCLR.B	#QTOPP,@DP3F:8		; RESET TOP MARGIN POSITION FLAG
	MOV.B	@PAMDF:8,R3		; GET PAPER MODE
	CMP.B	#ZFORMP,R3		;
	BEQ	D3PR_1			; BR IF NOT PAPER HOTCHKISS MODE
	CMP.B	#ZBTMP,R3		;
	BNE	D3PR_3			; BR IF NOT PAPER HOTCHKISS MODE
D3PR_1: MOV.W	@(YPCMAX,FP),R0 	; GET CURRENT MAX PRINT COLUMN
	CMP.W	@MAXPC:8,R0		;
	BLS	D3PR_2			; BR IF MAX >= CURRENT
	MOV.W	R0,@MAXPC:8		; UPDATE MAX PRINT COLUMN
D3PR_2: BTST.B	#QPRFWD,@PRLFF:8	;
	BEQ	D3PR_3			; BR IF REVERSE PRINT
	CMP.W	#ZPHMIN,R0		;
	BLS	D3PR_3			; BR IF PH MIN >= CURRENT
	CMP.W	#ZPHMAX,R0		;
	BCC	D3PR_3			; BR IF PH MAX =< CURRENT
	ADD.W	#ZPHMIN,R0		;
	CMP.W	@MAXPC:8,R0		;
	BCC	CRESC			; BR IF (PR MAX - PH MIN) =< CURRENT
D3PR_3: RTS				;

;
;	FEED BEFORE PRINT
;
;	IN	R3 : FEED POSITION
;
;	OUT	NONE
;
PLF1:	TST.W	R3			;
	BEQ	PLF1_2			; BR IF FEED POSITION = 0
	BSR	SETPED			; SET PE CHECK DISABLE
PLF1_2: MOV.W	@LFC1:8,R0		; GET PRINT LF COUNT 1
	MOV.W	R3,@LFC1:8		; SET NEW PRINT LF COUNT 1
	SUB.W	R0,R3			;
	BEQ	PLF1_1			; BR IF FEED COUNT = 0
	BPL	FEEDF1			; BR IF PLUS COUNT
	NEG.W	R3			;
	JMP	@FEEDR1 		; FEED REVERSE

PLF1R:	CLR.B	R2			;
	CLR.W	R3			;
	MOV.W	@LFC1:8,R0		;
	BNE	FWDLF1			; BR IF PRINT LF COUNT 1 <> 0
	BSR	SETPEE			; SET PE CHECK ENABLE
PLF1_1: RTS				;
	.PAGE
;
;	PRINT START
;
;	IN	NONE
;
;	OUT	NONE
;
D3PRS:	BSET.B	#QDP3M,@PRMDF:8 	; SET DP3 MULTI BLOCK MODE
D3PR_A: MOV.W	@DP3PP:8,R1		; UNSAVE CURRENT PACKET POINTER
	JSR	@RELDP3 		; RELEASE PACKET DATA
	LDC.B	#PAGE D3LTBL,EP 	;
	MOV.W	#D3LTBL,R4		;
	WAIPKT				; WAIT PACKET DATA
	BCLR.B	#QWACTF,R2		; RESET ACTION WAIT FLAG
	MOV.W	R3,@DP3R3S:8		; SAVE PRINT COMAND BUFFER POINTER
	MOV.W	R4,@DP3R4S:8		;
	CMP.B	#ZPPRS,R2		;
	BEQ	D3PR_A			; BR IF PRINT START
	CMP.B	#ZPPRF,R2		;
	BEQ	D3PR_B			; BR IF FEED BY PRINT
	CMP.B	#ZPPRG,R2		;
	BEQ	D3PR_C			; BR IF FEED BY PRINT
	CMP.B	#ZPPRT,R2		;
	BEQ	D3PR_D			; BR IF PRINT DATA
	CMP.B	#ZPPRE,R2		;
	BEQ	D3PR_E			; BR IF PRINT END
	BSR	D3PR_Z			; RETURN FEED POSITION
	BSR	D3PR_F			; CHECK PE OVERRIDE MODE
	BRA	DP3STP			;
					;
D3PR_B: BSET.B	#QPRLFP,@DP3F:8 	; SET PRINT FEED PRESENT
	BSR	D3PRF1			; FEED TO NEXT PRINT PSOITION
	BRA	D3PR_A			;
					;
D3PR_C: BSET.B	#QPRLFP,@DP3F:8 	; SET PRINT FEED PRESENT
	BSR	D3PRG1			; FEED TO NEXT PRINT PSOITION
	BRA	D3PR_A			;
					;
D3PR_D: BSR	D3PRT			; PRINT OUT BUFFER
	BRA	D3PR_A			;
					;
D3PR_E: BSR	D3PRE			;
D3PR_F: BCLR.B	#QDP3M,@PRMDF:8 	; RESET DP3 MULTI BLOCK MODE
	BCLR.B	#QPRLFP,@DP3F:8 	;
	BNE	RPEOV			; BR IF PRINT FEED PRESENT
	RTS				;
	.PAGE
;
;	PRINT END
;
;	IN	R4 : PRINT TYPE
;
;	OUT	NONE
;
D3PRE:	MOV.W	@LFC2:8,R3		; GET PRINT LF COUNT 2
	BEQ	D3PR_Y			; BR IF COUNT = 0
	BCLR.B	#QPRLFP,@DP3F:8 	; RESET PRINT FEED PRESENT
	BSR	RVSLF			; RETURN FEED POSITION
D3PR_Y: MOV.W	@DP3PP:8,R1		;
	LKNPKT				; LOOK NEXT PACKET DATA
	BCS	PLF1R			; BR IF NO NEXT PACKET DATA
D3PR_Z: MOV.B	@ERRF:8,R0		;
	BNE	PLF1R			; BR IF ANY ERROR OCCURED
	BCLR.B	#QWACTF,R2		; RESET ACTION WAIT FLAG
	CMP.B	#ZPEJCD,R2		;
	BCS	PLF1R			; BR IF NOT FEED/PRINT PACKET DATA
	CMP.B	#ZPPRT,R2		;
	BCC	PLF1R			; BR IF FEED PACKET DATA
	RTS				;
	.END

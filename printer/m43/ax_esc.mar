        .PROGRAM        aplesc
	.HEADING	"M4324 AX ESC SEQUENCE MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX ESC SEQUENCE MODULE			*
;							*
;	FILE NAME	AX_ESC.MAR			*
;	CREATED 	03/JUN/1991			*
;							*
;********************************************************
;
	.EXPORT 	DP2STA,DP2IPR,DP2MDC,DP2PON
	.EXPORT 	DP2PFC,CHKJST,CKDT01,STCOL
	.EXPORT 	SVDTA, SVDTK, CHKKCD,UPTBFP
    .EXPORT     SETSPB,UPCLMX,SETUDI,SLMOD
	.EXPORT 	NXCLM, ESCCT, SETRMG,SJSTP1
	.EXPORT 	SVDTA3,SVDTK2,CKSPDB,FS58R,TGXXP
	.EXPORT 	ANKPRT, DP2S_2
;
	.IMPORT 	FSCTL, DELCD, GETPFP,CHKPEO
    .IMPORT     CHKMD, CHKDP3
	.IMPORT 	CHGDAT,GETPC1,GETPC3,GETC,  GPTPM
	.IMPORT 	INBFC, INBFP, INBFP2,DFDLF, CPRAM
	.IMPORT 	STPVF, STLSM, SVANK, SVKNJ, CANCD
	.IMPORT 	STCOMN,CKTXTB,SVKCM, SVCCM, SETPR1
	.IMPORT 	SVFCM, GTSPD, STPRNT,LINFD, STCRM
	.IMPORT 	SLDB1, STCND, FNCCD, CLDBF, CLGBF
	.IMPORT 	SLDLS, DODIG, QUAIG, REIMG, SIDIG
	.IMPORT 	SLIMG, HDDIG, BARCD, D2STX, FJUST
	.IMPORT 	RSMSC, STMS0, STMS1, CHKPXN
	.IMPORT 	KTBHT
	.IMPORT 	I_IMG1, I_IMG2
	.IMPORT 	KF1HT, KF2HT, KF3HT, KF4HT
	.IMPORT 	FFCD2, CRCD
	.IMPORT 	GPTTB, HVCON
	.IMPORT 	PRO00, DATCOV, HGPR0
;
    .INCLUDE    "AX_IOS.H"      ; (BMT +Shin2000.02.22)
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_DP3.H"
	.INCLUDE	"AX_EEP.H"
	.INCLUDE	"AX_RAM.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
	.INCLUDE	"GAIFP.H"                       ; 920213
;
;	<< EACH CONSTANT >>
;
ZHTMAX: .EQU	32			; HT TAB MAX VALUE
;
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;------------------------------------------------
;	<< DATA CHECK & SAVE CODE INTO TEXT BUFFER >>
;
DP2STA: BSR	INISS:16		; INITIALIZE FLAG or WORK AREA
DP2S_2:
	CMP.B	#8,@UMOD04:8		; TG MODE
	BEQ	DP2S_3
	CMP.B	#7,@UMOD04:8		; 920131
	BNE	BRNKSM			; NOT KSSM MODE

DP2S_3: BTST.B	#QKCSWE,@UMOD01:8	; NBYTE STATE
	BEQ	BRNKSM			; NO
;
	MOV.W	#H'0,@KJCDS1
	MOV.B	#H'0,@NSTCNT:8
	JMP	@PRO00

BRNKSM: JSR	@GETC			; GET DATA
;
	CMP.B	#8,@UMOD04:8		; TG MODE
	BEQ	BRNTG
	CMP.B	#7,@UMOD04:8		; 920131
	BNE	ANKPO			; NOT KSSM MODE
BRNTG:	CMP.B	#H'0,R0
	BEQ	ANKPO
	LDC.B	#PAGE HBUF20,EP 	;327+
	MOV.W	#HBUF20,R4		;327+
	MOV.B	@(1,R4),R3		;327+
	CMP.B	R0,R3			;327+
;
	BNE	ANKPO
	BSET.B	#QKCSWE,@UMOD01:8	; NBYTE START
	BRA	DP2S_2

ANKPRT: CMP.B	#H'0,R0
	BEQ	ANKPO
	LDC.B	#PAGE HBUF20,EP 	;327+
	MOV.W	#HBUF20,R4		;327+
	MOV.B	@(2,R4),R3		;327+
	CMP.B	R0,R3			;327+
;
	BNE	ANKPO
	BCLR.B	#QKCSWE,@UMOD01:8	; NBYTE STOP
	BRA	DP2S_2
;
;############## start ##################; [+sim]95.1.11
ENG2BM:
        CMP.B   #H'1F,R0
;-s     CMP.B   #H'20,R0                ; [*sim]95.5.24  1F -> 20
	BLS	ENG2BB
	CMP.B	#H'7E,R0
	BHI	ENG2BB

	BSET.B	#QCONDE,@PTMD1F:8	; SET CONDENSE MODE
	BSET.B	#QKJHAF,@PTMD4F:8	; SET KANJI HALF MODE

        CMP.B   #H'20,R0                ; [+sim]95.5.25
        BEQ     ENGSPC                  ; [+sim]95.5.25
;
        OR.B    #H'80,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS2:8		; HANGUL 2nd DATA

        MOV.B   #H'A3,R0
        AND.B   #ZN-H'80,R0             ; 2BYTE COMPOSITION MODE
	MOV.B	R0,@KJCDS1:8		; HANGUL 1st DATA
        JMP     @KCOMBK
;
;---------------------------------------; [+sim]95.5.25 for space
ENGSPC:
        OR.B    #H'81,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS2:8		; HANGUL 2nd DATA

        MOV.B   #H'A1,R0
        AND.B   #ZN-H'80,R0             ; 2BYTE COMPOSITION MODE
	MOV.B	R0,@KJCDS1:8		; HANGUL 1st DATA
        JMP     @KCOMBK
;---------------------------------------; [+sim]95.5.25 for space
ENG2BB:
        BCLR.B  #QCONDE,@PTMD1F:8       ; RESET CONDENSE MODE
        BCLR.B  #QKJHAF,@PTMD4F:8       ; RESET KANJI HALF MODE
	BRA	ENG2NN

CHK_S0:
        BTST.B  #QKJVEL,@PTMD4F:8       ; SET DOUBLE HIGHT FLAG 한글
	BNE	ENG2BM			; YES

;############## end ####################; [+sim]95.1.11

ENG2NN:                                 ;
	JMP	@CHK_SE 		; 1BYTE SEMI PROCESS 920219
;
ANKPO:	CMP.B	#6,@UMOD04		; 920314
	BEQ	CHK_S0			;
	CMP.B	#7,@UMOD04		;
	BEQ	CHK_S0			;
;

BR_PRO: CMP.B	#ZSP,R0
	BCS	KDP2SA			; R0 < 20 CONTROL CODE PROCESS
	CMP.B	#ZDEL,R0
	BEQ	KDP2SB			; DEL CODE PROCESS
	CMP.B	#H'80,R0
	BCS	KDP2SC			; 20h - 7Eh PROCESS
	BTST.B	#QKJMD,@PTMD5F:8
	BEQ	KDP2SD			; NON KOREA
;
;	HANGUL PROCESS
;
	CMP.B	#8,@UMOD04:8		;
	BEQ	TGMOD			; TG MODE
	CMP.B	#7,@UMOD04:8		; 920131
	BEQ	KSSMMD			; KSSM MODE
BRCOMP: AND.B	#ZN-H'80,R0             ; 2BYTE COMPOSITION MODE
	MOV.B	R0,@KJCDS1:8		; HANGUL 1st DATA
	JSR	@GETC
	CMP.B	#H'A0,R0
	BCS	DP2S_2			; R0 < A0h PROCESS ; DUMMY PRO
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS2:8		; HANGUL 2nd DATA
KCOMBK: BSR	CHKKCD:16		; CHECK KANJI CODE
	BNE	DP2S_2
D4_SE0: BSR	SVDTK:16
	BRA	DP2S_2
;
KSSMMD: BTST.B	#QKCSWD,@UMOD01:8	; 920207
	BEQ	BRCOMP			; COMPOSITION MODE
	BRA	TGMOD			; HANGUL COMBINATION MODE 920609
KSSM01: JSR	@DATCOV 		; CONVERSION COMBI TO COMPO
	BRA	KCOMBK
;
;
;	ENG MODE 80h - FFh PROCESS
KDP2SD: CMP.B	#H'A0,R0
	BCS	KDP2SE			; 80h - A0h PROCESS
KDP2SC:
	BSR	SVDTA:16		; ENG DATA SAVE
	BRA	DP2S_2
;
KDP2SE: BTST.B	#QCDEX1,@APL0F:8	; 80h - A0h ENTENTION CODE
	BNE	KDP2SF
	BRA	KDP2SC
KDP2SF: AND.B	#ZN-H'80,R0
KDP2SA: JSR	@FNCCD			; CONTROL CODE PROCESS
	BRA	DP2S_2
;
KDP2SB: JSR	@DELCD			; DEL CODE PROCESS
	BRA	DP2S_2
	.PAGE
;
;
TGMOD:	MOV.B	R0,@KJCDS1:8		; 920413 D4-SEMI
	JSR	@GETC
	MOV.B	R0,@KJCDS2:8
	MOV.B	@KJCDS1:8,R0
	CMP.B	#H'D4,R0
	BEQ	D4_SE0
;+920608 TG SEMI & HANJA PROCESS
	CMP.B	#H'D8,R0                ; COMBINATION HANGUL
	BLS	KSSM01
	CMP.B	#H'DE,R0                ; SEMI
	BLS	TGSEMI:16
	CMP.B	#H'DF,R0                ; DFh
	BEQ	DP2S_2
	CMP.B	#H'F9,R0                ; HANJA
	BLS	TGHANJA:16
;IN END
	BRA	KSSM01
;
;----------------------------------------
;	1BYTE SEMI CHECK & PROCESS     920218
CHK_SE:
	CMP.B	#H'1A,R0
	BCC	BR_PRO
	CMP.B	#H'01,R0
	BEQ	SEM_01
	CMP.B	#H'02,R0
	BEQ	SEM_02
	CMP.B	#H'03,R0
	BEQ	SEM_03
	CMP.B	#H'04,R0
	BEQ	SEM_04
	CMP.B	#H'05,R0
	BEQ	SEM_05
	CMP.B	#H'06,R0
	BEQ	SEM_06
	CMP.B	#H'10,R0
	BEQ	SEM_07
	CMP.B	#H'15,R0
	BEQ	SEM_08
	CMP.B	#H'16,R0
	BEQ	SEM_09
	CMP.B	#H'17,R0
	BEQ	SEM_10
	CMP.B	#H'19,R0
	BEQ	SEM_11
	BRA	BR_PRO
;
SEM_01: MOV.B	#H'DA,R0
	BRA	KDP2SC
SEM_02: MOV.B	#H'BF,R0
	BRA	KDP2SC
SEM_03: MOV.B	#H'C0,R0
	BRA	KDP2SC
SEM_04: MOV.B	#H'D9,R0
	BRA	KDP2SC
SEM_05: MOV.B	#H'B3,R0
	BRA	KDP2SC
SEM_06: MOV.B	#H'C4,R0
	BRA	KDP2SC
SEM_07: MOV.B	#H'C5,R0
	BRA	KDP2SC
SEM_08: MOV.B	#H'C1,R0
	BRA	KDP2SC
SEM_09: MOV.B	#H'C2,R0
	BRA	KDP2SC
SEM_10: MOV.B	#H'B4,R0
	BRA	KDP2SC
SEM_11: MOV.B	#H'C3,R0
	BRA	KDP2SC
;------------------------------------------------------
;920608 TG SEMI & HANJA
TGSEMI: SUB.B	#H'D8,R0
	SHLL.B	R0
	ADD.B	#H'9F,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS1:8
	BRA	TGCOMP
;
TGHANJA:
	SUB.B	#H'DF,R0
	SHLL.B	R0
	ADD.B	#H'C8,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS1:8
	BRA	TGCOMP
;
TGCOMP: MOV.B	@KJCDS2:8,R0
	CMP.B	#H'A0,R0
	BHI	TGADD0
	CMP.B	#H'90,R0
	BHI	TGADD1
	CMP.B	#H'7E,R0
	BHI	TGADD2
	ADD.B	#H'70,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS2:8
	BRA	KCOMBK
;
TGADD0: MOV.B	@KJCDS1:8,R0
	ADD.B	#H'1,R0
	MOV.B	R0,@KJCDS1:8
	MOV.B	@KJCDS2:8,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS2:8
	BRA	KCOMBK
;
TGADD1: ADD.B	#H'5E,R0
	AND.B	#ZN-H'80,R0
	MOV.B	R0,@KJCDS2:8
	BRA	KCOMBK
;
TGADD2: MOV.B	#H'21,R0
	MOV.B	R0,@KJCDS1:8
	MOV.B	R0,@KJCDS2:8
	BRA	KCOMBK
;IN END 920608
;
;-----------------------------------------------
; << SUB >>	CHECK KANJI CODE
;
;	IN	KJCDS1 : KANJI CODE 1ST
;		KJCDS2 : KANJI CODE 2ND
;
;	OUT	    R1 : NOT = 0 ... ERROR DATA
;		KJCDS1 : CHANGE KANJI CODE 1ST
;		KJCDS2 : CHANGE KANJI CODE 2ND
;
;	USE	R1,R4,EP
;
CHKKCD: MOV.B	#01,R1			; SET INVALID (ERROR) DATA FLAG
	CMP.B	#" ",@KJCDS2:8          ;
	BLS	CHKK_8			; BR. IF ERROR CODE (2ND = H'00->H'20)
	CMP.B	#ZDEL,@KJCDS2:8 	;
	BCC	CHKK_8			; BR. IF ERROR CODE (2ND = H'7F->H'FF)
	CMP.B	#" ",@KJCDS1:8          ;
	BLS	CHKK_8			; BR. IF ERROR CODE (1ST = H'00->H'20)
	CMP.B	#ZDEL,@KJCDS1:8 	;
	BCC	CHKK_8			; BR. IF ERROR CODE (1ST = H'7F->H'FF)
	CMP.B	#H'30,@KJCDS1:8         ;
	BCC	CHKK_C			; BR. IF H'30xx -> H'7Fxx
	LDC.B	#PAGE KTBHT,EP		; SET KANJI CODE TABLE PAGE
	BRA	CHKK_A			; 911202
CHKK_2: MOV.B	@KJCDS2:8,R5		; GET KANJI CODE 2ND
	SHLL.B	R5			; MAKE 2ND CODE x 2 = OFFSET
	MOV.B	R5,R4			; BASE + OFFSET
	TST.W	@R4			;
	BNE	CHKK_6			; BR. IF NOT FULL SPACE CODE
CHKK_4: MOV.W	#ZFSPCD,@KJCDS1:8	; SET FULL SPACE CODE (H'2121)
CHKK_6: CLR.B	R1			; SET VALID CODE FLAG
CHKK_8: TST.B	R1			;
	RTS
;
;	<< H'21xx -> H'2Fxx >>
;
CHKK_A: CMP.B	#H'2D,@KJCDS1:8         ; 911129 (29 -> 2D)
	BCC	CHKK_4			; BR. IF H'29xx -> H'2Fxx < EXCEPT H'2Dxx >
	MOV.W	#KTBHT,R4		; SET TABLE POINTER
	MOV.B	@KJCDS1:8,R5		; SET 1ST CODE
	SUB.B	#H'21,R5                ; SET OFFSET
	EXTU	R5			;
	SHLL.W	R5			; OFFSET x 2
	ADD.W	R5,R4			; BASE + OFFSET
	MOV.W	@R4,R4			; GET TARGET CODE TABLE POINTER
	BRA	CHKK_2
;
;	<< H'30xx -> H'7Fxx >>
;
CHKK_X: MOV.B	@KJCDS1:8,R5		; 911130
	SUB.B	#1,R5			;
	MOV.B	R5,@KJCDS1:8		;
	BRA	CHKK_Y			;
;
CHKK_C: CMP.B	#H'49,@KJCDS1:8         ; 911130
	BEQ	CHKK_4			; 911130
	BCC	CHKK_X			; 911130
;
CHKK_Y: CMP.B	#H'7E,@KJCDS1:8         ; 911217
	BCC	CHKK_4			; 911217
	CMP.B	#H'7D,@KJCDS1:8
	BEQ	CHKK_Z			; 920220
	BRA	CHKK_6
CHKK_Z: MOV.B	#H'7E,@KJCDS1:8         ; 920220 외자 문자
	BRA	CHKK_6			; 920220
	.PAGE
;
;--------------------------------------------------------------
GPTX:	MOV.B	@PTMD1F:8,R5		; GET PRINT MODE 1 FLAG
	AND.B	#XEMPHA+XCONDE+XPROPO+XELITE,R5 ; MASK EXCEPT MODE FLAG
	BTST.B	#QKCSWA,@UMOD01:8
	BNE	GTPX_0			; IF ANK
	BTST.B	#QKCSWA,@UMOD01:8	;+0609+
	BEQ	GPTX_2			;+0609+
GTPX_0: BTST.B	#QLQMD,@PTMD2F:8	;
	BNE	GPTX_2			; BR. IF LQ MODE
	BTST.B	#QPIT15,@PTMD1F:8	;
	BEQ	GPTX_4			; BR. IF NOT 15 CPI
	BCLR.B	#QCONDE,R5		; RESET CONDENSE FLAG
GPTX_4: EXTU	R5			;
	LDC.B	#PAGE GPTTB,EP		; GET PRINT PITCH PARAMETER TABLE PAGE
	MOV.B	@(GPTTB:16,R5),R2	; GET PRINT PITCH PARAMETER
	EXTU	R2			;
	RTS
;
GPTX_2: MOV.B	#ZPTC36,R2		; SET 1/360 INCH PITCH
	EXTU	R2			;
	RTS
;--------------------------------------------------------------
;
; << SUB >>	SAVE ANK DATA TO CHARACTER BUFFER
;
;	IN	R0 : DATA
;
SVDTA:
	BSET.B	#QKCSWA,@UMOD01:8	; 911127
	BTST.B	#QBCDPR,@PRPTCF:8	;
	BNE	SVDA_D:16		; BR. IF BAR CODE MODE
	BTST.B	#QPRFST,@PRMDF:8	;
	BNE	SVDA_3			; BR. IF NOT LINE START
	JSR	@STLSM			; SET LINE START MODE
SVDA_3: JSR	@CHGDAT 		; GET CHANGE DATA (R0 : DATA = H'000->H'1FF)
	BNE	SVDA_D:16		; BR. IF IGNORE DATA (ERROR)
	BTST.B	#QIMGDT,@APL0F:8	;
	BEQ	SVDA_4			; BR. IF NOT IMAGE DATA PRESENT
	BTST.B	#QIMGPR,@PRMODF:8	; SET IMAGE DATA INTO TEXT BUFFER FLAG
	BEQ	SVDA_4			; BR. IF NOT IMAGE DATA PRESENT
	MOV.W	R0,@-SP 		;+ SAVE CHANGE DATA
	JSR	@GPTX			; 920321
	BTST.B	R2,@PRPTCF:8		;
	BEQ	SVDA_8			; BR. IF PITCH FLAG CHANGE
	MOV.B	@PTMD3F:8,R2		; GET PRINT MODE 3 (GET COLOR FLAG)
	AND.B	#XCOLMK,R2		; MASK EXCEPT COLOR FLAG
	MOV.W	@TXTBFP:8,FP		; GET TEXT BUFFER POINTER
	SUBS.B	#ZFMTSZ,FP		;
	MOV.B	@(YCOLRF,FP),R1 	; GET BEFORE COLOR FLAG
	AND.B	#XCOLMK,R1		; MASK EXCEPT COLOR FLAG
	CMP.B	R1,R2			;
	BNE	SVDA_8			; BR. IF COLOR FLAG CHANGE
	JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	SVDA_C			; BR. IF NOT PANEL xN SIZE = NORMAL
	BTST.B	#QVENLR,@PTMD0F:8	;
	BNE	SVDA_8			; BR. IF VERTICAL ENLARGE FOR ANK
SVDA_C: BTST.B	#QNOULC,@PTMD2F:8	;
	BNE	SVDA_8			; BR. IF RULED LINE CHARACTER
	BTST.B	#QCP7P,@COLORF:8	;
	BNE	SVDA_7			; BR. IF PANEL COPY MODE
	BTST.B	#QDBST2,@PRMODF:8	;
	BNE	SVDA_8			; BR. IF DOUBLE-STRIKE MULTI
	BTST.B	#QDBSTR,@PTMD1F:8	;
	BEQ	SVDA_2			; BR. IF NOT DOUBLE-STRIKE MODE
	BTST.B	#7,@(YCOLRF,FP) 	;
	BEQ	SVDA_8			; BR. IF NOT SAME MODE (DOUBLE-STRIKE)
	BRA	SVDA_7			;
	;
SVDA_2: BTST.B	#7,@(YCOLRF,FP) 	;
	BNE	SVDA_8			; BR. IF NOT SAME MODE (DOUBLE-STRIKE)
SVDA_7: MOV.W	@SP+,R0 		;+ UNSAVE CHANGE DATA
SVDA_4: BSR	CKPVAR			; CHECK PRINT VARIATION FLAG FOR ANK
	BEQ	SVDA_9			; BR. IF NOT VARIATION FLAG MULTI
SVDA_6: MOV.W	R0,@-SP 		;+ SAVE DATA
SVDA_8: JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R0 		;+ UNSAVE DATA
SVDA_9:
	BSR	CHKBF:16		; CHECK BUFFER FULL & UPDATE COLUMN
	BEQ	SVDA_D			; BR. IF CHARACTER WIDTH = 0
	JSR	@SVANK			; SAVE ANK CODE
	BSR	UPCLMX:16		; UPDATE COLUMN MAX
SVDTA3: BTST.B	#QNOULC,@PTMD2F:8	;
	BEQ	SVDA_A			; BR. IF NO RULED LINE
	BSET.B	#QAKRLP,@PRMODF:8	; SET RULED LINE PRESENT
SVDA_A: BTST.B	#QVENLR,@PTMD0F:8	;
	BEQ	SVDA_B			; BR. IF NOT VERTICAL ENLARGE FOR ANK
	JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	SVDA_B			; BR. IF NOT PANEL xN SIZE = NORMAL
	BSET.B	#QAKVEP,@PRMODF:8	; SET ANK VERTICAL ENLARGE PRESENT
;921111 IN
	BTST.B	#KUPPRO,@UMOD05:8
	BEQ	SVDB_A
	BSET.B	#ZUPPRO,@PTMD5F:8
	BCLR.B	#ZLOPRO,@PTMD5F:8
SVDB_A: BTST.B	#KLOPRO,@UMOD05:8
	BEQ	SVDB_B
	BSET.B	#ZLOPRO,@PTMD5F:8
	BCLR.B	#ZUPPRO,@PTMD5F:8
SVDB_B:
;921111 END
SVDA_B: BSET.B	#QDELVL,@APL2F:8	; SET DELETE CODE VALID
SVDA_D: RTS
;
; << SUB >>	CHECK PRINT VARIATION FLAG FOR ANK
;
;	OUT	R1 : = 0 ... NOT PRINT VARIATION MULTI
;
CKPVAR: JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	CKPV_8			; BR. IF NOT PANEL xN SIZE = NORMAL
	BTST.B	#QKJVEP,@PRMODF:8	;
	BNE	CKPV_2			; BR. IF KANJI VERTICAL ENLARGE PRESENTS
	BTST.B	#QKJOLP,@PRMODF:8	;
	BNE	CKPV_2			; BR. IF KANJI OVERLINE PRESENT
	BTST.B	#QKJULP,@PRMODF:8	;
	BEQ	CKPV_6			; BR. IF NOT KANJI UNDERLINE PRESENT
CKPV_2: BTST.B	#QLQMD,@PTMD2F:8	;
	BEQ	CKPV_4			; BR. IF MULTI PASS PRINT
	BTST.B	#QVENLR,@PTMD0F:8	;
	BNE	CKPV_4			; BR. IF VERTICAL ENLARGE FOR ANK
	BTST.B	#QNOULC,@PTMD2F:8	;
	BEQ	CKPV_6			; BR. IF NOT RULED LINE CHARACTER
CKPV_4: MOV.B	#1,R1			; SET PRINT VARIATION MULTI FLAG
	RTS
	;
CKPV_6: MOV.B	#0,R1			; SET NOT PRINT VARIATION MULTI FLAG
	RTS
	;
CKPV_8: BTST.B	#QKJOLP,@PRMODF:8	;
	BNE	CKPV_A			; BR. IF KANJI OVERLINE PRESENT
	BTST.B	#QKJULP,@PRMODF:8	;
	BEQ	CKPV_6			; BR. IF NOT KANJI UNDERLINE PRESENT
CKPV_A: BTST.B	#QNOULC,@PTMD2F:8	;
	BEQ	CKPV_6			; BR. IF NOT RULED LINE CHARACTER
	BRA	CKPV_4
	.PAGE
;
; << SUB >>	SAVE KANJI DATA TO CHARACTER BUFFER
;
;	IN	KJCDS1 : KANJI CODE 1ST
;		KJCDS2 : KANJI CODE 2ND
;
;	USE	R0->FP,EP
;
SVDTK:
	BCLR.B	#QKCSWA,@UMOD01:8	; 911127
	BCLR.B	#QCGGRP,@PTMD2F:8	; RESET GRAPHIC CHARACTER FLAG
	BTST.B	#QBCDPR,@PRPTCF:8	;
	BNE	SVDA_D			; BR. IF BAR CODE MODE
	BTST.B	#QPRFST,@PRMDF:8	;
	BNE	SVDK_3			; BR. IF NOT LINE START
	JSR	@STLSM			; SET LINE START MODE
SVDK_3: BTST.B	#QIMGDT,@APL0F:8	;
	BEQ	SVDK_4			; BR. IF NOT IMAGE DATA PRESENT
	BTST.B	#QIMGPR,@PRMODF:8	; SET IMAGE DATA INTO TEXT BUFFER FLAG
	BEQ	SVDK_4			; BR. IF NOT IMAGE DATA PRESENT
	JSR	@GPTX			; 920321
	BTST.B	R2,@PRPTCF:8		;
	BEQ	SVDK_6			; BR. IF PITCH FLAG CHANGE
	MOV.B	@PTMD3F:8,R2		; GET PRINT MODE 3 (GET COLOR FLAG)
	AND.B	#XCOLMK,R2		; MASK EXCEPT COLOR FLAG
	MOV.W	@TXTBFP:8,FP		; GET TEXT BUFFER POINTER
	SUBS.B	#ZFMTSZ,FP		;
	MOV.B	@(YCOLRF,FP),R1 	; GET BEFORE COLOR FLAG
	AND.B	#XCOLMK,R1		; MASK EXCEPT COLOR FLAG
	CMP.B	R1,R2			;
	BNE	SVDK_6			; BR. IF COLOR FLAG CHANGE
	JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	SVDK_H			; BR. IF NOT PANEL xN SIZE = NORMAL
	BTST.B	#QKJVEL,@PTMD4F:8	;
	BNE	SVDK_6			; BR. IF VERTICAL ENLARGE FOR KANJI
SVDK_H: BTST.B	#QKJULN,@PTMD4F:8	;
	BNE	SVDK_6			; BR. IF UNDERLINE FOR KANJI
	BTST.B	#QCP7P,@COLORF:8	;
	BNE	SVDK_4			; BR. IF PANEL COPY MODE
	BTST.B	#QDBST2,@PRMODF:8	;
	BNE	SVDK_6			; BR. IF DOUBLE-STRIKE MULTI
	BTST.B	#QDBSTR,@PTMD1F:8	;
	BEQ	SVDK_2			; BR. IF NOT DOUBLE-STRIKE MODE
	BTST.B	#7,@(YCOLRF,FP) 	;
	BEQ	SVDK_6			; BR. IF NOT SAME MODE (DOUBLE-STRIKE)
	BRA	SVDK_4			;
	;
SVDK_2: BTST.B	#7,@(YCOLRF,FP) 	;
	BNE	SVDK_6			; BR. IF NOT SAME MODE (DOUBLE-STRIKE)
SVDK_4: BSR	CKPVR1			; CHECK PRINT VARIATION FLAG FOR KANJI
	BEQ	SVDK_8			; BR. IF NOT PRINT VARIATION FLAG MULTI
SVDK_6: MOV.W	@KJCDS1:8,R1		; GET KANJI CODE
	MOV.W	R1,@-SP 		;+ SAVE KANJI CODE
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R1 		;+ UNSAVE KANJI CODE
	MOV.W	R1,@KJCDS1:8		; UNSAVE KANJI CODE
SVDK_8: MOV.W	@KJCDS1:8,R0		; GET KANJI CODE
	BSR	CHKBF:16		; CHECK BUFFER FULL & UPDATE COLUMN
;921006 BEQ	SVDK_A			; BR. IF CHARACTER WIDTH = 0
	BEQ	SVDK_E			; 921006
	BTST.B	#QKJCBM,@PTMD5F:8	;
	BNE	SVDK_9			; BR. IF COMBINE MODE
SVDK_7: JSR	@SVKNJ			; SAVE KANJI CODE TO TEXT BUFFER
	BRA	SVDK_C
	;
SVDK_9: BTST.B	#QKJCB2,@PTMD5F:8	;
	BNE	SVDK_A			; BR. IF COMBINE 2ND
	JSR	@SVKCM			; SAVE KANJI COMBINE 1ST TO TEXT BUFFER
	BSET.B	#QKJCB2,@PTMD5F:8	; SET COMBINE 2ND FLAG
	BRA	SVDK_C
	;
SVDK_A: JSR	@SVKCM			; SAVE KANJI COMBINE 2ND TO TEXT BUFFER
	BCLR.B	#QKJCBM,@PTMD5F:8	; RESET COMBINE FLAG
	BCLR.B	#QKJCB2,@PTMD5F:8	; RESET COMBINE 2ND FLAG
SVDK_C: BSR	UPCLMX:16		; UPDATE COLUMN MAX
	BSET.B	#QDELVL,@APL2F:8	; SET DELETE CODE VALID
SVDTK2: BTST.B	#QKJVEL,@PTMD4F:8	;
	BEQ	SVDK_D			; BR. IF NOT VERTICAL ENLARGE FOR KANJI
	JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	SVDK_D			; BR. IF NOT PANEL xN SIZE = NORMAL
	BSET.B	#QKJVEP,@PRMODF:8	; SET KANJI VERTICAL ENLARGE PRESENT
;921111 IN
	BTST.B	#KUPPRO,@UMOD05:8
	BEQ	SVDD_A
	BSET.B	#ZUPPRO,@PTMD5F:8
	BCLR.B	#ZLOPRO,@PTMD5F:8
SVDD_A: BTST.B	#KLOPRO,@UMOD05:8
	BEQ	SVDD_B
	BSET.B	#ZLOPRO,@PTMD5F:8
	BCLR.B	#ZUPPRO,@PTMD5F:8
SVDD_B:
;921111 END
SVDK_D: BTST.B	#QKJULN,@PTMD4F:8	;
	BEQ	SVDK_E			; BR. IF NOT UNDERLINE FOR KANJI
	BTST.B	#QKJVRT,@PTMD4F:8	;
	BNE	SVDK_F			; BR. IF KANJJI VERTICAL FORMAT
	BSET.B	#QKJULP,@PRMODF:8	; SET KANJI UNDERLINE PRESENT
SVDK_E: RTS
	;
SVDK_F: BSET.B	#QKJOLP,@PRMODF:8	; SET KANJI OVERLINE PRESENT
	RTS
;
; << SUB >>	CHECK PRINT VARIATION FLAG FOR KANJI
;
;	OUT	R1 : = 0 ... NOT PRINT VARIATION MULTI
;
CKPVR1: JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	CKP1_8			; BR. IF NOT PANEL xN SIZE = NORMAL
	BTST.B	#QAKVEP,@PRMODF:8	;
	BNE	CKP1_2			; BR. IF ANK VERTICAL ENLARGE PRESENT
	BTST.B	#QAKRLP,@PRMODF:8	;
	BEQ	CKP1_5			; BR. IF NOT ANK RULED LINE PRESENT
CKP1_2: BTST.B	#QKJVEL,@PTMD4F:8	;
	BNE	CKP1_4			; BR. IF VERTICAL ENLARGE FOR KANJI
	BTST.B	#QKJULN,@PTMD4F:8	;
	BEQ	CKP1_6			; BR. IF NOT UNDERLINE FOR KANJI
CKP1_4: MOV.B	#1,R1			; SET PRINT VARIATION MULTI FLAG
	RTS
	;
CKP1_5: MOV.B	@PRPTCF:8,R1		; GET CURRENT PITCH (1 LINE)
	AND.B	#XPT120+XPT180+XPT240,R1	;
	BNE	CKP1_4			; BR. IF MULTI PASS PRINT
CKP1_6: MOV.B	#0,R1			; SET NOT PRINT VARIATION MULTI FLAG
	RTS
	;
CKP1_8: BTST.B	#QAKRLP,@PRMODF:8	;
	BEQ	CKP1_6			; BR. IF NOT ANK RULED LINE PRESENT
	BTST.B	#QKJULN,@PTMD4F:8	;
	BEQ	CKP1_6			; BR. IF NOT UNDERLINE FOR KANJI
	BRA	CKP1_4
	.PAGE
;
; << SUB >>	CHECK BUFFER FULL
;
;	IN	R0 : DATA
;
;	OUT	R0 : DATA
;		R1 = 0 : CHARACTER WIDTH = 0
;		R2 : CHARACTER PITCH
;
CHKBF:	MOV.W	R0,@-SP 		;+ SAVE DATA
	JSR	@GETPC3 		; GET CHARACTER PITCH (= R2)
CHKB_3: MOV.W	R2,R5			; SAVE CHARACTER PITCH
	ADD.W	@CLMCTC:8,R5		; + CURRENT COLUMN
CHKB_4: CMP.W	@RMARGS:8,R5		;
	BLS	CHKB_8			; BR. IF RIGHT MARGIN >= NEXT COLUMN
	MOV.W	@LMARGS:8,R1		; GET LEFT MARGIN
	SUB.W	@CLMCTC:8,R1		; - CURRENT COLUMN
	BEQ	CHKB_8			; BR. IF LEFT MARGIN = CURRENT COLUMN

	BTST.B	#QAUTOR,@UMOD05:8	; 921006
	BNE	CHKB_X			;

CHKB_5: MOV.W	@KJCDS1:8,R1		; GET KANJI CODE
	MOV.W	R1,@-SP 		;+ SAVE KANJI CODE
	JSR	@SETPR1 		; SET END MARK TO TEXT BUFFER & PRINT
	MOV.W	@SP+,R1 		;+ UNSAVE KANJI CODE
	MOV.W	R1,@KJCDS1:8		; SAVE KANJI CODE
	JSR	@INBFP2 		; SET NEXT LINE START = LEFT MARGIN
	JSR	@LINFD			; LINE FEED
	MOV.W	@SP+,R0 		;+ UNSAVE DATA
	BRA	CHKBF
;
CHKB_X: BRA	CHKB_Z			; 921006
;
CHKB_8: BTST.B	#QKCSWA,@UMOD01:8	; 911127
	BNE	CHKB_B			; 911123
	BTST.B	#QKJCBM,@PTMD5F:8	;
	BEQ	CHKB_B			; BR. IF NOT KANJI COMBINE MODE
	BTST.B	#QKJCB2,@PTMD5F:8	;
	BNE	CHKB_B			; BR. IF KANJI COMBINE 2ND
	BSR	CHKB_K			; CHECK VERTICAL ENABLE
	BNE	CHKB_9			; BR. IF VERTICAL DISABLE
	CLR.W	R2			; SET COLUMN = 0 (COMBINE 1ST)
	BRA	CHKB_B
	;
CHKB_9: BCLR.B	#QKJCBM,@PTMD5F:8	; RESET KANJI COMBINE FLAG
CHKB_B: MOV.W	R2,@CHRWDS:8		; SAVE COLUMN FOR BS
CHKB_C: MOV.W	@SP+,R0 		;+ UNSAVE DATA
	BTST.B	#QKCSWA,@UMOD01:8	; +0609+
	BEQ	CHKB_D			; +0609+
	BTST.B	#QDWLCH,@PTMD2F:8	;
	BEQ	CHKB_D			; BR. IF NOT DOWNLOAD CHARACTER
	TST.W	R2			;
	BEQ	CHKB_E			; BR. IF COLUMN = 0
CHKB_D: MOV.B	#01,R1			; SET VALID DATA FLAG
	RTS
	;
CHKB_E: CLR.B	R1			; SET INVALID DATA FLAG (COLUMN = 0)
	RTS
;
CHKB_Z: MOV.W	@SP+,R0 		; 921006
	BRA	CHKB_E
;
; << SUB >>	CHECK KANJI VERTICAL ENABLE FLAG
;
;	OUT	R1 = 0 : VERTICAL ENABLE
;
;	USE	R1,R4,EP
;
CHKB_K:
	BRA	CHKB_E			; 911204
	.PAGE
;
;***********************************************************
;	<< EXPANSION ESCAPE SEQUENCE >>
;
ES_IBA: JMP	@ESCIBM
ES_KSC: JMP	@ESCKSC
ES_KSM: JMP	@ESCKSM
ES_TGD: JMP	@ESCTG
;
ESCER0: JMP	@ESCER			; ERR PRO
;***********************************************************
ESCCT:
	CMP.B	#9,@UMOD04:8		;
	BEQ	ES_IBA			; IBM
	CMP.B	#6,@UMOD04:8		;
	BEQ	ES_KSC			; KSC
	CMP.B	#7,@UMOD04:8
	BEQ	ES_KSM			; KSSM
	CMP.B	#8,@UMOD04:8
	BEQ	ES_TGD			; TG
;					; ESC/P
ESCESP: JSR	@GETC			; GET DATA
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#"~",R0                 ;
	BHI	ESCER0			; BR. IF IGNORE CODE
	MOV.B	R0,R4			; SAVE OFFSET
	LDC.B	#PAGE ESCTB,EP
	MULXU.B #2,R4			; OFFSET x 2
	MOV.W	@(ESCTB:16,R4),R4
	JMP	@R4
	.PAGE
;
;	<<ESC/P ESCAPE SEQUENCE TABLE >>
;
	.ALIGN	 2
;
ESCTB:	.DATA.W    ESCER		; (00) NUL
	.DATA.W    ESCER		; (01) SOH
	.DATA.W    ESCER		; (02) STX STX Sequence (EEPROM Command)
	.DATA.W    ESCER		; (03) ETX
	.DATA.W    ESCER		; (04) EOT
	.DATA.W    ESCER		; (05) ENQ
	.DATA.W    ESCER		; (06) ACK
	.DATA.W    ESCER		; (07) BEL
	.DATA.W    ESCER		; (08) BS
	.DATA.W    ESCER		; (09) HT
	.DATA.W    ESCER		; (0A) LF
	.DATA.W    ESCER		; (0B) VT
	.DATA.W    ESCER		; (0C) FF
	.DATA.W    ESCER		; (0D) CR
	.DATA.W    SLDB1		; (0E) SO  Select Double-width Mode <1 Line>
	.DATA.W    STCND		; (0F) SI  Set Condense Mode
	.DATA.W    ESCER		; (10) DLE
	.DATA.W    ESCER		; (11) DC1
	.DATA.W    ESCER		; (12) DC2
	.DATA.W    ESCER		; (13) DC3
	.DATA.W    ESCER		; (14) DC4
	.DATA.W    ESCER		; (15) NAK
	.DATA.W    ESCER		; (16) SYN
	.DATA.W    ESCER		; (17) ETB
	.DATA.W    ESCER		; (18) CAN
	.DATA.W    ESACSF		; (19) EM  Select Auto Cut Sheet Feeder
	.DATA.W    ESCER		; (1A) SUB
	.DATA.W    ESCER		; (1B) ESC ESCAPE Sequence
	.DATA.W    ESCER		; (1C) FS  FS Sequence
	.DATA.W    ESCER		; (1D) GS
	.DATA.W    ESCER		; (1E) RS
	.DATA.W    ESCER		; (1F) US
;
	.DATA.W    STCSP		; (20) SP Set Character Space
	.DATA.W    MSTSL		; (21) ! Master Select
	.DATA.W    ESCER		; (22) "
	.DATA.W    RSMSC		;*(23) # MSB Control Sequence Cancel
	.DATA.W    STABP		; (24) $ Set Absolute Dot Position
	.DATA.W    SLDLS		;*(25) % Select Down-load Set
	.DATA.W    DFDLF		;*(26) & Define Down-load Characters
	.DATA.W    ESCER		; (27) '
	.DATA.W    ESCER		; (28) (
	.DATA.W    ESCER		; (29) )
	.DATA.W    SLIMG		;*(2A) * Select Image Mode
	.DATA.W    ESCER		; (2B) +
	.DATA.W    ESCER		; (2C) ,
	.DATA.W    SLUDL		; (2D) - Select Under Line
	.DATA.W    ESCER		; (2E) .
	.DATA.W    STVCH		; (2F) / Select Vertical Tab Channel
	.DATA.W    ST8LP		; (30) 0 Select 1/8 Inch Line Spacing
	.DATA.W    ESCER		; (31) 1
	.DATA.W    ST6LP		; (32) 2 Select 1/6 inch Line Spacing
	.DATA.W    STGLP		; (33) 3 Select n/180 inch Line Spacing
	.DATA.W    SLITL		; (34) 4 Select Italic Mode
	.DATA.W    CNITL		; (35) 5 Cancel Italic Mode
	.DATA.W    PRCE1		; (36) 6 Printable Code Area Expansion
	.DATA.W    CNES6		; (37) 7 Cancel ESC 6
	.DATA.W    ESCER		; (38) 8
	.DATA.W    ESCER		; (39) 9
	.DATA.W    CPRAM		;*(3A) : Copy ROM Into RAM
	.DATA.W    ESCER		; (3B) ;
	.DATA.W    ESCER		; (3C) < Select Unidirectiond Mode <1 LINE>
	.DATA.W    STMS0		;*(3D) = MSB = 0 Setting
	.DATA.W    STMS1		;*(3E) > MSB = 1 Setting
	.DATA.W    REIMG		;*(3F) ? Reassign Image Mode
	.DATA.W    ESIPRN		; (40) @ Initialize Printer
	.DATA.W    STTLP		; (41) A Select n/60 Inch Line Spacing
	.DATA.W    SETVT		; (42) B Set Vertical Tabs
	.DATA.W    ESPAGL		; (43) C Set Page Length
	.DATA.W    STHTB		; (44) D Set Horizontal Tabs
	.DATA.W    STEMP		; (45) E Set Emphasized Mode
	.DATA.W    CNEMP		; (46) F Cancel Emphasized Mode
	.DATA.W    STDBS		; (47) G Set Double-strike Mode
	.DATA.W    CNDBS		; (48) H Cancel Double-strike Mode
	.DATA.W    ESCER		; (49) I
	.DATA.W    ESFORJ		; (4A) J Perform n/180 Inch Line Feed
	.DATA.W    SIDIG		;*(4B) K Single-density Image Mode
	.DATA.W    DODIG		;*(4C) L Double-density Image Mode
	.DATA.W    STELT		; (4D) M Set Elite Mode
	.DATA.W    ESSKPP		; (4E) N Set Skip-over-perforation
	.DATA.W    CNSKV		; (4F) O Cancel Skip-over-perforation
	.DATA.W    STPIC		; (50) P Set Pica Mode
	.DATA.W    STRMG		; (51) Q Set Right Margin
	.DATA.W    SLINC		; (52) R Select International Character
	.DATA.W    SELSS		; (53) S Select Superscript/Subscript
	.DATA.W    CANSS		; (54) T Cancel Superscript/Subscript
	.DATA.W    SLUDI		; (55) U Select Unidirectiond Mode
	.DATA.W    ESCER		; (56) V
	.DATA.W    SLDBW		; (57) W Select/Cancel Double-Width Mode
	.DATA.W    ESCER		; (58) X
	.DATA.W    HDDIG		;*(59) Y High-Speed Double-density Image
	.DATA.W    QUAIG		;*(5A) Z Quadruple-density Image
	.DATA.W    ESCER		; (5B) [
	.DATA.W    STRPT		; (5C) \ Set Relative Dot Position
	.DATA.W    ESCER		; (5D) ]
	.DATA.W    ESCER		; (5E) ^
	.DATA.W    ESCER		; (5F) _
	.DATA.W    ESCER		; (60)
	.DATA.W    LQJST		; (61) a Select Justification
	.DATA.W    STCVT		; (62) b Set Vertical Tabs in Channels
	.DATA.W    ESCER		; (63) c
	.DATA.W    ESCER		; (64) d
	.DATA.W    ESCER		; (65) e
	.DATA.W    ESCER		; (66) f
	.DATA.W    ST15C		; (67) g Set 15 CPI Mode
	.DATA.W    IGN1B		; (68) h
	.DATA.W    ESCER		; (69) i
	.DATA.W    ESREVJ		; (6A) j Perform Reverse n/180 Inch Line Feed
	.DATA.W    SLFNT		; (6B) k Select LQ Font
	.DATA.W    STLMG		; (6C) l Set Left Margin
	.DATA.W    MGSEL		; (6D) m MYENGJO/GODIC SEL
	.DATA.W    ESCER		; (6E) n
	.DATA.W    ESCER		; (6F) o
	.DATA.W    SLPRF		; (70) p Select Proportional Mode
	.DATA.W    SLSTL		; (71) q Select Character Style
	.DATA.W    SLCOL		; (72) r Select printing Color
	.DATA.W    IGN1B		; (73) s Select Half-speed Mode
	.DATA.W    STCHT		; (74) t Set Character Table
	.DATA.W    ESCER		; (75) u
	.DATA.W    ESCER		; (76) v
	.DATA.W    SLCHH		; (77) w Select Character height
	.DATA.W    SLNLD		; (78) x Select LQ or DRAFT
	.DATA.W    ESCER		; (79) y
	.DATA.W    ESCER		; (7A) z
	.DATA.W    ESCER		; (7B) {
	.DATA.W    EXPESC		; (7C) | Expand ESC Sequense
	.DATA.W    ESCER		; (7D) }
	.DATA.W    ESCER		; (7E) ~
	.DATA.W    ESCER		; (7F) DEL
;
ESCER:	LDC.B	#0,DP			; RESET < DP >
	RTS
	.PAGE
;
;
;	MYEONGJO/GODIC SELECT
MGSEL:	JSR	@GETC
	AND.B	#H'03,R0
	CMP.B	#H'1,R0
	BEQ	MGSEL1
	CMP.B	#H'0,R0
	BEQ	MGSEL2
	RTS
MGSEL1: BSET.B	#QDGODI,@UMOD05:8
	RTS
MGSEL2: BCLR.B	#QDGODI,@UMOD05:8
	RTS
;	<< ESC SEQUENCE PROCESS >>
;
;	ESC + EM + n
;
;	AUTO CUT SHEET FEEDER CONTROL
;
ESACSF:
       JSR     @GETC		       ; GET DATA (n)
       AND.B   #ZN-H'80,R0             ; CLEAR MSB
       MOV.B   R0,R3		       ; SAVE PARAMETER
       CMP.B   #"R",R0                 ;
       BEQ     ESAC_4		       ; BR. IF EJECT PAPER
       CMP.B   #"0",R0                 ;
       BEQ     ESAC_4		       ; BR. IF SELECT SHEET
       CMP.B   #"1",R0                 ;
       BEQ     ESAC_4		       ; BR. IF SELECT ACSF (1)
       CMP.B   #"2",R0                 ;
       BNE     ESAC_6		       ; BR. IF NOT SELECT ACSF (2)
ESAC_4:
       CALDP3  #ZPACSF		       ; CALL SELECT ACSF PACKET TO DP3
ESAC_6:
	RTS
       .PAGE
;
;	ESC + SP + n
;
;	SET CHARACTER SPACE
;
STCSP:	JSR	@GETC			; GET DATA (n)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	MOV.B	R0,@ANKSPS:8		; SAVE NEW SPACE DATA
	RTS
;
;	ESC + ! + n
;
;	MASTER SELECT
;
MSTSL:	JSR	@GETC			; GET DATA (n)
	BCLR.B	#QHENLR,@PTMD0F:8	; RESET HORIZONTAL ENLARGE
	BTST.B	#5,R0			;
	BEQ	MSTS_2			; BR. IF NOT SET ENLARGE
	BSET.B	#QHENLR,@PTMD0F:8	; SET HORIZONTAL ENLARGE
MSTS_2: BCLR.B	#5,R0			; RESET HORIZONTAL ENLARGE BIT
	MOV.B	R0,@PTMD1F:8		; SAVE NEW MODE FLAG
	BCLR.B	#QENL1L,@PTMD0F:8	; RESET HORIZONTAL ENLARGE (1 LINE)
	RTS
	.PAGE
;
;	ESC + $ + n1 + n2
;
;	SET ABSOLUTE DOT POSITION , 1/60 INCH PITCH
;
STABP:	JSR	@GETC			; GET DATA (n1)
	MOV.B	R0,R2			; SAVE IT
	JSR	@GETC			; GET DATA (n2)
	AND.B	#H'03,R0                ; GET LOW 2 BITS
	SWAP	R0			; n2 = HIGH
	MOV.B	R2,R0			; HIGH = n2 / LOW = n1
	MULXU.W #ZCL60,R0		; CALCULATE POSITION (UNIT 1/60 inch)
	TST.W	R0			;
	BNE	STAB_4			; BR. IF VALUE OVER
	ADD.W	@LMARGS:8,R1		; + LEFT MARGIN VALUE
	MOV.W	R1,@DATLNS:8		; SAVE IT
	BCS	STAB_4			; BR. IF OVERFLOW
	CMP.W	@RMARGS:8,R1		;
	BLS	NXCLM:16		; BR. IF NOT RIGHT MARGIN OVER
STAB_4: RTS
	.PAGE
;
;	ESC + - + n
;
;	SELECT ANK UNDERLINE
;
SLUDL:	BSR	CKDT01:16		; GET & CHECK DATA = 0 OR 1
	BNE	STAB_4			; BR. IF ERROR DATA
	BCLR.B	#QKJULN,@PTMD4F:8	; 920107
	BCLR.B	#QUNDLN,@PTMD1F:8	; CLEAR UNDERLINE FLAG
	TST.B	R0			;
	BEQ	STAB_4			; BR. IF n = 0 (RESET UNDERLINE)
	BSET.B	#QUNDLN,@PTMD1F:8	; SET UNDERLINE FLAG
	BSET.B	#QKJULN,@PTMD4F:8	; 920107
	RTS
;
;	ESC + / + n
;
;	SELECT VERTICAL TAB CHANNEL
;
STVCH:	JSR	@GETC			; GET DATA (n)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#07,R0			;
	BHI	STAB_4			; BR. IF ERROR CHANEL DATA
	MOV.B	R0,@VTCHNS:8		; SAVE CHANNEL
	RTS
;
;	ESC + 0
;
;	SELECT 1/8-INCH LINE SPACING
;
ST8LP:
	BCLR.B	#RCONN,@UMOD06:8	; \930406
	CALDP3	#ZP8LP			; CALL 1/8 INCH FEED PACKET TO DP3
	RTS
;
;	ESC + 2
;
;	SELECT 1/6-INCH LINE SPACING
;
ST6LP:
	BCLR.B	#RCONN,@UMOD06:8	; \930406
	CALDP3	#ZP6LP			; CALL 1/6 INCH FEED PACKET TO DP3
	RTS
;
;	SELECT 1/10-INCH LINE SPACING
ST10LP:
	BCLR.B	#RCONN,@UMOD06:8	; \930406
	MOV.B	#12,R0			; 921125 18h -> 12
	EXTU	R0
	MOV.W	R0,R3
	CALDP3	#ZP3LP
	RTS
;
;	ESC + 3 + n
;
;	SELECT n/180-INCH LINE SPACING
;
STGLP:	JSR	@GETC			; GET DATA (n)
;
	BCLR.B	#RCONN,@UMOD06:8	; \930406
	CMP.B	#H'2D,R0                ;    "
	BNE	STGLP1			;    "
	BSET.B	#RCONN,@UMOD06:8	;    "
;
STGLP1: EXTU	R0			;
;921125 IN
	EXTU	R0
	MULXU.B #2,R0
	DIVXU.B #3,R0
	EXTU	R0
;	END
	MOV.W	R0,R3			; SAVE DATA
	CALDP3	#ZP3LP			; CALL 1/180 INCH FEED PACKET TO DP3
	RTS
	.PAGE
;
;	ESC + 4
;
;	SELECT ITALIC MODE
;
SLITL:	BSET.B	#QITALC,@PTMD1F:8	; SET ITALIC MODE FLAG
	RTS
;
;	ESC + 5
;
;	CANCEL ITALIC MODE
;
CNITL:	BCLR.B	#QITALC,@PTMD1F:8	; RESET ITALIC MODE FLAG
	RTS
;
;	ESC + 6
;
;	HIGH CONTROL CODE INVALID
;
PRCE1:	BCLR.B	#QCDEX1,@APL0F:8	; RESET HIGH CONTROL CODE VALID
	RTS
;
;	ESC + 7
;
;	HIGH CONTROL VALID
;
CNES6:	BSET.B	#QCDEX1,@APL0F:8	; SET HIGH CONTROL CODE VALID
	RTS
;
;	ESC + @
;
;	INITIALIZE PRINTER
;
ESIPRN: BSR	WTPRC			; WAIT DP3 PROCESS
	CALDP3	#ZPIPRN 		; CALL INITIALIZE PRINTER PACKET TO DP3
	BSR	INISB:16		; INITIALIZE FLAG ETC
WTPRC:	JSR	@CHKMD			; CHECK CONDITION
	JSR	@CHKDP3 		; CHEECK DP3 CONDITION
	BNE	WTPRC			; BR IF NO ACTIVE
CHGED:	RTS
;
;	ESC + A + n
;
;	SELECT n/60-INCH LINE SPACING
;
STTLP:	JSR	@GETC			; GET DATA (n)
STXLP1: EXTU	R0			;
	MOV.W	R0,R3			; SAVE DATA
	CALDP3	#ZPALP			; CALL 1/60 INCH FEED PACKET TO DP3
STTL_2: RTS
	.PAGE
;
;	ESC + A + n  (KSC5601 DOT FEED VALUE SET)
STDFD:	JSR	@GETC
	LDC.B	#PAGE HBUF20,EP
	MOV.W	#HBUF20,R4
	MOV.B	R0,@R4
	RTS
;
;	ESC + 2
STXLP:
	LDC.B	#PAGE HBUF20,EP
	MOV.W	#HBUF20,R4
	MOV.B	@R4,R0
	CMP.B	#H'0,R0
	BEQ	ST6LP
	BRA	STXLP1
;
;	ESC + B + n1 + ..... + nm + NULL
;
;	SET VERTICAL TABS
;
SETVT:	CLR.B	R0			; SET VT CHANNEL
SETVT1: BSET.B	#QVTSTR,@APL0F:8	; SET VT SET RECEIVE FLAG
	MOV.W	R0,@-SP 		;+ SAVE CHANNEL
	MOV.B	R0,R4			; SET VT CHANNEL CODE
	CALDP3	#ZPVTCL 		; CALL CLEAR VT PACKET TO DP3
	MOV.W	@SP+,R4 		;+ UNSAVE CHANNEL
	BSET.B	R4,@VTCHNF:8		; SET CURRENT VT CHANNEL FLAG
	CLR.B	R5			; CLEAR OLD DATA SAVE AREA
STVT_2: JSR	@GETC			; GET PARAMETER
	TST.B	R0			;
	BEQ	STVT_4			; BR. IF RECEIVE DATA = 0
	CMP.B	R5,R0			; CHECK OLD DATA & NEW DATA
	BLS	STVT_6			; BR. IF OLD >= NEW DATA
	MOV.B	R0,R3			; SET VT DATA
	MOV.W	R4,@-SP 		;+ SAVE VT CHANNEL
	CALDP3	#ZPVTST 		; CALL SET VT DATA PACKET TO DP3
	MOV.W	@SP+,R4 		;+ UNSAVE VT CHANNEL
	MOV.B	R3,R5			; UPDATE OLD DATA
	BRA	STVT_2			; BR. IF NOT END
	;
STVT_4: TST.B	R5			;
	BNE	STVT_6			; BR. IF NOT OLD DATA = 0
	BCLR.B	R4,@VTCHNF:8		; RESET CURRENT VT CHANNEL FLAG
STVT_6: RTS
;
;	ESC + C + n
;
;	SET PAGE LENGTH
;
ESPAGL: JSR	@GETC			; GET DATA (n)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	BEQ	STPL_2			; BR. IF SET PAGE LENGTH BY INCH
	EXTU	R0			;
	MOV.W	R0,R3			; SAVE DATA (n)
	CALDP3	#ZPPAGL 		; CALL PAGE LENGTH FOR LINE PACKET TO DP3
	RTS
	;
STPL_2: JSR	@GETC			; GET DATA (n)
	EXTU	R0			;
	MOV.W	R0,R3			; SAVE PAGE LENGTH PARAMETER (INCH)
	CALDP3	#ZPPAGI 		; CALL PAGE LENGTH FOR INCH PACKET TO DP3
	RTS
	.PAGE

;
;	ESC + D + n1 + ..... + nm + NULL
;
;	SET HORIZONTAL TABS
;
STHTB:	JSR	@GETPC1 		; GET CHARACTER PITCH (= R2)
	MOV.W	#HTBF,FP		; SET HORIZONTAL TAB BUFFER BASE ADDRESS
	CLR.B	R3			; CLEAR OLD DATA SAVE AREA
	MOV.W	#ZHTMAX-1,R5		; SET HT SET MAX. VALUE
STHT_2: JSR	@GETC			; GET DATA
	CMP.B	R3,R0			; CHECK OLD DATA & NEW DATA
	BLS	STHT_6			; BR. IF OLD >= NEW DATA
	MOV.B	R0,R3			; SAVE NEW DATA TO OLD SAVE AREA
	EXTU	R0			;
	MULXU.W R2,R0			; CALCULATE TAB POSITION (CURRENT PITCH x PARAMETER)
	MOV.W	R1,@FP+ 		; SAVE TAB POSITION
	SCB/F	R5,STHT_2		; BR. IF NOT END
STHT_4: JSR	@GETC			; GET PARAMETER
	CMP.B	R3,R0			; CHECK OLD DATA & NEW DATA
	BLS	STHT_6			; BR. IF OLD >= NEW DATA
	MOV.B	R0,R3			; SAVE NEW DATA TO OLD SAVE AREA
	BRA	STHT_4			; BR. IF NOT END
	;
STHT_6: CLR.W	@FP			; SET END DELIMITER DATA
	BSET.B	#QHTSTR,@APL0F:8	; SET HT SET RECEIVE FLAG
	RTS
	.PAGE
;
;	ESC + E
;
;	SET EMPHASIZED MODE
;
STEMP:	BSET.B	#QEMPHA,@PTMD1F:8	; SET EMPHASIZE MODE
	RTS
;
;	ESC + F
;
;	CANCEL EMPHASIZED MODE
;
CNEMP:	BCLR.B	#QEMPHA,@PTMD1F:8	; RESET EMPHASIZE MODE
	RTS
;
;	ESC + G
;
;	SET DOUBLE-STRIKE MODE
;
STDBS:	BSET.B	#QDBSTR,@PTMD1F:8	; SET DOUBLE-STRIKE MODE
	RTS
;
;	ESC + H
;
;	CANCEL DOUBLE-STRIKE MODE
;
CNDBS:	BCLR.B	#QDBSTR,@PTMD1F:8	; RESET DOUBLE-STRIKE MODE
	RTS
	.PAGE
;
;	ESC + J + n
;
;	PERFORM n/180-INCH LINE FEED
;
ESFORJ: JSR	@GETC			; GET DATA (n)
	EXTU	R0			; 921110
	MULXU.B #2,R0			; 921110
	DIVXU.B #3,R0			; 921110
	EXTU	R0			;
	BTST.B	#QJSTF0,@PTMD2F:8	;
	BNE	FORJ_2			; BR. IF ANY JUSTIFICATION
	BTST.B	#QJSTF1,@PTMD2F:8	;
	BNE	FORJ_2			; BR. IF ANY JUSTIFICATION
	MOV.W	R0,@-SP 		;+ SAVE PARAMETER
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R3 		;+ UNSAVE PARAMETER
	CALDP3	#ZPFORJ 		; CALL PERFORM 1/180 INCH FORWARD FEED PACKET TO DP3
	RTS
	;
FORJ_2: BCLR.B	#QDELVL,@APL2F:8	; RESET DELETE VALID FLAG
	MOV.W	#ZTBFDF,R5		; SET FEED COMMAND FORTH
	MOV.W	R0,@DATLNS:8		; SAVE PARAMETER
	BRA	PTPRM:16		; PUT PARAMETER INTO TEXT BUFFER
	.PAGE
;
;	ESC + M
;
;	SET ELITE MODE
;
STELT:	BSET.B	#QELITE,@PTMD1F:8	; SET ELITE MODE FLAG
	BCLR.B	#QPIT15,@PTMD1F:8	; RESET 15 CPI MODE
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407

	MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8

	MOV.B	#3,@KFSPLS		; 911127+
	MOV.B	#3,@KFSPRS		; 911127+
	MOV.B	#2,@KHSPLS		; 920326
	MOV.B	#2,@KHSPRS		; 920326
	RTS
;
;	ESC + N
;
;	SET SKIP PERFORATION
;
ESSKPP: JSR	@GETC			; GET DATA (n)
	EXTU	R0			;
	MOV.W	R0,R3			; SAVE PARAMETER
	CALDP3	#ZPSSKP 		; CALL SET SKIP PERFORATION PACKET TO DP3
CNSK_2: RTS
;
;	ESC + O
;
;	CANCEL SKIP PERFORATION
;
CNSKV:
	CALDP3	#ZPRSKP 		; CALL RESET SKIP PERFORATION PACKET TO DP3
	RTS
;
;	ESC + P
;
;	SET PICA MODE
;
STPIC:	BCLR.B	#QELITE,@PTMD1F:8	; RESET ELITE MODE
	BCLR.B	#QPIT15,@PTMD1F:8	; RESET 15 CPI MODE
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407

	MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8

	MOV.B	#6,@KFSPLS		; 911127+
	MOV.B	#6,@KFSPRS		; 911127+
	MOV.B	#3,@KHSPLS		; 920326
	MOV.B	#4,@KHSPRS		; 920326

	RTS
	.PAGE
;
;	ESC + Q + n
;
;	SET RIGHT MARGIN MODE
;
STRMG:	JSR	@GETPC1 		; GET CHARACTER PITCH (= R2)
	JSR	@GETC			; GET DATA (n)
SETRMG: EXTU	R0			;
	MULXU.W R0,R2			; CALCULATE RIGHT MARGIN VALUE (= R2->R3)
	TST.W	R2			;
	BNE	STRM_4			; BR. IF VALUE OVER
	CMP.W	#ZFLCLM,R3		;
	BHI	STRM_4			; BR. IF FULL COLUMN < SET VALUE
	CMP.W	@LMARGS:8,R3		;
	BLS	STRM_4			; BR. IF LEFT MARGIN >= SET VALUE
	MOV.W	R3,@RMARGS:8		; SAVE RIGHT MARGIN
	BSR	STJSTP:16		; CALCULATE JUSTIFICATION 75% POSITION
STRM_4: RTS
;
;	ESC + R + n
;
;	SELECT INTERNATIONAL CHARACTER
;
SLINC:	JSR	@GETC			; GET DATA (n)
	CMP.B	#13,R0			;
	BHI	STRM_4			; BR. IF ERROR DATA
	MOV.B	@APL1F:8,R1		; GET CURRENT INTERNATIONAL CHARACTER DATA
	AND.B	#ZN-XINTCG,R1		; CLEAR OLD INTERNATIONAL CHARACTER DATA
	OR.B	R1,R0			; OR OLD WITH NEW INTERNATIONAL CHARACTER DATA
	MOV.B	R0,@APL1F:8		; SAVE IT
	RTS
	.PAGE
;
;	ESC + S + n
;
;	SELECT SUPERSCRIPT/SUBSCRIPT
;
SELSS:	BSR	CKDT01:16		; GET & CHECK DATA = 0 or 1
	BNE	SELS_2			; BR. IF ERROR DATA
	BSR	CANSS			; CLEAR SUPER/SUBSCRIPT
	TST.B	R0			;
	BNE	SELS_4			; BR. IF n = 1 (SET SUBSCRIPT)
	BSET.B	#QSUPSC,@PTMD0F:8	; SET SUPERSCRIPT MODE
SELS_2: RTS
	;
SELS_4: BSET.B	#QSUBSC,@PTMD0F:8	; SET SUBSCRIPT MODE
	RTS
;
;	ESC + T
;
;	CANCEL SUPERSCRIPT/SUBSCRIPT
;
CANSS:	BCLR.B	#QSUPSC,@PTMD0F:8	; RESET SUPERSCRIPT MODE
	BCLR.B	#QSUBSC,@PTMD0F:8	; RESET SUBSCRIPT MODE
	RTS
;
;	ESC + U + n
;
;	SELECT UNIDIRECTION MODE
;
SLUDI:	BSR	CKDT01:16		; GET & CHECK DATA = 0 or 1
	BNE	SLUI_2			; BR. IF ERROR DATA
SETUDI: BCLR.B	#QPRUDI,@PTMD2F:8	; RESET UNI-DIRECTION PRINT MODE
	TST.B	R0			;
	BEQ	SLUI_2			; BR. IF n = 0
	BSET.B	#QPRUDI,@PTMD2F:8	; SET UNI-DIRECTION PRINT MODE
SLUI_2: RTS
;
;	ESC + W + n
;
;	SELECT DOUBLE-WIDTH MODE
;
SLDBW:	BSR	CKDT01:16		; GET & CHECK DATA = 0 or 1
	BNE	SLDW_4			; BR. IF ERROR DATA
	BSET.B	#QHENLR,@PTMD0F:8	; SET DOUBLE-WIDTH FLAG
	TST.B	R0			;
	BNE	SLDW_2			; BR. IF n = 1 (SET DOUBLE-WIDTH)
	BCLR.B	#QHENLR,@PTMD0F:8	; RESET DOUBLE-WIDTH FLAG


;----------------------------------------------------- 2001/03/19 +Shin ---;
    BTST.B  #4,@PTMD5F:8    ; 20CPI FLAG CHECK (2001/03/19 +Shin)
    BNE ESC720:16       ; 20 CPI Flag Check (2001/03/19 +Shin)
;--------------------------------------------------------------------------;

    RTS

SLDW_2:
        BCLR.B  #QENL1L,@PTMD0F:8   ; SET DOUBLE-WIDTH (1 LINE) FLAG
;----------------------------------------------------- 2001/03/19 +Shin ---;
        BCLR.B  #QCONDE,@PTMD1F:8   ; CONDENSE MODE DISABLE (+Shin)
        BCLR.B  #QKJHAF,@PTMD4F:8   ; HANGUL CONDENSE MODE DISABLE (+Shin)
        BCLR.B  #QKJQUA,@PTMD4F:8   ;
        BTST.B  #4,@PTMD5F:8        ; 20 Cpi Check (+Shin)
        BNE ESC715:16               ; fixed 15Cpi.....(+Shin)
;--------------------------------------------------------------------------;

SLDW_4: RTS
	.PAGE
;
;	ESC + \ + n1 + n2
;
;	SET RELATIVE DOT POSITION , 1/180 INCH PITCH (LQ)
;				    1/120 INCH PITCH (DRAFT)
;
STRPT:	JSR	@GETC			; GET DATA (n1)
	MOV.B	R0,R2			; SAVE IT
	JSR	@GETC			; GET DATA (n2)
	SWAP	R0			; n2 = HIGH
	MOV.B	R2,R0			; HIGH = n2 / LOW = n1
	MOV.W	#ZCL180,R5		; SET COMMAND UNIT = 1/180 inch
	BTST.B	#QKJMD,@PTMD5F:8	;
	BNE	STRP_3			; BR. IF KANJI MODE
	BTST.B	#QPROPO,@PTMD1F:8	;
	BNE	STRP_3			; BR. IF PROPORTIONAL MODE
	BTST.B	#QLQMD,@PTMD2F:8	;
	BNE	STRP_3			; BR. IF LQ MODE
	MOV.W	#ZCL120,R5		; SET COMMAND UNIT = 1/120 inch
STRP_3: TST.W	R0			;
	BMI	STRP_A:16		; BR. IF MINUS VALUE
	MULXU.W R5,R0			; CALCULATE RELATIVE POSITION
	ADD.W	@CLMCTC:8,R1		; + COLUMN COUNTER -> OBJECT COLUMN
	MOV.W	R1,@DATLNS:8		; SAVE IT (OBJECT COLUMN POSITION)
	CMP.W	@RMARGS:8,R1		; CHECK WITH RIGHT MARGIN
	BHI	SLDW_4			; BR. IF OBJECT > RIGHT MARGIN
	MOV.W	#ZTBCLF,R5		; SET RELATIVE COLUMN POSITION FLAG (FORWARD)
	BTST.B	#QIMGDT,@APL0F:8	;
	BEQ	STRP_4			; BR. IF NOT IMAGE DATA PRESENT
	BTST.B	#QIMGPR,@PRMODF:8	; SET IMAGE DATA INTO TEXT BUFFER FLAG
	BEQ	STRP_4			; BR. IF NOT IMAGE DATA PRESENT
	JSR	@GPTPM			; GET PRINT PITCH PARAMETER
	BTST.B	R2,@PRPTCF:8		;
	BEQ	STRP_6			; BR. IF PITCH CAHNGE
	MOV.B	@PTMD3F:8,R2		; GET PRINT MODE 3 (GET COLOR FLAG)
	AND.B	#XCOLMK,R2		; MASK EXCEPT COLOR FLAG
	MOV.W	@TXTBFP:8,FP		; GET TEXT BUFFER POINTER
	SUBS.B	#ZFMTSZ,FP		;
	MOV.B	@(YCOLRF,FP),R1 	; GET BEFORE COLOR FLAG
	AND.B	#XCOLMK,R1		; MASK EXCEPT COLOR FLAG
	CMP.B	R1,R2			;
	BNE	STRP_6			; BR. IF COLOR FLAG CHANGE
	BTST.B	#QVENLR,@PTMD0F:8	;
	BNE	STRP_6			; BR. IF VERTICAL ENLARGE FOR ANK
	BTST.B	#QDBSTP,@PRMODF:8	;
	BNE	STRP_6			; BR. IF DOUBLE STRIKE PRESENT
	BTST.B	#QDBST2,@PRMODF:8	;
	BNE	STRP_6			; BR. IF DOUBLE STRIKE MULTI
	BTST.B	#QCLMLT,@COLORF:8	;
	BNE	STRP_6			; BR. IF MULTI COLOR PRESENT
STRP_4: BTST.B	#QKJMD,@PTMD5F:8	;
	BNE	STRP_7			; BR. IF KANJI MODE
	BTST.B	#QKJVEP,@PRMODF:8	;
	BNE	STRP_5			; BR. IF KANJI VERTICAL ENLARGE PRESENT
	BTST.B	#QKJOLP,@PRMODF:8	;
	BNE	STRP_5			; BR. IF KANJI OVERLINE PRESENT
	BTST.B	#QKJULP,@PRMODF:8	;
	BEQ	STRP_7			; BR. IF NOT KANJI UNDERLINE PRESENT
STRP_5: BTST.B	#QVENLR,@PTMD0F:8	;
	BNE	STRP_6			; BR. IF VERTICAL ENLARGE FOR ANK
	BTST.B	#QNOULC,@PTMD2F:8	;
	BEQ	STRP_7			; BR. IF NOT RULED LINE CHARACTER FOR ANK
STRP_6: JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
STRP_7: MOV.W	#ZTBCLF,R5		; SET RELATIVE COLUMN POSITION FLAG (FORWARD)
	BTST.B	#QUNDLN,@PTMD1F:8	;
	BEQ	STRP_9			; BR. IF NOT UNDERLINE MODE FOR ANK
	BTST.B	#QKJMD,@PTMD5F:8	;
	BNE	STRP_9			; BR. IF KANJI MODE
	MOV.W	#ZTBCLU,R5		; SET RELATIVE COLUMN POSITION FLAG (NO UNDERLINE)
STRP_9: BSR	NXCLM2			; SET NEXT COLUMN
	BTST.B	#QVENLR,@PTMD0F:8	;
	BEQ	STRP_8			; BR. IF NOT VERTICAL ENLARGE FOR ANK
	JSR	@CHKPXN 		; CHECK PANEL xN SIZE
	BNE	STRP_8			; BR. IF NOT1 PANEL xN SIZE = NORMAL
	BSET.B	#QAKVEP,@PRMODF:8	; SET ANK VERTICAL ENLARGE PRESENT
;921111 IN
	BTST.B	#KUPPRO,@UMOD05:8
	BEQ	SVDC_A
	BSET.B	#ZUPPRO,@PTMD5F:8
	BCLR.B	#ZLOPRO,@PTMD5F:8
SVDC_A: BTST.B	#KLOPRO,@UMOD05:8
	BEQ	SVDC_B
	BSET.B	#ZLOPRO,@PTMD5F:8
	BCLR.B	#ZUPPRO,@PTMD5F:8
SVDC_B:
;921111 END
STRP_8: RTS
	;
STRP_A: NEG.W	R0			; GET Negate
	CMP.W	#(136*18+1),R0		;
	BCC	STRP_C			; BR. IF PLUS VALUE OVER
	MULXU.W R5,R0			; CALCULATE POSITION
	MOV.W	@CLMCTC:8,R2		;
	SUB.W	R1,R2			; COLUMN COUNTER - POSITION -> OBJECT POSITION
	MOV.W	R2,@DATLNS:8		; SAVE IT
	BCS	STRP_C			; BR. IF UNDERFLOW
	CMP.W	@LMARGS:8,R1		;
	BCS	STRP_C			; BR. IF SET POSITION < LEFT MARGIN
	BRA	NXCLM			; SET NEXT COLUMN
	;
STRP_C: RTS
	.PAGE
;
; << SUB >>	CHECK DIRECTION & SET NEXT COLUMN
;
;	IN	DATLNS : OBJECT COLUMN POSITION
;
;	USE	R0->R5
;
NXCLM:	MOV.W	#ZTBCLF,R5		; SET RELATIVE COLUMN POSITION FLAG (FORWARD)
NXCLM2: BCLR.B	#QDELVL,@APL2F:8	; RESET DELETE CODE VALID
	MOV.W	@DATLNS:8,R2		; GET OBJECT COLUMN
	SUB.W	@CLMCTC:8,R2		; - CURRENT COLUMN COUNTER
	BEQ	UPCM_2			; BR. IF CURRENT = OBJECT
	BPL	NXCL_2			; BR. IF OBJECT > CURRENT
	NEG.W	R2			; GET Negate
	MOV.W	#ZTBCLR,R5		; SET RELATIVE COLUMN POSITION FLAG (REVERSE)
	BSET.B	#QSPDB,@APL2F:8 	; SET SPEED B MODE (Unconditional !!)
	BTST.B	#QBCDPR,@PRPTCF:8	;
	BNE	UPCM_2			; BR. IF BAR CODE MODE
NXCL_2: MOV.W	@DATLNS:8,R1		; GET OBJECT COLUMN
	MOV.W	R2,@DATLNS:8		; SET RELATIVE COLUMN
	MOV.W	R1,@-SP 		;+ SAVE OBJECT COLUMN
	BSR	PTPRM:16		; PUT PARAMETER INTO TEXT BUFFER
	MOV.W	@SP+,R1 		;+ UNSAVE OBJECT COLUMN
	MOV.W	R1,@CLMCTC:8		; UPDATE CURRENT COLUMN
;
; << SUB >>	UPDATE COLUMN MAX COUNTER
;
;	USE	R2
;
UPCLMX: MOV.W	@CLMCTC:8,R2		; GET CURRENT COLUMN
	CMP.W	@CLMMXS:8,R2		;
	BCS	UPCM_2			; BR. IF MAX COLUMN > CURRENT COLUMN
	MOV.W	R2,@CLMMXS:8		; UPDATE MAX COLUMN
UPCM_2: RTS
	.PAGE
;
;	ESC + a + n
;
;	SELECT JUSTIFICATION
;
LQJST:	JSR	@GETC			; GET DATA (n)
	MOV.W	@CLMCTC:8,R3		; GET COLUMN COUNTER
	CMP.W	@LMARGS:8,R3		;
	BHI	UPCM_2			; BR. IF NOT LINE START
	CMP.B	#"0",R0                 ;
	BCS	LQJS_2			; BR. IF DATA < H'30
	SUB.B	#"0",R0                 ; - H'30
LQJS_2: CMP.B	#H'03,R0                ;
	BHI	UPCM_2			; BR. IF ERROR DATA
	MOV.B	@PTMD2F:8,R1		; GET PRINT MODE 2 FLAG
	AND.B	#ZN-XJSTMK,R1		; MASK EXCEPT OLD JUSTIFICATION FLAG
	OR.B	R0,R1			; OR WITH NEW TO OLD
	MOV.B	R1,@PTMD2F:8		; SAVE NEW JUSTIFICATION FLAG
	RTS
;
;	ESC + b + c + n1 + ..... + nm + NUL
;
;	SET VERTICAL TABS ON CANNEL
;
STCVT:	JSR	@GETC			; GET (c)
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#07,R0			;
	BLS	SETVT1			; BR. IF VALID DATA
	RTS
;
;	ESC + g
;
;	SET 15 CPI MODE
;
ST15C:	BSET.B	#QPIT15,@PTMD1F:8	; SET 15 CPI MODE
	BCLR.B	#QELITE,@PTMD1F:8	; CLEAR ELITE
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407
	MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8

	MOV.B	#0,@KFSPLS		; 911127+
	MOV.B	#0,@KFSPRS		; 911127+
	MOV.B	#0,@KHSPLS		; 920326
	MOV.B	#0,@KHSPRS		; 920326

	RTS
	.PAGE
;
;	ESC + j + n
;
;	PERFORM REVERSE n/180-INCH LINE FEED
;
ESREVJ: JSR	@GETC			; GET DATA (n)
	EXTU	R0			; 921110
	MULXU.B #2,R0			; 921110
	DIVXU.B #3,R0			; 921110
	EXTU	R0			;
	BTST.B	#QJSTF0,@PTMD2F:8	;
	BNE	REVJ_2			; BR. IF ANY JUSTIFICATION
	BTST.B	#QJSTF1,@PTMD2F:8	;
	BNE	REVJ_2			; BR. IF ANY JUSTIFICATION
	MOV.W	R0,@-SP 		;+ SAVE PARAMETER
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R3 		;+ UNSAVE PARAMETER
	CALDP3	#ZPREVJ 		; CALL PERFORM 1/180 INCH REVERSE FEED PACKET TO DP3
	RTS
	;
REVJ_2: BCLR.B	#QDELVL,@APL2F:8	; RESET DELETE VALID FLAG
	MOV.W	#ZTBFDB,R5		; SET FEED COMMAND BACKWARD
	MOV.W	R0,@DATLNS:8		; SAVE PARAMETER
;
; << SUB >>	PUT PARAMETER INTO CHARACTER BUFFER
;
;	IN	DATLNS : PARAMETER
;		   R5  : COMMAND FLAG
;
;	USE	R0->R5
;
PTPRM:	MOV.W	R5,@-SP 		;+ SAVE COMMAND FLAG
	BSR	CKSPDB:16		; CHECK SPEED B MODE
	MOV.W	@SP+,R5 		;+ UNSAVE COMMAND FLAG
	CMP.B	#ZTBCLU,R5		;
	BLS	PTPR_4			; BR. IF COLUMN COMMAND
	BTST.B	#QPRFST,@PRMDF:8	;
	BNE	PTPR_2			; BR. IF DATA IN
	JSR	@STLSM			; SET LINE START MODE
PTPR_2: JSR	@SVFCM			; SET FORMAT MODE (FEED COMMAND)
	BRA	PTPR_6
	;
PTPR_4: JSR	@STLSM			; SET LINE START MODE
	CMP.B	#ZTBCLU,R5		;
	BEQ	PTPR_3			; BR. IF COLUMN COMMAND (UNDERLINE)
	CMP.W	#TXTBF,@TXTBFP:8	;
	BEQ	PTPR_5			; BR. IF NO DATA
PTPR_3: JSR	@SVCCM			; SET FORMAT MODE (COLUMN COMMAND)
	CLR.W	@CHRWDS:8		; CLEAR COLUMN FOR BS
PTPR_6: JSR	@STPVF			; SET PRINT VARIATION FLAG
	BRA	UPTBFP
	;
PTPR_5: CLR.W	@CHRWDS:8		; CLEAR COLUMN FOR BS
	RTS
;
; << SUB >>	FP : NEXT TEXT BUFFER POINTER
;
UPTBFP: MOV.W	@TXTBFP:8,R1		;
	ADDS.B	#ZFMTSZ,R1		;
	MOV.W	R1,@TXTBFP:8		; UPDATE TEXT BUFFER POINTER
	CMP.W	#TXTBE,@TXTBFP:8	;
	BCS	UPTB_2			; BR. IF TEXT BUFFER NOT OVER
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
UPTB_2: RTS
	.PAGE
;
;	ESC + h + n
;	ESC + s + n
;	FS  + k + n
;
;	IGNORE 1 BYTE
;
IGN1B:	JSR	@GETC			; GET DATA (n)
	RTS
;
;       IGNORE 2 BYTE
;
IGN2B:  JSR     @GETC
	JSR	@GETC
	RTS

;       IGNORE 3 BYTE
;
IGN3B:	JSR	@GETC
	JSR	@GETC
	JSR	@GETC
	RTS
;
;	ESC + k + n
;
;	SELECT OCR-B FONT
;
SLFNT:	JSR	@GETC			; GET DATA (n)
	CMP.B	#"0",R0                 ;
	BCS	SLFT_2			; BR. IF DATA < H'30
	SUB.B	#"0",R0                 ; - H'30
SLFT_2: TST.B	R0			;
	BEQ	SLFT_4			; BR. IF RESET OCR-B MODE
	CMP.B	#H'05,R0                ;
	BNE	SLFT_6			; BR. IF ERROR DATA
	BSET.B	#QOCRMD,@PTMD2F:8	; SET OCR-B MODE
	RTS
	;
SLFT_4: BCLR.B	#QOCRMD,@PTMD2F:8	; RESET OCR-B MODE
SLFT_6: RTS
;
;	ESC + l + n
;
;	SET LEFT MARGIN
;
STLMG:	JSR	@GETPC1 		; GET CHARACTER PITCH (= R2)
	JSR	@GETC			; GET DATA (n)
	EXTU	R0			;
	MULXU.W R0,R2			; CALCULATE LEFT MARGIN VALUE
	TST.W	R2			;
	BNE	UPTB_2			; BR. IF VALUE OVER
	CMP.W	#ZCLPIC*80,R3		;
	BCC	UPTB_2			; BR. IF ERROR (PICA x 80 < LEFT MARGIN)
	CMP.W	@RMARGS:8,R3		;
	BCC	UPTB_2			; BR. IF ERROR (LEFT MARGIN >= RIGHT MARGIN)
	MOV.W	R3,@LMARGS:8		; SAVE LEFT MARGIN VALUE
STJSTP: JSR	@CANCD			; CANCEL FOR IMAGE DATA
	JSR	@INBFP			; SET NEXT LINE START = LEFT MARGIN
SJSTP1: MOV.W	@RMARGS:8,R1		; GET RIGHT MARGIN VALUE
	MOV.W	R1,R2			; SAVE RIGHT MARGIN VALUE
	SUB.W	@LMARGS:8,R1		; GET (LEFT MARGIN - RIGHT MARGIN) VALUE
	SHLR.W	R1			; /2
	SHLR.W	R1			; /4 (GET MARGIN DIF. 25% VALUE)
	SUB.W	R1,R2			; GET MARGIN DIF. 75% VALUE (BASE = LEFT MARGIN)
	MOV.W	R2,@JUSWDS:8		; SAVE IT
	RTS
	.PAGE
;
;	ESC + p + n
;
;	SELECT PROPORTIONAL MODE
;
SLPRF:	BSR	CKDT01:16		; GET & CHECK DATA 0 or 1
	BNE	SLPR_2			; BR. IF ERROR DATA
	BSET.B	#QPROPO,@PTMD1F:8	; SET PROPORTIONAL MODE
	TST.B	R0			;
	BNE	SLPR_2			; BR. IF n = 1 (SET PROPORTIONAL MODE)
	BCLR.B	#QPROPO,@PTMD1F:8	; CLEAR PROPORTIONAL MODE
SLPR_2: RTS
;
;	ESC + q + n
;
;	SELECT CHARACTER STYLE (OUTLINE / SHADOW)
;
SLSTL:	JSR	@GETC			; GET DATA (n)
	CMP.B	#H'03,R0                ;
	BHI	SLPR_2			; BR. IF ERROR DATA (DATA > H'03)
	SHLL.B	R0			; SHIFT 3 TIMES (-> MAKE SAME BIT POSITION)
	SHLL.B	R0			;
	SHLL.B	R0			;
	MOV.B	@PTMD0F:8,R1		; GET PRINT MODE 0 FLAG
	AND.B	#ZN-XSTLMK,R1		; MASK EXCEPT STYLE FLAG
	OR.B	R0,R1			; OR WITH (n x 8) TO MASK DATA
	MOV.B	R1,@PTMD0F:8		; SAVE IT
	RTS
	.PAGE
;
;	ESC + r + n
;
;	SELECT PRINTING COLOR
;
SLCOL:	JSR	@GETC			; GET DATA (n)
	AND.B	#H'07,R0                ; MASK EXCEPT LOW 3BITS
	CMP.B	#H'06,R0                ;
	BHI	SLPR_2			; BR. IF ERROR DATA
STCOL:	BTST.B	#QBRBN,@OPTF:8		;
	BEQ	SLCO_4			; BR. IF BLACK RIBBON
	BTST.B	#QRBRBN,@OPTF:8 	;
	BNE	SLCO_3			; BR. IF RED-BLACK RIBBON
	TST.B	R0			;
	BEQ	SLCO_5			; BR. IF BLACK RIBBON BIT
	BRA	SLCO_6			; SET DATA
;
;	<< SET CHARCTER COLOR >>	; 911217
;
STCCOL: BTST.B	#QBRBN,@OPTF:8		; 1217+ CODE COLOR
	BEQ	SLCO_4			;     +
	BTST.B	#QRBRBN,@OPTF:8 	;     +
	BNE	SLCO_3			;     +
	TST.B	R0			;     +
	BEQ	SLCO_5			;     +
	BRA	SLCO_6			;     +
;
;	<< RED-BLACK RIBBON >>
;
SLCO_3: CMP.B	#01,R0			;
	BNE	SLCO_5			; BR. IF NOT MAGENTA (BR. IF BLACK)
	BRA	SLCO_6			; SET DATA
;
;	<< BLACK RIBBON >>
;
SLCO_4: TST.B	R0			;
	BNE	SLCO_8			; BR. IF ERROR DATA
SLCO_5: MOV.B	#XCOLRB,R0		; SET BLACK RIBBON BIT
SLCO_6: MOV.B	@PTMD3F:8,R1		; GET PRINT MODE 3
	AND.B	#ZN-XCOLMK,R1		; RESET OLD COLOR FLAG
	OR.B	R1,R0			; SET NEW COLOR FLAG
	MOV.B	R0,@PTMD3F:8		; SAVE IT
SLCO_8: RTS
	.PAGE
;
;	911217
;	<< SET IMAGE COLOR >>
;
STICOL: BTST.B	#QBRBN,@OPTF:8		;
	BEQ	SLIC_4			; BR. IF BLACK RIBBON
	BTST.B	#QRBRBN,@OPTF:8 	;
	BNE	SLIC_3			; BR. IF RED-BLACK RIBBON
	TST.B	R0			;
	BEQ	SLIC_5			; BR. IF BLACK RIBBON BIT
	BRA	SLIC_6			; SET DATA
;
;	<< RED-BLACK RIBBON >>
;
SLIC_3: CMP.B	#01,R0			;
	BNE	SLIC_5			; BR. IF NOT MAGENTA (BR. IF BLACK)
	BRA	SLIC_6			; SET DATA
;
;	<< BLACK RIBBON >>
;
SLIC_4: TST.B	R0			;
	BNE	SLIC_8			; BR. IF ERROR DATA
SLIC_5: MOV.B	#XCOLRB,R0		; SET BLACK RIBBON BIT
SLIC_6: MOV.B	R0,@PTMD3F:8		; 911218
SLIC_8: RTS
	.PAGE
;
;	ESC + t + n
;
;	SET CHARACTER TABLE
;
STCHT:	MOV.B	#3,R3			; SET DATA MAX
	BSR	CHKDT:16		; RECEIVE & CHECK DATA
	BNE	SLCO_8			; BR. IF ERROR DATA
	BTST.B	#0,R0			;
	BEQ	SLCO_8			; BR. IF ERROR DATA
	BCLR.B	#QGRPTB,@APL0F:8	; RESET GRAPHIC TABLE
	BTST.B	#1,R0			;
	BNE	SLCO_8			; BR. IF SELECT KATAKANA
	BSET.B	#QGRPTB,@APL0F:8	; SELECT GRAPHIC TABLE
	RTS
	.PAGE
;
;	ESC + w + n
;
;	SELECT CHARACTER HEIGHT
;
SLCHH:	BSR	CKDT01:16		; GET & CHECK DATA = 0 or 1
	BNE	SLCO_8			; BR. IF ERROR DATA
    BCLR.B  #QVENLR,@PTMD0F:8   ; CLEAR DOUBLE HIGHT FLAG 영문
	BCLR.B	#QKJVEL,@PTMD4F:8	; SET DOUBLE HIGHT FLAG 한글
	TST.B	R0			;
    BEQ SLCDD          ; BR. IF n = 0 (RESET DOUBLE HIGHT)

;----------------------------------------- routine for 20CPI ---+Shin ;
    BCLR.B  #QCONDE,@PTMD1F:8   ;
    BCLR.B  #QKJHAF,@PTMD4F:8   ;
    BCLR.B  #QKJQUA,@PTMD4F:8   ;
;----------------------------------------- end -----------------;

	BSET.B	#QKJVEL,@PTMD4F:8	; SET DOUBLE HIGHT FLAG 한글
	BSET.B	#QVENLR,@PTMD0F:8	; SET DOUBLE HIGHT FLAG 영문

;---------------------------------------------------- 2001/03/19 --- +Shin ;
    BTST.B  #4,@PTMD5F:8        ; 20 Cpi Check (+Shin)
    BNE ESC715_1:16             ; Esc + q + 31 + 20 (20 Code Dummy)
;---------------------------------------------------------------;
	RTS

SLCDD:
;---------------------------------------------------- 2001/03/19 +Shin---;
    BTST.B  #4,@PTMD5F:8    ; 20CPI FLAG CHECK
    BNE ESC720:16               ; 20CPI
;---------------------------------------------------------------;
    RTS

;
;	ESC + x + n
;
;	SELECT LQ or DRAFT MODE
;+0609
SLNLD:

    BTST.B  #5,@PTMD5F:8    ; Image Flag Check
    BEQ SKPPG               ; BR IF 5 Bit is 0
    MOV.B   #H'42,R0        ; 11 Inch
    AND.B   #ZN-H'80,R0     ;
    BEQ STPL_2              ;
    EXTU    R0              ;
    MOV.W   R0,R3           ;
    CALDP3  #ZPPAGL         ; Call Page Length for line Packet to DP3
    BCLR.B  #5,@PTMD5F:8    ; Image Flag is Clear

SKPPG:

    JSR @GETC            ; Data Input...
    RTS                  ; Esc x Code Routine Skip...

     BSR CKDT01:16       ; GET DATA & CHECK DATA = 0 or 1
     BNE SLCO_8          ; BR. IF ERROR
SLMOD:

     TST.B   R0          ;
     BEQ TEMP          ; BR. IF DRAFT MODE
     BSET.B  #QLQMD,@PTMD2F:8    ; SET LQ MODE
     RTS
	.PAGE


TEMP:
     BCLR.B  #QLQMD,@PTMD2F:8    ; RESET LQ MODE
     RTS


;-0609
;SLNLD:  JSR	 @GETC			 ; 920320 UPDATE
     AND.B   #H'03,R0
     BTST.B  #H'0,R0
     BNE SLNL0
     BTST.B  #H'1,R0
     BNE SLNL1
     RTS
;
SLNL0:  BTST.B  #QKJMD,@PTMD5F:8    ; DRAFT MODE
     BNE SLNL01
     BSET.B  #QLQMD,@PTMD2F:8    ; DRAFT ANK
     RTS
SLNL01: RTS
;
SLNL1:	BCLR.B	#QLQMD,@PTMD2F:8	; LQ ANK
     RTS
	.PAGE
;
;	ESC + | + n
;
;	EXPAND ESC SEQUENSE
;
;	1. ESC + | + n (n = A->D,H)		BAR CODE START
;	2. ESC + | + n (n = 0->4,F,f,R) 	SELECT PAPER TYPE
;
EXPESC: JSR	@GETC			; GET DATA (n)
	CMP.B	#"A",R0                 ;
	BCS	EXPE_6			; BR. IF H'41 > DATA
	CMP.B	#"D",R0                 ;
	BLS	EXPE_2			; BR. IF H'44 >= DATA
	CMP.B	#"H",R0                 ;
	BNE	EXPE_6			; BR. IF NOT = H'48
EXPE_2: JMP	@BARCD			; GOTO BAR CODE PROCESS
;
;	SELECT PAPER TYPE
;
;	ESC + | + n + n1 + n2
;
EXPE_6: AND.B	#ZN-H'80,R0             ; CLEAR MSB
	MOV.B	R0,R3			; SAVE PARAMETER
	CMP.B	#"R",R0                 ;
	BEQ	EXPE_A			; BR. IF EJECT PAPER
	CMP.B	#"F",R0                 ;
	BEQ	EXPE_A			; BR. IF SELECT FORMS PAPER
	CMP.B	#"f",R0                 ;
	BEQ	EXPE_A			; BR. IF SELECT FORMS PAPER HOTCHKISS
	CMP.B	#"4",R0                 ;
	BEQ	EXPE_A			; BR. IF INSERT PAPER
	CMP.B	#"0",R0                 ;
	BEQ	EXPE_A			; BR. IF SELECT SHEET PAPER
	CMP.B	#"1",R0                 ;
	BEQ	EXPE_A			; BR. IF SELECT ACSF (1)
	CMP.B	#"2",R0                 ;
	BEQ	EXPE_A			; BR. IF SELECT ACSF (2)
	CMP.B	#"3",R0                 ;
	BNE	EXPE_C			; BR. IF NOT SELECT ACSF (3)
EXPE_A:
	CALDP3	#ZPPTYP 		; CALL SELECT PAPER TYTPE PACKET TO DP3
EXPE_C: JSR	@GETC			; GET DATA (n1)
	MOV.B	R0,R3			; SAVE (n1)
	JSR	@GETC			; GET DATA (n2)
	SWAP	R0			; SAVE (n2)
	MOV.B	R3,R0			;
	MOV.W	R0,R3			; R3 = (n1+(n2x256))
	TST.W	R3			;
	BEQ	EXPE_E			; BR. IF PARAMETER = 0
	ADD.W	#-1,R3			;
EXPE_D: JSR	@GETC			; GET IGNORE DATA
	SCB/F	R3,EXPE_D		; BR. IF NOT PARAMETER END
EXPE_E: RTS
	.PAGE
;
; << SUB >>	GET & CHECK DATA = 0 or 1
;
;	IN	NONE
;
;	OUT	R0 : DATA (LOW-NIBBLE ONLY)
;		R1 :	 = 0 ... NORMAL DATA (VALID)
;		     NOT = 0 ... ERROR	DATA (INVALID)
;
;	USE	R0->R1,R5
;
CKDT01: MOV.B	#1,R3			; SET DATA MAX
;
; << SUB >>	CHECK DATA
;
;	IN	R3 : DATA MAX.
;		DP : = 0
;
;	OUT	R0 : DATA (LOW-NIBBLE ONLY)
;		R1 :	 = 0 ... NORMAL DATA (VALID)
;		     NOT = 0 ... ERROR	DATA (INVALID)
;
;	USE	R0->R1,R5
;
CHKDT:	JSR	@GETC			; GET DATA
CHKDT1: MOV.B	#1,R1			; SET ERROR FLAG (INVALID)
	MOV.B	R0,R5			; SAVE DATA
	AND.B	#H'70,R0                ; CLEAR MSB & LOW NIBBLE
	BEQ	CHKD_4			; BR. IF HIGH = 0
CHKD_2: CMP.B	#H'30,R0                ;
	BNE	CHKD_6			; BR. IF NOT HIGH = H'30 (ERROR DATA (INVALID))
CHKD_4: MOV.B	R5,R0			; UNSAVE DATA
	AND.B	#H'0F,R0                ; CLEAR HIGH NIBBLE
	CMP.B	R3,R0			;
	BHI	CHKD_6			; BR. IF ERROR DATA (INVALID)
	CLR.B	R1			; NORMAL DATA (VALID)
CHKD_6: TST.B	R1			;
	RTS
	.PAGE
;
; << SUB >>	CHECK SPEED B MODE FLAG
;
;	IN/OUT	NONE
;
;	USE	R5
;
CKSPDB: BCLR.B	#QSPDB,@APL2F:8 	; RESET SPEED B MODE (Unconditional !!)
	MOV.B	@PTMD0F:8,R5		; GET PRINT MODE 0 FLAG
	AND.B	#XSTLMK+XVENLR+XHENLR+XENL1L,R5 ; MASK EXCEPT EDITING FLAG MASK
	BNE	CKSP_2			; BR. IF SPEED B MODE (NEED EDITING)
	MOV.B	@PTMD1F:8,R5		; GET PRINT MODE 1 FLAG
	AND.B	#XEMPHA+XDBSTR+XITALC+XUNDLN,R5 ; MASK EXCEPT EDITING FLAG MASK
	BNE	CKSP_2			; BR. IF SPEED B MODE (NEED EDITING)
	MOV.B	@PTMD4F:8,R5		; GET PRINT MODE 4 FLAG
	AND.B	#XKJVEL+XKJULN,R5	; MASK EXCEPT EDITING FLAG MASK
	BNE	CKSP_2			; BR. IF SPEED B MODE (NEED EDITING)
	MOV.W	@CLMCTC:8,R5		; GET CURRENT COLUMN
	CMP.W	@CLMMXS:8,R5		;
	BCC	CKSP_4			; BR. IF NOT OVERWRITE MODE
SETSPB:
CKSP_2: BSET.B	#QSPDB,@APL2F:8 	; SET SPEED B MODE (Unconditional !!)
CKSP_4: RTS
	.PAGE
;
; << SUB >>	CHECK JUSTIFICATION FLAG
;
;	IN	NONE
;
;	OUT	R0 : JUSTIFICATION FLAG (0->3)
;		R1 : = H'00 ... NOT JUSTIFICATION (NORMAL)
;		     = H'01 ... OTHER JUSTIFICATION
;		     = H'80 ... FULL JUSTIFICATION
;
;	USE	R0->R1
;
CHKJST: CLR.B	R1			; CLEAR CHECK FLAG
	MOV.B	@PTMD2F:8,R0		; GET PRINT MODE 2 FLAG
	AND.B	#XJSTMK,R0		; GET JUSTIFICATION FLAG
	BEQ	CHKJ_2			; BR. IF NOT JUSTIFICATION (NORMAL)
	MOV.B	#01,R1			; SET OTHERS JUSTIFICATION FLAG
	CMP.B	#XJSTMK,R0		; CHECK WITH FULL JUSTIFICATION
	BNE	CHKJ_2			; BR. IF OTHERS JUSTIFICATION
	MOV.B	#H'80:8,R1              ; SET FULL JUSTIFICATION FLAG
CHKJ_2: TST.B	R1			; CHECK JUSTIFICATION FLAG
	RTS
	.PAGE
;
; << SUB >>	GET & SET KANJI SPACE VALUE TO EEPROM AREA	< ENTRY FOR FORMAT CHANGE >
;
;	IN/OUT	NONE
;
;	USE	R2
;
DP2PFC: JSR	@GETPFP 		; GET CURRENT FORMAT NUMBER
	MOV.B	@(E2KJCP,FP),R2 	; GET CURRENT FORMAT FOR KANJI PITCH
	MOV.B	R2,R0
	SUB.B	#ZKCGCL,R2		; - KANJI FULL SIZE
	MOV.B	R2,R3
	SHLR.B	R2			; FULL RIGHT SPACE / 2
	MOV.B	R2,@KFSPLS:8
	MOV.B	R2,R1
	SUB.B	R2,R3
	MOV.B	R3,@KFSPRS:8
	SHLR.B	R1
	ADD.B	#1,R1
	MOV.B	R1,@KHSPLS:8
	SHLR.B	R3
	ADD.B	#1,R3			; ADJUST 1 COLUMN
	MOV.B	R3,@KHSPRS:8		; SET KANJI HALF SPACE RIGHT
;
;############## start ##################; [+sim]95.2.20
        BCLR.B  #QKCSWH,@UMOD01:8       ;
        CMP.B   #1,R0                   ;
        BEQ     ESC710:16
        CMP.B   #2,R0                   ;
        BEQ     ESC711:16
        CMP.B   #3,R0                   ;
        BEQ     ESC712:16
        CMP.B   #4,R0                   ;
        BEQ     ESC713:16
        CMP.B   #5,R0                   ;
        BEQ     ESC714:16
        CMP.B   #6,R0                   ;
        BEQ     ESC715:16
        CMP.B   #8,R0                   ; 20CPI MODULE JUMP
        BEQ     ESC720:16
;############## end  ###################; [+sim]95.2.20
;
;       920331+ Insert
	BCLR.B	#QKCSWH,@UMOD01:8	; 13.3 CPI
	CMP.B	#27,R0			; 920401 13.3 CPI
	BEQ	STAH5F			;	"
	SHLR.B	R0
	SUB.B	#12,R0
;
	CMP.B	#0,R0		      ;24
	BEQ	STAH10
	CMP.B	#1,R0		      ;26
	BEQ	STAH11
	CMP.B	#2,R0		      ;28
	BEQ	STAH12
	CMP.B	#3,R0		      ;30
	BEQ	STAH20
	CMP.B	#4,R0		      ;32
	BEQ	STAH21
	CMP.B	#5,R0		      ;34
	BEQ	STAH22
	BRA	STAHXX
	.PAGE
;
STAH10: MOV.B	#H'0,R0                 ;
	MOV.B	R0,@ANKSPS:8
	BRA	STAH1F
;
STAH11: MOV.B	#H'1,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH1F
;
STAH12: MOV.B	#H'2,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH1F
;
STAH1F: BSET.B	#QPIT15,@PTMD1F:8
	BCLR.B	#QELITE,@PTMD1F:8
	RTS
;
STAH5F: MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8
	BSET.B	#QKCSWH,@UMOD01:8	; 13.3 CPI
	BCLR.B	#QPIT15,@PTMD1F:8
	BSET.B	#QELITE,@PTMD1F:8
	RTS
	.PAGE
;
STAH20: MOV.B	#H'0,R0         ;30
	MOV.B	R0,@ANKSPS:8
	MOV.B	#2,R1		;
	MOV.B	R1,@KHSPLS:8	;
	MOV.B	#2,R1		;
	MOV.B	R1,@KHSPRS:8	;
	BRA	STAH2F
;
STAH21: MOV.B	#H'1,R0
	MOV.B	#2,R1		;
	MOV.B	R1,@KHSPLS:8	;
	MOV.B	#3,R1		;
	MOV.B	R1,@KHSPRS:8	;
	MOV.B	R0,@ANKSPS:8
	BRA	STAH2F
;
STAH22: MOV.B	#H'2,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH2F
;
STAH2F: BCLR.B	#QPIT15,@PTMD1F:8
	BSET.B	#QELITE,@PTMD1F:8
	RTS
;
;
STAHXX:
	CMP.B	#6,R0		      ;36
	BEQ	STAH30
	CMP.B	#7,R0		      ;38
	BEQ	STAH31
	CMP.B	#8,R0		      ;40
	BEQ	STAH32
	CMP.B	#9,R0		      ;42
	BEQ	STAH33
	BRA	STAH34
;
;
STAH30: MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8
	MOV.B	#3,R1
	MOV.B	R1,@KHSPLS:8
	MOV.B	#4,R1
	MOV.B	R1,@KHSPRS:8
	BRA	STAH3F
;
STAH31: MOV.B	#H'1,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH3F
;
STAH32: MOV.B	#H'2,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH3F
;
STAH33: MOV.B	#H'3,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH3F
;
STAH34: MOV.B	#H'4,R0
	MOV.B	R0,@ANKSPS:8
	BRA	STAH3F
;
STAH3F: BCLR.B	#QPIT15,@PTMD1F:8
	BCLR.B	#QELITE,@PTMD1F:8
	RTS
	.PAGE
;---------------------------------------
MD_CHK: 				; +920427
	MOV.B	@EEPBF+E2SIF1,R2	;
	CMP.B	#1,R2
	BEQ	MD_CK1
	CMP.B	#2,R2
	BEQ	MD_CK2
	CMP.B	#3,R2
	BEQ	MD_CK3
	CMP.B	#4,R2
	BEQ	MD_CK4
	CMP.B	#5,R2
	BEQ	MD_CK5
MD_CK7: MOV.B	R2,@UMOD04:8
	RTS
;
MD_CK1: MOV.B	#6,R2
	BRA	MD_CK7
MD_CK2: MOV.B	#7,R2
	BRA	MD_CK7
MD_CK3: MOV.B	#8,R2
	BRA	MD_CK7
MD_CK4: MOV.B	#9,R2
	BRA	MD_CK7
MD_CK5: MOV.B	#10,R2
	BRA	MD_CK7
	.PAGE
;
; << SUB >>	READ EEPROM MODE TO CURRENT MODE
RDEPMD:
	BTST.B	#QGRSET,@EEPBF+E2CPF2	;
	BEQ	RDEP_2			; BR. IF SELECT KATAKANA
	BSET.B	#QGRPTB,@APL0F:8	; SELECT GRAPHIC TABLE
RDEP_2: BTST.B	#QSLSH0,@EEPBF+E2CPF1	;
	BEQ	RDEP_4			; BR. IF NOT SELECT SLASH ZERO
	BSET.B	#QZEROS,@APL0F:8	; SELECT SLASH ZERO

RDEP_4: RTS
	.PAGE
;
; << SUB >>	INITIALIZE FLAG & WORK AREA
;
DP2IPR: 				; <-----> ENTRY FOR INPUT PRIME <----->
	JSR	@CLGBF			; ALL CLEAR GAIJI BUFFER
	JSR	@CLDBF			; ALL CLEAR DOWNLOAD BUFFER
DP2PON: 				; <-----> ENTRY FOR POWER ON <----->
INISS:	LDC.B	#PAGE DLDID,EP		; SET DOWNLOAD ID PAGE
	MOV.W	#DLDID,R4		; SET DOWNLOAD ID BASE ADDRESS
	MOV.B	#XNDDWL,@R4		; SET NO DEFINE DOWNLOAD FALG
DP2MDC: 				; <-----> ENTRY FOR MODE CHANGE <----->
INISB:	JSR	@CANCD			; CANCEL
	CLR.B	@APL0F:8		; CLEAR APPLICATION FLAG 0
	CLR.W	@APL1F:8		; CLEAR APPLICATION FLAG 1 & 2
	CLR.W	@PTMD0F:8		; CLEAR PRINT MODE 0 & 1
	CLR.W	@PTMD2F:8		; CLEAR PRINT MODE 2 & 3
	BSET.B	#QLQMD,@PTMD2F:8	; SELECT LQ MODE
	CLR.W	@PTMD4F:8		; CLEAR PRINT MODE 4 & 5
	CLR.W	@VTCHNF:8		; CLEAR VT CHANNEL FLAG
	CLR.W	@PRPTCF:8		; CLEAR PRINT MODE FLAG FOR 1 LINE
	CLR.B	@ANKSPS:8		; CLEAR ANK SPACE COUNTER
	CLR.B	@VTCHNS:8		; RESET VT CHANNEL = 0
	CLR.W	@LMARGS:8		; CLEAR LEFT MARGIN
	CLR.W	@CLMMXS:8		; CLEAR COLUMN MAX SAVE
	CLR.B	@PNLELS:8		; CLEAR PANEL ENLARGE 1 LINE SAVE

;----------------------------------------------------------------
    BCLR.B  #4,@PTMD5F:8    ; 20CPI Flag Clear (2001/04/03 +Shin)
    BCLR.B  #5,@PTMD5F:8    ; Image Flag Clear (2001/04/06 +Shin)

	CLR.B	R0			; SET BLACK RIBBON BIT FLAG
	BSR	STCOL			; RESET COLOR FLAG
	MOV.B	#3,@BCDHTS:8		; SET DEFAULT BAR CODE HEIGHT
	MOV.B	#13,@APL1F:8		; SET INTERNATIONAL CHARACTER = KOR
	JSR	@RSMSC			; RESET MSB CONTROL
	BSR	MD_CHK			; +920427
	BSR	DP2PFC			; GET & SET CURRENT FORMAT KANJI PITCH
    BSR RDEPMD          ; READ EEPROM MODE TO CURRENT MODE
	BSR	RDPNDT			; 911224
;	BSET.B	#QKEIVP,@UMOD01:8	; 930119

;------------------ BMT (RedCross) (+Shin 2000.02.22)
    MOV.B   #1,@PSPDF:8 ; NLQ Mode Setting (2000.02.22)
    CALIOS  #DSPNOR     ; Current Mode Display

;V'2.3  BSET.B  #QAUTOR,@UMOD05:8       ; DEFAULT AUTOWRAP
;V'2.3  BSET.B  #QKCSWD,@UMOD01:8       ; DEFAULT COMBINATION MODE 920609
;	BSET.B	#QOCRMD,@PTMD2F:8	; SET OCR-B MODE 920827
	MOV.B	#18,R0			; 920819
	LDC.B	#PAGE HBUF20,EP 	;  "
	MOV.W	#HBUF20,R4		;  "
	MOV.B	R0,@(3,R4)		;  "
;
	MOV.W	#4-1,R3 		;
INIS_4: MOV.B	R3,@(ESCKES,R3) 	; SET ESC + K/L/Y/Z ENTRY CODE
	SCB/F	R3,INIS_4		; BR. IF NOT LOOP END
	MOV.W	#ZFLCLM,@RMARGS:8	; SET RIGHT MARGIN = FULL COLUMN
	JSR	@INBFP			; SET NEXT LINE START = LEFT MARGIN
	BSR	STJSTP			; SET MARGIN VALUE FOR FULL JUSTIFICATION

;############## start ##################; [+Shin] 2001/03/19
        BCLR.B  #QKCSWH,@UMOD01:8       ;
        CMP.B   #1,R0                   ;
        BEQ     ESC710:16
        CMP.B   #2,R0                   ;
        BEQ     ESC711:16
        CMP.B   #3,R0                   ;
        BEQ     ESC712:16
        CMP.B   #4,R0                   ;
        BEQ     ESC713:16
        CMP.B   #5,R0                   ;
        BEQ     ESC714:16
        CMP.B   #6,R0                   ;
        BEQ     ESC715:16
        CMP.B   #8,R0                   ; 20CPI MODULE JUMP
        BEQ     ESC720:16
;############## end  ###################; [+Shin] 2001/03/19


	RTS
	.PAGE
;**************************************
;	COLOR DEFINE 911224	      *
;**************************************
RDCOR:	MOV.B	@UMOD03:8,R3
	AND.B	#H'07,R3
	CMP.B	#H'0,R3
	BEQ	RDCOR1
RDCOR2: MOV.B	R3,@PTMD3F:8
	RTS
RDCOR1: MOV.B	#H'08,R3
	BRA	RDCOR2
	.PAGE
;***************************************
; 911224 PANNEL LPI | HG/ENG | UN/BI-DIRECTION CONTROL | COLOR DEFINE
;***************************************
RDPNDT: BSR	RDLPI			; LPI SET
	BSR	RDHGMD			; HG/ENG | UN/BI-DIR
	BSR	RDCOR			; COLOR SET
	RTS
	.PAGE
;****************************************
RDLPI:	CMP.B	#0,@UMOD00:8		; 6  LPI
	BEQ	RDLPI5
	CMP.B	#1,@UMOD00:8		; 7.5LPI
	BEQ	RDLPI6
	CMP.B	#2,@UMOD00:8		; 8  LPI
	BEQ	RDLPI7
	CMP.B	#3,@UMOD00:8		; 2  LPI
	BEQ	RDLPI1
	CMP.B	#4,@UMOD00:8		; 3  LPI
	BEQ	RDLPI2
	CMP.B	#5,@UMOD00:8		; 4  LPI
	BEQ	RDLPI3
	CMP.B	#6,@UMOD00:8		; 5  LPI
	BEQ	RDLPI4
	RTS
	.PAGE
RDLPI1: MOV.B	#H'3C,R3                ; 2
	BRA	RDLPI8
RDLPI2: MOV.B	#H'28,R3                ; 3
	BRA	RDLPI8
RDLPI3: MOV.B	#H'1E,R3                ; 4
	BRA	RDLPI8
RDLPI4: MOV.B	#H'18,R3                ; 5
	BRA	RDLPI8
RDLPI5: MOV.B	#H'14,R3                ; 6
	BRA	RDLPI8
RDLPI6: MOV.B	#H'10,R3                ; 7.5
	BRA	RDLPI8
RDLPI7: MOV.B	#H'0F,R3                ; 8
RDLPI8: SWAP	R3
	MOV.B	#H'0,R3
	SWAP	R3
	CALDP3	#ZP3LP		; n/180" FEED VALUE
	RTS
	.PAGE
;
;****************************************
RDHGMD:
RDHGM0: CMP.B	#0,@UMOD02:8		; MJ/BI-DIR
	BEQ	RDHGM1
	CMP.B	#1,@UMOD02:8		; MJ/UN-DIR
	BEQ	RDHGM2
	CMP.B	#2,@UMOD02:8		; GD/BI-DIR
	BEQ	RDHGM3
	CMP.B	#3,@UMOD02:8		; GD/UN-DIR
	BEQ	RDHGM4
	CMP.B	#4,@UMOD02:8		; ENG/BI-DIR
	BEQ	RDHGM5
	CMP.B	#5,@UMOD02:8		; ENG/UN-DIR
	BEQ	RDHGM6
	RTS
;
RDHGM1: BSET.B	#QKJMD,@PTMD5F:8
	BCLR.B	#QDGODI,@UMOD05:8
	BCLR.B	#QPRUDI,@PTMD2F:8
	RTS
RDHGM2: BSET.B	#QKJMD,@PTMD5F:8
	BCLR.B	#QDGODI,@UMOD05:8
	BSET.B	#QPRUDI,@PTMD2F:8
	RTS
RDHGM3: BSET.B	#QKJMD,@PTMD5F:8
	BSET.B	#QDGODI,@UMOD05:8
	BCLR.B	#QPRUDI,@PTMD2F:8
	RTS
RDHGM4: BSET.B	#QKJMD,@PTMD5F:8
	BSET.B	#QDGODI,@UMOD05:8
	BSET.B	#QPRUDI,@PTMD2F:8
	RTS
RDHGM5: BCLR.B	#QKJMD,@PTMD5F:8
	BCLR.B	#QPRUDI,@PTMD2F:8
	RTS
RDHGM6: BCLR.B	#QKJMD,@PTMD5F:8
	BSET.B	#QPRUDI,@PTMD2F:8
	RTS
	.PAGE
;
;************************************************
ESCER1: JMP	@ESCER
;************************************************
;	IBM ESC SEQUENCE MODE			*
;************************************************
ESCIBM: JSR	@GETC			; 911105
	CMP.B	#"~",R0                 ;
	BHI	ESCER1			; BR. IF IGNORE CODE
	MOV.B	R0,R4			; SAVE OFFSET
	LDC.B	#PAGE ESCTIB,EP
	MULXU.B #2,R4			; OFFSET x 2
	MOV.W	@(ESCTIB:16,R4),R4
	JMP	@R4
	.PAGE
;
;	 << IBM ESCAPE SEQUENCE TABLE >>
;
	.ALIGN	 2
;
ESCTIB: .DATA.W      ESCER		; (00) NUL
	.DATA.W      ESCER		; (01) SOH
	.DATA.W      ESCER		; (02) STX
	.DATA.W      ESCER		; (03) ETX
	.DATA.W      ESCER		; (04) EOT
	.DATA.W      ESCER		; (05) ENQ
	.DATA.W      ESCER		; (06) ACK
	.DATA.W      ESCER		; (07) BEL
	.DATA.W      ESCER		; (08) BS
	.DATA.W      ESCER		; (09) HT
	.DATA.W      ESCER		; (0A) LF
	.DATA.W      ESCER		; (0B) VT
	.DATA.W      ESCER		; (0C) FF
	.DATA.W      ESCER		; (0D) CR
	.DATA.W      ESCER		; (0E) SO
	.DATA.W      ESCER		; (0F) SI
	.DATA.W      ESCER		; (10) DLE
	.DATA.W      ESCER		; (11) DC1
	.DATA.W      ESCER		; (12) DC2
	.DATA.W      ESCER		; (13) DC3
	.DATA.W      ESCER		; (14) DC4
	.DATA.W      ESCER		; (15) NAK
	.DATA.W      ESCER		; (16) SYN
	.DATA.W      ESCER		; (17) ETB
	.DATA.W      ESCER		; (18) CAN
	.DATA.W      ESCER		; (19) EM
	.DATA.W      ESCER		; (1A) SUB
	.DATA.W      ESCER		; (1B) ESC
	.DATA.W      ESCER		; (1C) FS
	.DATA.W      ESCER		; (1D) GS
	.DATA.W      ESCER		; (1E) RS
	.DATA.W      ESCER		; (1F) US
;
	.DATA.W      ESCER		; (20) SP
	.DATA.W      ESCER		; (21) !
	.DATA.W      ESCER		; (22) "
	.DATA.W      ESCER		; (23) #
	.DATA.W      ESCER		; (24) $
	.DATA.W      IES_A		;*(25) %
	.DATA.W      ESCER		; (26) &
	.DATA.W      ESCER		; (27) '
	.DATA.W      ESCER		; (28) (
	.DATA.W      ESCER		; (29) )
	.DATA.W      ESCER		; (2A) *
	.DATA.W      ESCER		; (2B) +
	.DATA.W      ESCER		; (2C) ,
	.DATA.W      ESCER		; (2D) -
	.DATA.W      ESCER		; (2E) .
	.DATA.W      ESCER		; (2F) /
	.DATA.W      ESCER		; (30) 0
	.DATA.W      ESCER		; (31) 1
	.DATA.W      ESCER		; (32) 2
	.DATA.W      ESCER		; (33) 3
	.DATA.W      ESCER		; (34) 4
	.DATA.W      ESCER		; (35) 5
	.DATA.W      ESCER		; (36) 6
	.DATA.W      ESCER		; (37) 7
	.DATA.W      ESCER		; (38) 8
	.DATA.W      ESCER		; (39) 9
	.DATA.W      ESCER		; (3A) :
	.DATA.W      ESCER		; (3B) ;
	.DATA.W      ESCER		; (3C) <
	.DATA.W      ESCER		; (3D) =
	.DATA.W      ESCER		; (3E) >
	.DATA.W      ESCER		; (3F) ?
	.DATA.W      ESCER		; (40) @
	.DATA.W      ESCER		; (41) A
	.DATA.W      ESCER		; (42) B
	.DATA.W      ESCER		; (43) C
	.DATA.W      ESCER		; (44) D
	.DATA.W      ESCER		; (45) E
	.DATA.W      PGL_ST		; (46) F Page length set
	.DATA.W      ESCER		; (47) G
	.DATA.W      ESCER		; (48) H
	.DATA.W      ESCER		; (49) I
	.DATA.W      ESCER		; (4A) J
	.DATA.W      ESCER		; (4B) K
	.DATA.W      ESCER		; (4C) L
	.DATA.W      ESCER		; (4D) M
	.DATA.W      ESCER		; (4E) N
	.DATA.W      DFT_ST		; (4F) O Draft mode set
	.DATA.W      DFT_RS		; (50) P Draft mode reset
	.DATA.W      ESCER		; (51) Q
	.DATA.W      ESCER		; (52) R
	.DATA.W      ESY05P		; (53) S ACF INSERT
	.DATA.W      ESCER		; (54) T
	.DATA.W      ESCER		; (55) U
	.DATA.W      ESY06P		; (56) V ACF OUT
	.DATA.W      ESCER		; (57) W
	.DATA.W      ESCER		; (58) X
	.DATA.W      ESCER		; (59) Y
	.DATA.W      ESCER		; (5A) Z
	.DATA.W      ESY09P		; (5B) [ DOUBLE SET
	.DATA.W      ESCER		; (5C) \
	.DATA.W      ESY0AP		; (5D) ] DOUBLE RESET
	.DATA.W      ESCER		; (5E) ^
	.DATA.W      ESCER		; (5F) _
	.DATA.W      ESCER		; (60)
	.DATA.W      ESCER		; (61) a
	.DATA.W      ESCER		; (62) b
	.DATA.W      ESCER		; (63) c
	.DATA.W      ESCER		; (64) d
	.DATA.W      ESCER		; (65) e
	.DATA.W      ESCER		; (66) f
	.DATA.W      ESCER		; (67) g
	.DATA.W      ESCER		; (68) h
	.DATA.W      ESCER		; (69) i
	.DATA.W      ESCER		; (6A) j
	.DATA.W      ESCER		; (6B) k
	.DATA.W      ESCER		; (6C) l
	.DATA.W      ESCER		; (6D) m
	.DATA.W      ESCER		; (6E) n
	.DATA.W      ESCER		; (6F) o
	.DATA.W      ESCER		; (70) p
	.DATA.W      ESCER		; (71) q
	.DATA.W      ESCER		; (72) r
	.DATA.W      ESCER		; (73) s
	.DATA.W      ESCER		; (74) t
	.DATA.W      ESCER		; (75) u
	.DATA.W      ESCER		; (76) v
	.DATA.W      ESCER		; (77) w
	.DATA.W      ESCER		; (78) x
	.DATA.W      ESCER		; (79) y
	.DATA.W      ESCER		; (7A) z
	.DATA.W      ESCER		; (7B) {
	.DATA.W      ESCER		; (7C) |
	.DATA.W      ESCER		; (7D) }
	.DATA.W      ESX_P		; (7E) ~
	.DATA.W      ESCER		; (7F) DEL
;
;	ESC + 25h + n
;
IES_A:	JSR	@GETC			;ESC + % + n
	CMP.B	#"0",R0
	BLO	IES_ER
	CMP.B	#"Z",R0
	BHI	IES_ER
	SUB.B	#"0",R0
	MOV.B	R0,R4
	MULXU.B #3,R4
	JMP	@(IES_TB:16,R4)
IES_ER: JMP	@ESCER
	.PAGE
;
IES_TB: BRA	ESCER:16	; 0
	JMP	@I_IMG		; 1 Single Bit image
	JMP	@I_IMGD 	; 2 Double Bit image
	JMP	@I_FAT		; 3 FWD H-SKIP n/180"
	JMP	@I_RAT		; 4 REV H-SKIP n/180"
	JMP	@I_DLF		; 5 n/120" LF AFTER PRT
	JMP	@I_PSET 	; 6 H-POSITION SET
	BRA	ESCER:16	; 7
	JMP	@I_RELF 	; 8 n/120" FLF AFTER PRT
	JMP	@I_LFPS 	; 9 LF PITCH SET n/180"
	BRA	ESCER:16	; :
	BRA	ESCER:16	; ;
	BRA	ESCER:16	; <
	BRA	ESCER:16	; =
	BRA	ESCER:16	; >
	BRA	ESCER:16	; ?
	BRA	ESCER:16	; @
	BRA	ESCER:16	; A
	JMP	@BISET		; B BI-DIRECTION SET
	BRA	ESCER:16	; C
	BRA	ESCER:16	; D
	BRA	ESCER:16	; E
	BRA	ESCER:16	; F
	BRA	ESCER:16	; G
	BRA	ESCER:16	; H
	BRA	ESCER:16	; I
	BRA	ESCER:16	; J
	BRA	ESCER:16	; K
	BRA	ESCER:16	; L
	BRA	ESCER:16	; M
	BRA	ESCER:16	; N
	BRA	ESCER:16	; O
	BRA	ESCER:16	; P
	BRA	ESCER:16	; Q
	BRA	ESCER:16	; R
	BRA	ESCER:16	; S
	BRA	ESCER:16	; T
	JMP	@UNISET 	; U UNI-DIRECTION SET
	BRA	ESCER:16	; V
	BRA	ESCER:16	; W
	BRA	ESCER:16	; X
	BRA	ESCER:16	; Y
	BRA	ESCER:16	; Z
;
;	ESC + % + 1 + n1 + n2	BIT IMG
;
I_IMG:	JSR	@GETC			; GET DATA (n1)
	MOV.B	R0,R2			; SAVE DATA (n1)
	AND.B	#H'1F,R2                ; MASK EXCEPT HIGH 3 BITS
	SWAP	R2			;
	JSR	@GETC			; GET DATA (n2)
	MOV.B	R0,R2			; DATA (n1) = LOW/(n2) = HIGH
	MOV.W	R2,@DATLNS:8		; SAVE PARAMETER LENGTH
	JMP	@I_IMG1
	.PAGE
;
;	ESC + % + 2 + n1 + n2 BIT IMG DOUBLE
;
I_IMGD: JSR	@GETC			; GET DATA (n1)
	MOV.B	R0,R2			; SAVE DATA (n1)
	AND.B	#H'1F,R2                ; MASK EXCEPT HIGH 3 BITS
	SWAP	R2			;
	JSR	@GETC			; GET DATA (n2)
	MOV.B	R0,R2			; DATA (n1) = LOW/(n2) = HIGH
	MOV.W	R2,@DATLNS:8		; SAVE PARAMETER LENGTH
	JMP	@I_IMG2
	.PAGE
;
;
I_FAT8: SWAP	R0		; 920812
	MOV.B	#H'0,R0         ;   "
	SWAP	R0		;   "
	BRA	I_FAT9		;   "
;
;---	ESC + % + 3 + n1 + n2
;	FWD. SKIP
;
I_FAT:
;812	JSR	@GET2C		; 920812
	JSR	@GETC		;   "
	CMP.B	#H'10,R0        ;   "
	BHI	I_FAT8		;   "
	MOV.B	R0,R2		;   "
	SWAP	R2		;   "
	JSR	@GETC		;   "
	MOV.B	R0,R2		;   "
	MOV.W	R2,R0		;   "
I_FAT9: 			;   "
;
	CMP.W	#18*136,R0
	BHI	I_FAT7
	MOV.W	#ZCL180,R5
	MULXU.W R5,R0
I_FAT1: ADD.W	@CLMCTC:8,R1
	MOV.W	R1,@DATLNS:8
	CMP.W	@RMARGS:8,R1
	BLS	I_FAT3
;
;920811 SUB.W	@RMARGS:8,R1
;  "    MOV.W   R1,@-SP
;  "    JSR     @SETPR1
;  "    JSR     @LINFD
;  "    MOV.W   @SP+,R1
;  "    BRA     I_FAT1
I_FAT2: MOV.W	@RMARGS:8,R1
	MOV.W	R1,@DATLNS:8
I_FAT3: MOV.W	#ZTBCLF,R5
I_FAT5: BSR	NXCLM2:16
	BTST.B	#QVENLR,@PTMD0F:8
	BEQ	I_FAT7
	JSR	@CHKPXN
	BNE	I_FAT7
	BSET.B	#QAKVEP,@PRMODF:8
I_FAT7: RTS
	.PAGE
;
;
;---	ESC + % + 4 + n1 + n2
;	REV. SKIP
;
I_RAT:	JSR	@GET2C
	CMP.W	#18*136,R0
	BHI	I_RAT7
	MOV.W	#ZCL180,R5
	MULXU.W R5,R0
	MOV.W	@CLMCTC:8,R2
	SUB.W	R1,R2
	BCC	I_RAT2
	MOV.W	@LMARGS:8,R2
I_RAT2: CMP.W	@LMARGS:8,R2
	BCC	I_RAT3
	MOV.W	@LMARGS:8,R2
I_RAT3: MOV.W	R2,@DATLNS:8
I_RAT5: BRA	NXCLM:16
I_RAT7: RTS
	.PAGE
;
;	FWD n/120" LF
;	ESC + % + 5 + n1 + n2
;
I_DLF:	JSR	@GET2C			; GET DATA (n)
	BTST.B	#QJSTF0,@PTMD2F:8	;
	BNE	FORJ_2			; BR. IF ANY JUSTIFICATION
	BTST.B	#QJSTF1,@PTMD2F:8	;
	BNE	FORJ_2			; BR. IF ANY JUSTIFICATION
	MOV.W	R0,@-SP 		;+ SAVE PARAMETER
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R3 		;+ UNSAVE PARAMETER
	CALDP3	#ZPFORJ 		; CALL PERFORM 1/180 INCH FORWARD FEED PACKET TO DP3
II_END: RTS
	.PAGE
;
;---	ESC + % + 6 + n1 + n2
;	PRINT POSITION SET
;
I_PSET: JSR	@GET2C			;GET RECEIVE VAL. TO R0
	CMP.W	#18*136,R0		;
	BHI	I_PSE2			; BR. IF ERROR (PICA x 136 < DATA)
	CMP.W	#0,R0
	BEQ	I_PSE1
	SUB.B	#1,R0
I_PSE1: MOV.W	#ZCL180,R5		; SET COMMAND UNIT = 1/180 inch
	MULXU.W R5,R0			; CALCULATE POSITION
	MOV.W	R1,@DATLNS:8		; SAVE IT
	BRA	NXCLM:16		; SET NEXT COLUMN
I_PSE2: RTS
	.PAGE
;
;
;---	ESC + % + 8 + n1 + n2
;	REV. n/120" LF
;
I_RELF: JSR	@GET2C			; GET DATA (n)
	BTST.B	#QJSTF0,@PTMD2F:8	;
	BNE	REVJ_2			; BR. IF ANY JUSTIFICATION
	BTST.B	#QJSTF1,@PTMD2F:8	;
	BNE	REVJ_2			; BR. IF ANY JUSTIFICATION
	MOV.W	R0,@-SP 		;+ SAVE PARAMETER
	JSR	@STPRNT 		; SET END MARK TO TEXT BUFFER & PRINT
	JSR	@INBFC			; SET NEXT LINE START = CURRENT COLUMN
	MOV.W	@SP+,R3 		;+ UNSAVE PARAMETER
	CALDP3	#ZPREVJ 		; CALL PERFORM 1/180 INCH REVERSE FEED PACKET TO DP3
	RTS
	.PAGE
;
;---	ESC + % + 9 + n1 + n2
;	SET FEED VAL(n/120").
;
I_LFPS: JSR	@GET2C
	CMP.W	#60,R0
	BLS	I_LFP2
	MOV.W	#20,R0
I_LFP2: EXTU	R0
	MOV.W	R0,R3
	CALDP3	#ZP3LP		; n/180" FEED VALUE
	RTS
	.PAGE
;
;---	ESC + % + B
;	SET BI-DIRECTION PRINT
;
BISET:	BCLR.B	#QPRUDI,@PTMD2F:8
	RTS
;
;---	ESC + % + U
;	SET UNI-DIRECTION PRINT
;
UNISET: BSET.B	#QPRUDI,@PTMD2F:8
	RTS
;
;	ESC + 4Fh DRAFT SET
DFT_ST: BCLR.B	#QLQMD,@PTMD2F:8
	RTS
;
;	ESC + 50h DRAFT RESET
DFT_RS: BSET.B	#QLQMD,@PTMD2F:8
	RTS
	.PAGE
;
;	ESC + 46h + n1 + n2 PAGE LENGTH SET
PGL_ST: JSR	@GETC			; GET DATA (n)
	NOP
	JSR	@GETC			; GET DATA (n)
	EXTU	R0			;
	MOV.W	R0,R3			; SAVE PAGE LENGTH PARAMETER (INCH)
	CALDP3	#ZPPAGL 		; CALL PAGE LENGTH FOR PAGE PACKET TO DP3
	RTS
	.PAGE
;
GET2C:	JSR	@GETC			; GET 2BYTE DATA
	MOV.B	R0,R2
	SWAP	R2
	JSR	@GETC
	MOV.B	R0,R2
	MOV.W	R2,R0
	RTS
	.PAGE
;
;	ESC + 7Eh + n
;
ESX_P:	JSR	@GETC			;ESC + 7Eh + n
	CMP.B	#"!",R0
	BCC	ESX_ER
	MOV.B	R0,R4
	MULXU.B #3,R4
	JMP	@(ESX_TB:16,R4)
ESX_ER: JMP	@ESCER
	.PAGE
;
	.ALIGN	 2
ESX_TB: BRA	ESCER:16		; (00)
	JMP	@ESX01P 		; (01)	INITIAL PRT
	JMP	@ESX02P 		; (02)	CPI CONTROL
	JMP	@ESX03P 		; (03)	LF PITCH SET
	JMP	@ESX04P 		; (04)	PAGE LENGTH SET
	BRA	ESCER:16		; (05)
	JMP	@ESX06P 		; (06)
	JMP	@ESX07P 		; (07)	SELECT COLOR
	BRA	ESCER:16		; (08)
	BRA	ESCER:16		; (09)
	BRA	ESCER:16		; (0A)
	BRA	ESCER:16		; (0B)
	BRA	ESCER:16		; (0C)
	BRA	ESCER:16		; (0D)
	JMP	@ESX0EP 		; (0E)
	BRA	ESCER:16		; (0F)
	BRA	ESCER:16		; (10)
	JMP	@ESX12P 	;DUMY	; (11)	UNDER LINE SET/RESET
	JMP	@ESX12P 		; (12)	DUMMY
	BRA	ESCER:16		; (13)
	BRA	ESCER:16		; (14)
	BRA	ESCER:16		; (15)
	BRA	ESCER:16		; (16)
	BRA	ESCER:16		; (17)
	BRA	ESCER:16		; (18)
	BRA	ESCER:16		; (19)
	BRA	ESCER:16		; (1A)
	BRA	ESCER:16		; (1B)
	BRA	ESCER:16		; (1C)
	BRA	ESCER:16		; (1D)
	BRA	ESCER:16		; (1E)
	BRA	ESCER:16		; (1F)
	BRA	ESCER:16		; (20)
	.PAGE
;
;	ESC + 7Eh + 01h + 00h + 00h	PRT RESET
ESX01P: JSR	@GET2C
	BSR	SETPR1
	JSR	@INBFP
	JSR	@FFCD2
	BSR	INISB:16
	RTS
	.PAGE
;
;	ESC + 7Eh + 02h + 00h + 01h + n CPI CONTROL
ESX02P: JSR	@GET2C
	CMP.B	#H'01,R0
	BNE	ESX020
	JSR	@GETC
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407
	AND.B	#H'7F,R0
	CMP.B	#H'32,R0                ; 10 : 5 CPI
	BEQ	STPIC
	CMP.B	#H'3C,R0                ; 12 : 6 CPI
	BEQ	STELT
	CMP.B	#H'43,R0                ; 13 : 6.5 CPI
	BEQ	ESCER		;??
	CMP.B	#H'4B,R0                ; 15 : 7.5 CPI
	BEQ	ST15C
ESX020: RTS
	.PAGE
;
;	ESC + 7Eh + 03h + 00h + 01h + n LF PITCH SET
ESX03P: JSR	@GET2C
	CMP.B	#H'01,R0
	BNE	ESX030
	JSR	@GETC
	CMP.B	#H'14,R0                ; 2  LPI
	BEQ	ESX031
	CMP.B	#H'1E,R0                ; 3  LPI
	BEQ	ESX032
	CMP.B	#H'28,R0                ; 4  LPI
	BEQ	ESX033
	CMP.B	#H'32,R0                ; 5  LPI
	BEQ	ESX034
	CMP.B	#H'3C,R0                ; 6  LPI
	BEQ	ESX035
	CMP.B	#H'4B,R0                ; 7.5LPI
	BEQ	ESX036
	CMP.B	#H'50,R0                ; 8  LPI
	BEQ	ESX037
ESX030: RTS
ESX031: MOV.B	#H'3C,R0
	BRA	ESX038
ESX032: MOV.B	#H'28,R0
	BRA	ESX038
ESX033: MOV.B	#H'1E,R0
	BRA	ESX038
ESX034: MOV.B	#H'18,R0
	BRA	ESX038
ESX035: MOV.B	#H'14,R0
	BRA	ESX038
ESX036: MOV.B	#H'10,R0
	BRA	ESX038
ESX037: MOV.B	#H'0F,R0
ESX038: SWAP	R0
	MOV.B	#H'0,R0
	SWAP	R0
	MOV.W	R0,R3
	CALDP3	#ZP3LP		; n/180" FEED VALUE
	RTS
	.PAGE
;
;	ESC + 7Eh + 04h + n1 + n2 + c1 + c2 + (c3)	PAGE LENGTH SET
ESX04P: JSR	@GET2C
	JSR	@GETC			; GET DATA (n)
	CMP.B	#H'00,R0
	BEQ	ESX041
	CMP.B	#H'01,R0
	BEQ	ESX042
	CMP.B	#H'02,R0
	BEQ	ESX043
	RTS
	.PAGE

ESX041: JSR	@GET2C			; GET DATA (n)
	MOV.W	R0,R3			; SAVE PAGE LENGTH PARAMETER (INCH)
	CALDP3	#ZPPAGI 		; CALL PAGE LENGTH FOR INCH PACKET TO DP3
	RTS
;
ESX042: JSR	@GETC			; GET DATA (n)
	EXTU	R0			;
	MOV.W	R0,R3			; SAVE DATA (n)
	CALDP3	#ZPPAGL 		; CALL PAGE LENGTH FOR LINE PACKET TO DP3
	RTS
;
ESX043: JSR	@GETC			; GET DATA (n)
	EXTU	R0			;
	MOV.W	R0,R3			; SAVE PAGE LENGTH PARAMETER (INCH)
	CALDP3	#ZPPAGI 		; CALL PAGE LENGTH FOR INCH PACKET TO DP3
	RTS
	.PAGE
;
;	ESC + 7Eh + 06h + 00h + 01h + n CHAR STYLE SET
ESX06P: JSR	@GET2C
	CMP.B	#H'01,R0
	BNE	ESX060
	JSR	@GETC
ESX060: RTS
	.PAGE
;
;	ESC + 7Eh + 08h + n1 + n2 + c1 + c2 + c3 + ... cn CHAR PRT SET
;
;	ESC + 7Eh + 11h + 00h + 01h + n 	UNDERLINE SET/RESET
;
;	ESC + 7Eh + 12h + 00h + 01h + 11	? DUMY
ESX12P: JSR	@GET2C
	CMP.B	#H'01,R0
	BNE	ESX120
	JSR	@GETC
ESX120: RTS
;
;	DUMY PROCESSING
ESXDMY: JSR	@GET2C
	NOP
	JSR	@GET2C
	RTS
	.PAGE
;---------------------------------------------------------------------------
;	ESC + 7Eh + 07h + 00h + 02h + m + n
ESX07P: JSR	@GET2C
	CMP.W	#H'02,R0
	BNE	ESX120
	JSR	@GETC			; GET m
	CMP.B	#H'02,R0
	BEQ	COL_P20
	CMP.B	#H'03,R0
	BEQ	COL_P30
	RTS
	.PAGE
COL_P20:				; CODE COLOR CONTROL
	JSR	@GETC			; GET n
	CMP.B	#H'07,R0
	BEQ	ESX120
	CMP.B	#H'08,R0
	BNE	COL_P21
	MOV.B	#H'07,R0
COL_P21:
	CMP.B	#H'07,R0
	BHI	ESX120
	AND.B	#H'0F,R0
;920217 MOV.B	R0,R4
;  "    EXTU    R4
;  "    LDC.B   #PAGE CCHGTB,EP
;  "    MOV.B   @(CCHGTB:16,R4),R0
	BRA	STCCOL:16		; SET CHARACTER COLOR
	.PAGE
COL_P30:				; IMAGE COLOAR CONTROL
	JSR	@GETC			; GET n
	CMP.B	#H'07,R0
	BEQ	ESX120
	CMP.B	#H'08,R0
	BNE	COL_P31
	MOV.B	#H'07,R0
COL_P31:
	CMP.B	#H'07,R0
	BHI	ESX120
	AND.B	#H'0F,R0
	MOV.B	R0,R4
	EXTU	R4
	LDC.B	#PAGE CCHGTB,EP
	MOV.B	@(CCHGTB:16,R4),R0
	BRA	STICOL:16		; SET IMAGE COLOR
	.PAGE
;
CCHGTB: .DATA.B H'00                    ;00H INITIAL    (BLACK)
	.DATA.B XCOLRC+XCOLRM		;01H BLUE	(VIORET)
	.DATA.B XCOLRY+XCOLRM		;02H RED	(ORANGE)
	.DATA.B XCOLRM			;03H MAGENTA	(MAGENTA)
	.DATA.B XCOLRY+XCOLRC		;04H GREEN	(GREEN)
	.DATA.B XCOLRC			;05H CYAN	(CYAN)
	.DATA.B XCOLRY			;06H YELLOW	(YELLOW)
	.DATA.B H'00                    ;07H BLACK      (BLACK)
	.DATA.B XCOLRY+XCOLRC+XCOLRM	;08H WHITE	(?)
	.PAGE
;
;---------------------------------------------------------------------------
;
;	ESC + 7Eh + 0Eh
;
ESX0EP: JSR	@GETC			; 911217
	CMP.B	#H'00,R0
	BEQ	ESX0E0
	RTS
;
;	ESC + 7Eh + 0Eh + 00h + 01h  => ESY
ESX0E0: JSR	@GETC			;ESC + 7Eh + 0Eh + 00h + 01h +
	CMP.B	#H'01,R0
	BNE	ESX120
	JSR	@GETC			;				n
	CMP.B	#H'24,R0
	BHI	ESX_ER
	MOV.B	R0,R4
	MULXU.B #3,R4
	JMP	@(ESX0ET:16,R4)
	.PAGE
;
	.ALIGN	 2
ESX0ET: BRA	ESCER:16	; (00)
	JMP	@DFT_ST 	; (01)	DRAFT MODE SET
	JMP	@DFT_RS 	; (02)	DRAFT MODE RESET
	BRA	ESCER:16	; (03)
	BRA	ESCER:16	; (04)
	JMP	@ESY05P 	; (05)	ACF INSERT
	JMP	@ESY06P 	; (06)	ACF OUT
	JMP	@ESY07P 	; (07)	CONDENSE SET
	JMP	@ESY08P 	; (08)	CONDENSE RESET
	JMP	@ESY09P 	; (09)	DOUBLE SET
	JMP	@ESY0AP 	; (0A)	DOUBLE RESET
	JMP	@ESY0BP 	; (0B)	TATE
	JMP	@ESY0CP 	; (0C)	YOKO
	JMP	@ESY0DP 	; (0D)	SUPER SCRIPT SET
	JMP	@ESY0EP 	; (0E)	SUB	 "
	JMP	@ESY0FP 	; (0F)	SUPER/SUB RESET
	BRA	ESCER:16	; (10)
	JMP	@ESY11P 	; (11)	CODE PROCESSING
	BRA	ESCER:16	; (12)
	BRA	ESCER:16	; (13)
	BRA	ESCER:16	; (14)
	BRA	ESCER:16	; (15)
	BRA	ESCER:16	; (16)
	JMP	@ESY17P 	; (17)	BOLD SET
	JMP	@ESY18P 	; (18)	     RESET
	JMP	@ESY19P 	; (19)	DOUBLE STRIKE SET
	JMP	@ESY1AP 	; (1A)		      RESET
	BRA	ESCER:16	; (1B)
	BRA	ESCER:16	; (1C)
	BRA	ESCER:16	; (1D)
	BRA	ESCER:16	; (1E)
	BRA	ESCER:16	; (1F)
	BRA	ESCER:16	; (20)
	BRA	ESCER:16	; (21)
	BRA	ESCER:16	; (22)
	BRA	ESCER:16	; (23)
	JMP	@FIL_ED 	; (24)
	.PAGE
;
;---	ESX + 0E + 00 + 01 + 24 920212
;	FILE END COMMAND
;
FIL_ED:
	BCLR.B	#QBUSY,@IFPOTA		;SET BUSY HIGH
	MOV.W	#3000/10,R0		;SET ABOUT 3ms
	BSR	ESWAIT			;WAIT
	BSET.B	#QCAN,@IFPOTA		;SET CANSEL HIGH
	BCLR.B	#QFALT,@IFPOTA		;SET FAULT LOW

	MOV.W	#7000/10,R0		;SET ABOUT 7ms
	BSR	ESWAIT			;WAIT
	BCLR.B	#QCAN,@IFPOTA		;SET CANSEL LOW
	BSET.B	#QFALT,@IFPOTA		;SET FAULT HIGH
	BSET.B	#QBUSY,@IFPOTA		;SET BUSY LOW
	RTS
;
;---	WIAT FOR ESQ. SEQ. (UNIT ABOUT 10us)
;
;	R0:WAIT COUNT
ESWAIT:
ESWT_0: NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
;
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
;
	SCB/F	R0,ESWT_0		; BR. IF NOT END
	RTS
;
;
;	ESY + 05h	ACF INSERT
ESY05P: MOV.B	#H'31,R0
	MOV.B	R0,R3
	CALDP3	#ZPACSF
	RTS
;
;	ESY + 06h	ACF OUT
ESY06P: MOV.B	#H'52,R0
	MOV.B	R0,R3
	CALDP3	#ZPACSF
	RTS
	.PAGE
;
;	ESY + 07h	CONDENCE MODE SET
ESY07P: BSET.B	#QCONDE,@PTMD1F:8
	RTS
;
;	ESY + 08h	CONDENCE MODE RESET
ESY08P: BCLR.B	#QCONDE,@PTMD1F:8
	RTS
;
;	ESY + 09h	DOUBLE SET
ESY09P: BSET.B	#QHENLR,@PTMD0F:8	; SET DOUBLE-WIDTH FLAG
	RTS
;	ESY + 0Ah	DOUBLE RESET
ESY0AP: BCLR.B	#QHENLR,@PTMD0F:8
	RTS
	.PAGE
;
;	ESY + 0Bh	TATE
ESY0BP: BSET.B	#QKJVRT,@PTMD4F:8
	RTS
;	ESY + 0Ch	YOKO
ESY0CP: BCLR.B	#QKJVRT,@PTMD4F:8
	RTS
;
;	ESY + 0Dh	SUPER SCRIPT
ESY0DP: BSET.B	#QSUPSC,@PTMD0F:8
	RTS
;	ESY + 0Eh	SUB SCRIPT
ESY0EP: BSET.B	#QSUBSC,@PTMD0F:8
	RTS
;
;	ESY + 0Fh	SUPER SUB SCRIPT RESET
ESY0FP: BCLR.B	#QSUPSC,@PTMD0F:8
	BCLR.B	#QSUBSC,@PTMD0F:8
	RTS
;
;	ESY + 11h	CODE PROCESSING
ESY11P: 					; 911216
ESY110: JSR	@GETC
	CMP.B	#H'1B,R0
	BEQ	ESY113	; CODE PROCESS END
	CMP.B	#H'80,R0
	BCS	ESY112	; ENG CODE PROCESS
	MOV.B	R0,@KJCDS1:8
	JSR	@GET2C	; DUMMY 2BYTE GET
	JSR	@GETC	; GET 2'ND DATA
	MOV.B	R0,@KJCDS2:8
   ; CODE CONVERSION INSERT.
	BSR	CHKKCD
	BNE	ESY111	; NOT KANJI
	BSR	SVDTK:16
ESY111: JSR	@GET2C
	BRA	ESY110
ESY112: BSR	SVDTA:16
	BRA	ESY111
ESY113: JSR	@GET2C		; 2
	JSR	@GET2C		; 4
	JSR	@GET2C		; 6
	JSR	@GET2C		; 8
	JSR	@GET2C		; 10
	JSR	@GET2C		; 12
	JSR	@GET2C		; 14
	JSR	@GET2C		; 16
	JSR	@GETC		; 17
	RTS
	.PAGE
;
;	ESY + 17h/19h	BOLD SET
ESY17P:
ESY19P: BSET.B	#QDBSTR,@PTMD1F:8
	RTS
;
;	ESY + 18h/1Ah	BOLD RESET
ESY18P:
ESY1AP: BCLR.B	#QDBSTR,@PTMD1F:8
	RTS
	.PAGE
;
;**************************************************
ESCER2: JMP	@ESCER
;**************************************************
;	KSC ESC SEQUENCE TABLE			  *
;**************************************************
ESCKSC:

    JSR @GETC           ; GET DATA
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#"~",R0                 ;
	BHI	ESCER2			; BR. IF IGNORE CODE
	MOV.B	R0,R4			; SAVE OFFSET
	LDC.B	#PAGE ESCTKS,EP
	MULXU.B #2,R4			; OFFSET x 2
	MOV.W	@(ESCTKS:16,R4),R4
	JMP	@R4
	.PAGE
;
	.ALIGN	 2
;
ESCTKS: .DATA.W    ESCER		; (00) NUL
	.DATA.W    ESCER		; (01) SOH
	.DATA.W    ESCER		; (02) STX
	.DATA.W    ESCER		; (03) ETX
	.DATA.W    ESCER		; (04) EOT
	.DATA.W    ESCER		; (05) ENQ
	.DATA.W    ESCER		; (06) ACK
	.DATA.W    ESCER		; (07) BEL
	.DATA.W    ESCER		; (08) BS
	.DATA.W    ESCER		; (09) HT
	.DATA.W    ESCER		; (0A) LF
	.DATA.W    ESCER		; (0B) VT
	.DATA.W    ESCER		; (0C) FF
	.DATA.W    ESCER		; (0D) CR
	.DATA.W    SLDB1		; (0E) SO  Select Double-width Mode <1 Line>
	.DATA.W    STCND		; (0F) SI  Set Condense Mode
	.DATA.W    ESCER		; (10) DLE
	.DATA.W    ESCER		; (11) DC1
	.DATA.W    ESCER		; (12) DC2
	.DATA.W    ESCER		; (13) DC3
	.DATA.W    ESCER		; (14) DC4
	.DATA.W    ESCER		; (15) NAK
	.DATA.W    ESCER		; (16) SYN
	.DATA.W    ESCER		; (17) ETB
	.DATA.W    ESCER		; (18) CAN
	.DATA.W    ESCER		; (19) EM
	.DATA.W    ESCER		; (1A) SUB
	.DATA.W    ESCER		; (1B) ESC
	.DATA.W    ESCER		; (1C) FS
	.DATA.W    ESCER		; (1D) GS
	.DATA.W    ESCER		; (1E) RS
	.DATA.W    ESCER		; (1F) US
;
	.DATA.W    ESCER		; (20) SP
	.DATA.W    ESCER		; (21) !
	.DATA.W    ESCER		; (22) "
	.DATA.W    ESCER		; (23) #
	.DATA.W    ESCER		; (24) $
	.DATA.W    ESCDUM		; (25) % 920412
	.DATA.W    ESCER		; (26) &
	.DATA.W    ESCER		; (27) '
	.DATA.W    STLMG		; (28) ( LEFT  MARGIN
	.DATA.W    STRMG		; (29) ) RIGHT MARGIN
	.DATA.W    ESCER		; (2A) *
	.DATA.W    ESCER		; (2B) +
	.DATA.W    ESCER		; (2C) ,
	.DATA.W    SLUDL		; (2D) - Select Under Line
	.DATA.W    ESCER		; (2E) .
	.DATA.W    ESCER		; (2F) /
	.DATA.W    ST8LP		; (30) 0 Select 1/8 Inch Line Spacing
	.DATA.W    ST10LP		; (31) 1 Select 1/10 Inch Line Spacing
	.DATA.W    STXLP		; (32) 2 Select 1/6 inch Line Spacing
	.DATA.W    STGLP		; (33) 3 Select n/180 inch Line Spacing
	.DATA.W    SLITL		; (34) 4 Select Italic Mode
	.DATA.W    CNITL		; (35) 5 Cancel Italic Mode
	.DATA.W    PRCE1		; (36) 6 Printable Code Area Expansion
	.DATA.W    CNES6		; (37) 7 Cancel ESC 6
	.DATA.W    ESCER		; (38) 8
	.DATA.W    ESCER		; (39) 9
	.DATA.W    ESCER		; (3A) :
	.DATA.W    ESCER		; (3B) ;
	.DATA.W    CRCD 		; (3C) < Head Home
	.DATA.W    ESCER		; (3D) =
	.DATA.W    ESCER		; (3E) >
	.DATA.W    ESCER		; (3F) ?
	.DATA.W    ESIPRN		; (40) @ Initialize Printer
	.DATA.W    STDFD		; (41) A Select n/60 Inch Line Spacing
	.DATA.W    SETVT		; (42) B Set Vertical Tabs
	.DATA.W    ESPAGL		; (43) C Set Page Length
	.DATA.W    STHTB		; (44) D Set Horizontal Tabs
	.DATA.W    STEMP		; (45) E Set Emphasized Mode
	.DATA.W    CNEMP		; (46) F Cancel Emphasized Mode
	.DATA.W    STDBS		; (47) G Set Double-strike Mode
	.DATA.W    CNDBS		; (48) H Cancel Double-strike Mode
	.DATA.W    ESCER		; (49) I
	.DATA.W    ESFORJ		; (4A) J Perform n/180 Inch Line Feed
	.DATA.W    SIDIG		; (4B) K Single-density Image Mode
	.DATA.W    DODIG		; (4C) L Double-density Image Mode
	.DATA.W    ESCER		; (4D) M
	.DATA.W    ESCER		; (4E) N
	.DATA.W    ESCER		; (4F) O
	.DATA.W    ESCER		; (50) P
	.DATA.W    ESCER		; (51) Q
	.DATA.W    ESCER		; (52) R
	.DATA.W    SELSS		; (53) S Select Superscript/Subscript
	.DATA.W    CANSS		; (54) T Cancel Superscript/Subscript
	.DATA.W    SLUDI		; (55) U Select Unidirectiond Mode
	.DATA.W    ESCER		; (56) V
    .DATA.W    SLDBW        ; (57) W Select/Cancel Double-Width Mode
	.DATA.W    ESCER		; (58) X
	.DATA.W    ESCER		; (59) Y
	.DATA.W    ESCER		; (5A) Z
	.DATA.W    ESC5BP		;*(5B) [
	.DATA.W    ESCER		; (5C) \
	.DATA.W    ESC5DP		;*(5D) ]
	.DATA.W    ESCER		; (5E) ^
	.DATA.W    ESCER		; (5F) _
	.DATA.W    ESCER		; (60)
	.DATA.W    ESCER		; (61) a
	.DATA.W    ESCER		; (62) b
	.DATA.W    ESC63R		; (63) c 1/n Line feed set
	.DATA.W    ESC64P		;*(64) d Auto wrap around
	.DATA.W    ESCER		; (65) e
	.DATA.W    IGN3B		;*(66) f Dot TAB n1n2n3
	.DATA.W    ESCER		; (67) g
	.DATA.W    ESC68R		; (68) h HAN/ENG MODE SEL
	.DATA.W    ESC69R		;*(69) i Double Height upper/lower
	.DATA.W    ESC6AR		; (6A) j TATE/YOKO
	.DATA.W    ESCER		; (6B) k
	.DATA.W    ESCER		; (6C) l
	.DATA.W    MGSEL		; (6D) m MYENGJO/GODIC SEL
	.DATA.W    ESC6EP		; (6E) n 24Pin image
	.DATA.W    ESCER		; (6F) o
	.DATA.W    ESCER		; (70) p
	.DATA.W    ESC71P		; (71) q CPI CONTROL
	.DATA.W    SREVS		; (72) r Select printing Reverse
	.DATA.W    ESCER		; (73) s
	.DATA.W    ESC74P		;*(74) t Column tab
	.DATA.W    ESC75R		; (75) u n/120 Inch LF Pitch set
	.DATA.W    ESCER		; (76) v
	.DATA.W    MASKBL		; (77) w Masking Block
	.DATA.W    SLNLD		; (78) x Select LQ or DRAFT
    .DATA.W    SLCHH        ; (79) y Double Height
	.DATA.W    SAMIK		; (7A) z Amikake set/reset
	.DATA.W    ESCER		; (7B) {
	.DATA.W    EXPESC		; (7C) | BAR-CODE
	.DATA.W    ESCER		; (7D) }
	.DATA.W    ESCER		; (7E) ~
	.DATA.W    ESCER		; (7F) DEL
	.PAGE
;
ESC5BP: BSET.B	#QHENLR,@PTMD0F:8	;
	RTS
;
ESC5DP: BCLR.B	#QHENLR,@PTMD0F:8	;
	RTS
;
;*****************************************************
ESCER3: JMP	@ESCER
;*****************************************************
;	KSSM ESC SEQUENCE TABLE 		     *
;*****************************************************
ESCKSM: JSR	@GETC			; GET DATA
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#"~",R0                 ;
	BHI	ESCER3			; BR. IF IGNORE CODE
	MOV.B	R0,R4			; SAVE OFFSET
	LDC.B	#PAGE ESCTKM,EP
	MULXU.B #2,R4			; OFFSET x 2
	MOV.W	@(ESCTKM:16,R4),R4
	JMP	@R4
	.PAGE
;
	.ALIGN	 2
;
ESCTKM: .DATA.W    ESCER		; (00) NUL
	.DATA.W    ESCER		; (01) SOH
	.DATA.W    ESCER		; (02) STX
	.DATA.W    ESCER		; (03) ETX
	.DATA.W    ESCER		; (04) EOT
	.DATA.W    ESCER		; (05) ENQ
	.DATA.W    ESCER		; (06) ACK
	.DATA.W    ESCER		; (07) BEL
	.DATA.W    ESCER		; (08) BS
	.DATA.W    ESCER		; (09) HT
	.DATA.W    ESCER		; (0A) LF
	.DATA.W    ESCER		; (0B) VT
	.DATA.W    ESCER		; (0C) FF
	.DATA.W    ESCER		; (0D) CR
	.DATA.W    SLDB1		; (0E) SO  Select Double-width Mode <1 Line>
	.DATA.W    STCND		; (0F) SI  Set Condense Mode
	.DATA.W    ESCER		; (10) DLE
	.DATA.W    ESCER		; (11) DC1
	.DATA.W    ESCER		; (12) DC2
	.DATA.W    ESCER		; (13) DC3
	.DATA.W    ESCER		; (14) DC4
	.DATA.W    ESCER		; (15) NAK
	.DATA.W    ESCER		; (16) SYN
	.DATA.W    ESCER		; (17) ETB
	.DATA.W    ESCER		; (18) CAN
	.DATA.W    ESACSF		; (19) EM  Select Auto Cut Sheet Feeder
	.DATA.W    ESCER		; (1A) SUB
	.DATA.W    ESCER		; (1B) ESC ESCAPE Sequence
	.DATA.W    ESCER		; (1C) FS  FS Sequence
	.DATA.W    ESCER		; (1D) GS
	.DATA.W    ESCER		; (1E) RS
	.DATA.W    ESCER		; (1F) US
;
	.DATA.W    STCSP		; (20) SP Set Character Space
	.DATA.W    MSTSL		; (21) ! Master Select
	.DATA.W    ESCER		; (22) "
	.DATA.W    RSMSC		; (23) # MSB Control Sequence Cancel
	.DATA.W    STABP		; (24) $ Set Absolute Dot Position
	.DATA.W    SLDLS		; (25) % Select Down-load Set
	.DATA.W    DFDLF		; (26) & Define Down-load Characters
	.DATA.W    ESCER		; (27) '
	.DATA.W    CHDECO		; (28) ( Char decoration
	.DATA.W    ESCER		; (29) )
	.DATA.W    SLIMG		; (2A) * Select Image Mode
	.DATA.W    ESCER		; (2B) +
	.DATA.W    ESCER		; (2C) ,
	.DATA.W    SLUDL		; (2D) - Select Under Line
	.DATA.W    ESCER		; (2E) .
	.DATA.W    STVCH		; (2F) / Select Vertical Tab Channel
	.DATA.W    ST8LP		; (30) 0 Select 1/8 Inch Line Spacing
	.DATA.W    ST17P		; (31) 1 SELECT 17/180 inch Line Spaceing
	.DATA.W    ST6LP		; (32) 2 Select 1/6 inch Line Spacing
	.DATA.W    STGLP		; (33) 3 Select n/180 inch Line Spacing
	.DATA.W    SLITL		; (34) 4 Select Italic Mode
	.DATA.W    CNITL		; (35) 5 Cancel Italic Mode
	.DATA.W    PRCE1		; (36) 6 Printable Code Area Expansion
	.DATA.W    CNES6		; (37) 7 Cancel ESC 6
	.DATA.W    ESCER		; (38) 8
	.DATA.W    ESCER		; (39) 9
	.DATA.W    CPRAM		; (3A) : Copy ROM Into RAM
	.DATA.W    ESCER		; (3B) ;
	.DATA.W    ESCER		; (3C) < Select Unidirectiond Mode <1 LINE>
	.DATA.W    STMS0		; (3D) = MSB = 0 Setting
	.DATA.W    STMS1		; (3E) > MSB = 1 Setting
	.DATA.W    REIMG		; (3F) ? Reassign Image Mode
	.DATA.W    ESIPRN		; (40) @ Initialize Printer
	.DATA.W    STTLP		; (41) A Select n/60 Inch Line Spacing
	.DATA.W    SETVT		; (42) B Set Vertical Tabs
	.DATA.W    ESPAGL		; (43) C Set Page Length
	.DATA.W    STHTB		; (44) D Set Horizontal Tabs
	.DATA.W    STEMP		; (45) E Set Emphasized Mode
	.DATA.W    CNEMP		; (46) F Cancel Emphasized Mode
	.DATA.W    STDBS		; (47) G Set Double-strike Mode
	.DATA.W    CNDBS		; (48) H Cancel Double-strike Mode
        .DATA.W    IGN1B                ; (49) I
	.DATA.W    ESFORJ		; (4A) J Perform n/180 Inch Line Feed
	.DATA.W    SIDIG		; (4B) K Single-density Image Mode
	.DATA.W    DODIG		; (4C) L Double-density Image Mode
	.DATA.W    STELT		; (4D) M Set Elite Mode
	.DATA.W    ESSKPP		; (4E) N Set Skip-over-perforation
	.DATA.W    CNSKV		; (4F) O Cancel Skip-over-perforation
	.DATA.W    STPIC		; (50) P Set Pica Mode
	.DATA.W    STRMG		; (51) Q Set Right Margin
	.DATA.W    SLINC		; (52) R Select International Character
	.DATA.W    SELSS		; (53) S Select Superscript/Subscript
	.DATA.W    CANSS		; (54) T Cancel Superscript/Subscript
	.DATA.W    SLUDI		; (55) U Select Unidirectiond Mode
	.DATA.W    ESCER		; (56) V
	.DATA.W    SLDBW		; (57) W Select/Cancel Double-Width Mode
	.DATA.W    ESCER		; (58) X
	.DATA.W    HDDIG		; (59) Y High-Speed Double-density Image
	.DATA.W    QUAIG		; (5A) Z Quadruple-density Image
	.DATA.W    ESCER		; (5B) [
	.DATA.W    STRPT		; (5C) \ Set Relative Dot Position
	.DATA.W    ESCER		; (5D) ]
	.DATA.W    ESCER		; (5E) ^
	.DATA.W    ESCER		; (5F) _
	.DATA.W    ESCER		; (60)
	.DATA.W    LQJST		; (61) a Select Justification
	.DATA.W    STCVT		; (62) b Set Vertical Tabs in Channels
	.DATA.W    ESCER		; (63) c
	.DATA.W    ESCER		; (64) d
	.DATA.W    ESCER		; (65) e
	.DATA.W    ESCER		; (66) f
	.DATA.W    ST15C		; (67) g Set 15 CPI Mode
	.DATA.W    IGN1B		; (68) h
	.DATA.W    ESC69R		; (69) i Double height upper/lower
	.DATA.W    ESREVJ		; (6A) j Perform Reverse n/180 Inch Line Feed
	.DATA.W    SLFNT		; (6B) k Select LQ Font
	.DATA.W    STLMG		; (6C) l Set Left Margin
	.DATA.W    MGSEL		; (6D) m MYENGJO/GODIC SEL
	.DATA.W    ESCER		; (6E) n
	.DATA.W    SLCOL		; (6F) o SELECT COLOR 920330
	.DATA.W    SLPRF		; (70) p Select Proportional Mode
	.DATA.W    SLSTL		; (71) q Select Character Style
	.DATA.W    SLCOL		; (72) r Select printing Color
	.DATA.W    IGN1B		; (73) s Select Half-speed Mode
	.DATA.W    STCHT		; (74) t Set Character Table
	.DATA.W    ESCER		; (75) u
	.DATA.W    HVCON		; (76) v VERTICAL CONNEXTION
	.DATA.W    SLCHH		; (77) w Select Character height
	.DATA.W    SLNLD		; (78) x Select LQ or DRAFT
	.DATA.W    ESCER		; (79) y
	.DATA.W    SAMIK		; (7A) z AMIKAKE SET/RESET
	.DATA.W    ESCER		; (7B) {
	.DATA.W    EXPESC		; (7C) | BAR-CODE
	.DATA.W    ESCER		; (7D) }
	.DATA.W    ESCER		; (7E) ~
	.DATA.W    ESCER		; (7F) DEL
	.PAGE
;
;********************************************************
ESCER4: JMP	@ESCER
;*****************************************************
;	TG ESC SEQUENCE TABLE			     *
;*****************************************************
ESCTG:	JSR	@GETC			; GET DATA
	AND.B	#ZN-H'80,R0             ; CLEAR MSB
	CMP.B	#"~",R0                 ;
	BHI	ESCER4			; BR. IF IGNORE CODE
	MOV.B	R0,R4			; SAVE OFFSET
	LDC.B	#PAGE ESCTGM,EP
	MULXU.B #2,R4			; OFFSET x 2
	MOV.W	@(ESCTGM:16,R4),R4
	JMP	@R4
	.PAGE
;
	.ALIGN	 2
;
ESCTGM: .DATA.W    ESCER		; (00) NUL
	.DATA.W    ESCER		; (01) SOH
	.DATA.W    ESCER		; (02) STX
	.DATA.W    ESCER		; (03) ETX
	.DATA.W    ESCER		; (04) EOT
	.DATA.W    ESCER		; (05) ENQ
	.DATA.W    ESCER		; (06) ACK
	.DATA.W    ESCER		; (07) BEL
	.DATA.W    ESCER		; (08) BS
	.DATA.W    ESCER		; (09) HT
	.DATA.W    ESCER		; (0A) LF
	.DATA.W    ESCER		; (0B) VT
	.DATA.W    ESCER		; (0C) FF
	.DATA.W    ESCER		; (0D) CR
	.DATA.W    ESCER		; (0E) SO
	.DATA.W    ESCER		; (0F) SI
	.DATA.W    ESCER		; (10) DLE
	.DATA.W    ESCER		; (11) DC1
	.DATA.W    ESCER		; (12) DC2
	.DATA.W    ESCER		; (13) DC3
	.DATA.W    ESCER		; (14) DC4
	.DATA.W    ESCER		; (15) NAK
	.DATA.W    ESCER		; (16) SYN
	.DATA.W    ESCER		; (17) ETB
	.DATA.W    ESCER		; (18) CAN
	.DATA.W    ESCER		; (19) EM
	.DATA.W    ESCER		; (1A) SUB
	.DATA.W    ESCER		; (1B) ESC
	.DATA.W    ESCER		; (1C) FS
	.DATA.W    ESCER		; (1D) GS
	.DATA.W    ESCER		; (1E) RS
	.DATA.W    ESCER		; (1F) US
;
	.DATA.W    ESCER		; (20) SP
	.DATA.W    ESCER		; (21) !
	.DATA.W    ESCER		; (22) "
	.DATA.W    ESCER		; (23) #
	.DATA.W    ESCER		; (24) $
	.DATA.W    ESCER		; (25) %
	.DATA.W    ESCER		; (26) &
	.DATA.W    ESCER		; (27) '
	.DATA.W    ESCER		; (28) (
	.DATA.W    ESCER		; (29) )
	.DATA.W    SLIMG		;*(2A) * BIT IMAGE
	.DATA.W    ESCER		; (2B) +
	.DATA.W    ESCER		; (2C) ,
	.DATA.W    ESCER		; (2D) -
	.DATA.W    ESCER		; (2E) .
	.DATA.W    ESCER		; (2F) /
	.DATA.W    ESCER		; (30) 0
	.DATA.W    ESCER		; (31) 1
	.DATA.W    ESCER		; (32) 2
	.DATA.W    STGLP		;*(33) 3
	.DATA.W    ESCER		; (34) 4
	.DATA.W    ESCER		; (35) 5
	.DATA.W    TG36P		;*(36) 6
	.DATA.W    TG37P		;*(37) 7
	.DATA.W    ESCER		; (38) 8
	.DATA.W    ESCER		; (39) 9
	.DATA.W    ESCER		; (3A) :
	.DATA.W    ESCER		; (3B) ;
	.DATA.W    ESCER		; (3C) <
	.DATA.W    ESCER		; (3D) =
	.DATA.W    ESCER		; (3E) >
	.DATA.W    ESCER		; (3F) ?
	.DATA.W    ESCER		; (40) @
	.DATA.W    ESCER		; (41) A
	.DATA.W    TG42P		;*(42) B SET DOUBLE STRIKE
	.DATA.W    ESCER		; (43) C
	.DATA.W    TG44P		;*(44) D DOUBLE WIDTH SET
	.DATA.W    ESCER		; (45) E
	.DATA.W    SAMIK1		;*(46) F AMIKAKE SET
	.DATA.W    TG47P		;*(47) G GOTHIC
	.DATA.W    ESCER		; (48) H
	.DATA.W    TG49P		;*(49) I 7.5 : 7.5 CPI
	.DATA.W    ESCER		; (4A) J
	.DATA.W    ESCER		; (4B) K
	.DATA.W    TG4CP		;*(4C) L DOUBLE WIDTH SET
	.DATA.W    ESCER		; (4D) M
	.DATA.W    TG4EP		;*(4E) N DOUBLE WIDTH RESET
	.DATA.W    ESCER		; (4F) O
	.DATA.W    ESCER		; (50) P
	.DATA.W    ESCER		; (51) Q
	.DATA.W    ESCER		; (52) R
	.DATA.W    TG53P		;*(53) S SET CONDENCE MODE
	.DATA.W    TG54P		;*(54) T COLUMN TAB
	.DATA.W    TG55P		;*(55) U SET UNDER LINE
	.DATA.W    KCONE1		;*(56) V VERTICAL CONNECT
	.DATA.W    TG57P		;*(57) W 12 : 6 CPI SET
	.DATA.W    ESCER		; (58) X
	.DATA.W    ESCER		; (59) Y
	.DATA.W    ESCER		; (5A) Z
	.DATA.W    TG5BP		;*(5B) [ EXP PRO
	.DATA.W    ESCER		; (5C) \
	.DATA.W    ESCER		; (5D) ]
	.DATA.W    ESCER		; (5E) ^
	.DATA.W    ESCER		; (5F) _
	.DATA.W    ESCER		; (60)
	.DATA.W    ESCER		; (61) a
	.DATA.W    TG62P		;*(62) b RESET DOUBLE STRIKE
	.DATA.W    TG63P		;*(63) c
	.DATA.W    TG64P		;*(64) d DOUBLW WIDTH RESET
	.DATA.W    TG65P		;*(65) e HG MODE OFF
	.DATA.W    SAMIK2		;*(66) f AMIKAKE RESET
	.DATA.W    TG67P		;*(67) g MYEONGJO
	.DATA.W    TG68P		;*(68) h HG MODE ON (2BYTE COMBINATION)
	.DATA.W    TG77P		;*(69) i DEFAULT CPI 4:3
	.DATA.W    TG6AP		;*(6A) j TATE KAKI
	.DATA.W    TG6BP		;*(6B) k YOKO KAKI
	.DATA.W    ESCER		; (6C) l
	.DATA.W    ESCER		; (6D) m
	.DATA.W    ESCER		; (6E) n
	.DATA.W    ESCER		; (6F) o
	.DATA.W    ESCER		; (70) p
	.DATA.W    ESCER		; (71) q
	.DATA.W    ESCER		; (72) r
	.DATA.W    TG73P		;*(73) s RESET CONDENCE MODE
	.DATA.W    ESCER		; (74) t
	.DATA.W    TG75P		;*(75) u RESET UNDER LINE
	.DATA.W    KCONE2		;*(76) v VERTICAL DISCONNECT
	.DATA.W    TG77P		;*(77) w 4 : 3(10 : 7.5 CPI)
	.DATA.W    ESCER		; (78) x
	.DATA.W    ESCER		; (79) y
	.DATA.W    ESCER		; (7A) z
	.DATA.W    ESCER		; (7B) {
	.DATA.W    ESCER		; (7C) |
	.DATA.W    ESCER		; (7D) }
	.DATA.W    ESCER		; (7E) ~
	.DATA.W    ESCER		; (7F) DEL
	.PAGE
;
;
ESCDUM: JSR	@GETC			; 930412
	JSR	@GETC
	JSR	@GETC
	RTS
;
;	TG MODE SEQUENCE PRO
;********************************************************
TG36P:					;\920613 D.H SET
TG37P:	BSET.B	#QKJVEL,@PTMD4F:8
	BSET.B	#QVENLR,@PTMD0F:8
	RTS
TG63P:	BCLR.B	#QKJVEL,@PTMD4F:8	;\920613 D.H RESET
	BCLR.B	#QVENLR,@PTMD0F:8
	RTS

TG68P:	BSET.B	#QKJMD,@PTMD5F:8	; HG ON
	BSET.B	#QKCSWD,@UMOD01:8	; COMBINATION
	RTS
TG65P:	BCLR.B	#QKJMD,@PTMD5F:8	; HG OFF
	RTS
;					; (136 : 102) = DEFAULT
TG77P:	BCLR.B	#QELITE,@PTMD1F:8	; RESET ELITE MODE
	BCLR.B	#QPIT15,@PTMD1F:8	; RESET 15 CPI MODE
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407
	MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8
	MOV.B	#0,@KFSPLS		;
	MOV.B	#0,@KFSPRS		;
	MOV.B	#0,@KHSPLS		; 920326
	MOV.B	#0,@KHSPRS		; 920326
	RTS
	.PAGE
;					; 168 : 81
TG57P:	BSET.B	#QELITE,@PTMD1F:8	; SET ELITE MODE FLAG
	BCLR.B	#QPIT15,@PTMD1F:8	; RESET 15 CPI MODE
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407
	MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8
	MOV.B	#3,@KFSPLS		;
	MOV.B	#3,@KFSPRS		;
	MOV.B	#2,@KHSPLS		; 920326
	MOV.B	#2,@KHSPRS		; 920326
	RTS
	.PAGE
;					; 102 : 102	??
TG49P:	BCLR.B	#QELITE,@PTMD1F:8	;
	BCLR.B	#QPIT15,@PTMD1F:8	; RESET 15 CPI MODE
	BCLR.B	#QKCSWH,@UMOD01:8	; 920407
    MOV.B   #H'0,R0
	MOV.B	R0,@ANKSPS:8
	MOV.B	#0,@KFSPLS		;
	MOV.B	#0,@KFSPRS		;
	MOV.B	#0,@KHSPLS		; 920326
	MOV.B	#0,@KHSPRS		; 920326
	RTS
;
TG5BP:	JSR	@GETC			; EXP process
	CMP.B	#H'4D,R0
	BEQ	TG4DP
	CMP.B	#H'6D,R0
	BEQ	TG6DP
	CMP.B	#H'52,R0
	BEQ	SREVS1
	CMP.B	#H'72,R0
	BEQ	SREVS2

	RTS
;
;	REVERSE
SREVS:	JSR	@GETC
	AND.B	#H'03,R0
	CMP.B	#H'1,R0
	BEQ	SREVS1
	CMP.B	#H'0,R0
	BEQ	SREVS2
	RTS
SREVS1: BSET.B	#QDREVS,@UMOD05:8
	RTS
SREVS2: BCLR.B	#QDREVS,@UMOD05:8
	RTS
;
ESC64P: JSR	@GETC		; AUTOWRAP 921006
	AND.B	#H'03,R0
	CMP.B	#H'1,R0
	BEQ	AUTO_R
	CMP.B	#H'0,R0
	BEQ	AUTO_C
	RTS
AUTO_R: BSET.B	#QAUTOR,@UMOD05:8
	RTS
AUTO_C: BCLR.B	#QAUTOR,@UMOD05:8
	RTS
;
;	 AMIKAKE
SAMIK:	JSR	@GETC
	AND.B	#H'03,R0
	CMP.B	#H'1,R0
	BEQ	SAMIK1
	CMP.B	#H'0,R0
	BEQ	SAMIK2
	RTS
SAMIK1:
;	BSET.B	#QOUTLN,@PTMD0F:8
	BSET.B	#QDAMIK,@UMOD05:8
	RTS
SAMIK2:
;	BCLR.B	#QOUTLN,@PTMD0F:8
	BCLR.B	#QDAMIK,@UMOD05:8
	RTS
;
;
;	MBYTE HG DELEMITER SET
TG4DP:	JSR	@GETC
	LDC.B	#PAGE HBUF20,EP 	;327+
	MOV.W	#HBUF20,R4		;327+
	MOV.B	R0,@(1,R4)		;327+
;
	JSR	@GETC
	LDC.B	#PAGE HBUF20,EP 	;327+
	MOV.W	#HBUF20,R4		;327+
	MOV.B	R0,@(2,R4)		;327+
	RTS
;	MBYTE HG RESET
TG6DP:	MOV.B	#H'0,R0
	LDC.B	#PAGE HBUF20,EP 	;327+
	MOV.W	#HBUF20,R4		;327+
	MOV.B	R0,@(1,R4)		;327+
	MOV.B	R0,@(2,R4)		;327+
	RTS
	.PAGE
;
ESC6AR: JSR	@GETC			;
	AND.W	#H'01,R0
	CMP.B	#H'1,R0
	BEQ	TG6AP
;
TG6BP:	BCLR.B	#QKJVRT,@PTMD4F:8	; YOKO
	RTS
;
TG6AP:	BSET.B	#QKJVRT,@PTMD4F:8	; TATE
	RTS
;
TG44P:					; DOUBLE WIDTH SET
TG4CP:	BSET.B	#QHENLR,@PTMD0F:8	;
	RTS

TG4EP:					; DOUBLE WIDTH RESET
TG64P:	BCLR.B	#QHENLR,@PTMD0F:8	;
	RTS
	.PAGE
;
TG47P:	BSET.B	#QDGODI,@UMOD05:8	; MYEONGJO
	RTS
TG67P:	BCLR.B	#QDGODI,@UMOD05:8	; GOTHIC
	RTS
;
TG55P:	BSET.B	#QUNDLN,@PTMD1F:8	; SET UNDERLINE FLAG
	BSET.B	#QKJULN,@PTMD4F:8	;
	RTS
TG75P:	BCLR.B	#QUNDLN,@PTMD1F:8	; RESET UNDERLINE
	BCLR.B	#QKJULN,@PTMD4F:8	;
	RTS
;
TG42P:	BSET.B	#QDBSTR,@PTMD1F:8	; SET DOUBLE-STRIKE MODE
	RTS
TG62P:	BCLR.B	#QDBSTR,@PTMD1F:8	; RES DOUBLE-STRIKE MODE
	RTS
	.PAGE
;
TG53P:	BSET.B	#QCONDE,@PTMD1F:8	; SET CONDENSE MODE
	BSET.B	#QKJHAF,@PTMD4F:8	; SET KANJI HALF MODE
	BCLR.B	#QKJQUA,@PTMD4F:8	; RESET KANJI 1/4 MODE
	RTS
TG73P:	BCLR.B	#QCONDE,@PTMD1F:8	; RES CONDENSE MODE
	BCLR.B	#QKJHAF,@PTMD4F:8	; SET KANJI HALF MODE
	BCLR.B	#QKJQUA,@PTMD4F:8	; RESET KANJI 1/4 MODE
	RTS
	.PAGE
;921203
TGXXP:	BCLR.B	#QUNDLN,@PTMD1F:8	; RESET UNDERLINE
	BCLR.B	#QKJULN,@PTMD4F:8	;	"
	BCLR.B	#QDAMIK,@UMOD05:8	;	AMIKAKE
	BCLR.B	#QDBSTR,@PTMD1F:8	; RES DOUBLE-STRIKE MODE
	BCLR.B	#QDREVS,@UMOD05:8	; RESET REVERSE
	BCLR.B	#QHENLR,@PTMD0F:8	; RESET DOUBLE WIDTH
	RTS
;
; 920320 UPDATE 			; COLUMN TAB
TG54P:	JSR	@GETC			; GET DATA (n1)
	AND.W	#H'01,R0
	MULXU.W #100,R0 		;
	MOV.W	R1,R2			;
	JSR	@GETC			; GET DATA (n2)
	AND.W	#H'0F,R0
	MULXU.W #10,R0			;
	ADD.W	R2,R1
	MOV.W	R1,R2			;
	JSR	@GETC			; GET DATA (n3)
	AND.W	#H'0F,R0
	ADD.W	R2,R0
	MULXU.W #18,R0
	MOV.W	R1,R0
	MULXU.W #ZCL180,R0		;
	TST.W	R0			;
	BNE	TG541			; BR. IF VALUE OVER
	ADD.W	@LMARGS:8,R1		; + LEFT MARGIN VALUE
	MOV.W	R1,@DATLNS:8		; SAVE IT
	BCS	TG541			; BR. IF OVERFLOW
	CMP.W	@RMARGS:8,R1		;
	BLS	NXCLM:16		; BR. IF NOT RIGHT MARGIN OVER
TG541:	RTS
	.PAGE
;********************************************************
;	n/120Inch SET
ESC75R: JSR	@GETC		; 920320 UPDATE
	EXTU	R0
	CMP.W	#61,R0
	BLS	ESC751
	MOV.W	#20,R0
ESC751: MOV.W	R0,R3
	CALDP3	#ZP3LP		; n/180" FEED VALUE
	RTS
	.PAGE
;
;	1/n Inch set
ESC63R: JSR	@GETC
	CMP.B	#H'03,R0                ; 3  LPI
	BEQ	ESC631
	CMP.B	#H'04,R0                ; 4  LPI
	BEQ	ESC632
	CMP.B	#H'05,R0                ; 5  LPI
	BEQ	ESC633
	CMP.B	#H'06,R0                ; 6  LPI
	BEQ	ESC634
	CMP.B	#H'08,R0                ; 8  LPI
	BEQ	ESC635
	CMP.B	#H'3C,R0                ; 60 LPI
	BEQ	ESC636
ESC630: RTS
ESC631: MOV.B	#H'28,R0
	BRA	ESC637
ESC632: MOV.B	#H'1E,R0
	BRA	ESC637
ESC633: MOV.B	#H'18,R0
	BRA	ESC637
ESC634: MOV.B	#H'14,R0
	BRA	ESC637
ESC635: MOV.B	#H'0F,R0
	BRA	ESC637
ESC636: MOV.B	#H'02,R0
ESC637: EXTU	R0
	MOV.W	R0,R3
	CALDP3	#ZP3LP		; n/180" FEED VALUE
	RTS
	.PAGE
;
;	HANGUL/ENG MODE SET
ESC68R: JSR	@GETC
	AND.B	#H'03,R0
	CMP.B	#H'1,R0
	BEQ	ESC681
	CMP.B	#H'0,R0
	BEQ	ESC682
	RTS
ESC681: BSET.B	#QKJMD,@PTMD5F:8
	RTS
ESC682: BCLR.B	#QKJMD,@PTMD5F:8
	RTS
	.PAGE
;	BIT IMAGE
ESC6EP:

;-------------------------------- 강동 성심병원 Image Check Flag Set--;
;(2001/04/06 +Shin)
    BSET.B  #5,@PTMD5F:8       ; Image Flag Set
;----------------------------------------------- end ;

    JSR @GET2C          ;
	SWAP	R0			; 920320
	MOV.W	R0,R2			;
	MOV.W	R2,@DATLNS:8		; SAVE PARAMETER LENGTH
	JMP	@I_IMG1
	.PAGE
;
SSPCP:	JSR	@GETC			; 930402
	JSR	@GETC
	AND.B	#H'07,R0
	CMP.B	#H'2,R0         ;12CPI
	BEQ	ESC711
;    CMP.B   #H'4,R0         ;15CPI
;    BEQ ESC713
	RTS
;
ESC71P:
    JSR @GETC
    ;--------------------------------------;
    ; Condense Code Disable                ;
    ;--------------------------------------;
    BCLR.B  #QCONDE,@PTMD1F:8       ;
    BCLR.B  #QKJHAF,@PTMD4F:8       ;
    BCLR.B  #QKJQUA,@PTMD4F:8       ;
    ;----------------------------------- End 2001/03/16 +Shin ;

	BCLR.B	#QKCSWH,@UMOD01:8	; 920407
    BCLR.B  #4,@PTMD5F:8      ;
    AND.B   #H'0F,R0
	CMP.B	#H'0,R0
	BEQ	ESC710
	CMP.B	#H'1,R0
	BEQ	ESC711
	CMP.B	#H'2,R0
	BEQ	ESC712
    CMP.B   #H'3,R0
    BEQ ESC713
;    CMP.B   #H'4,R0
;    BEQ ESC714
    CMP.B   #H'5,R0
    BEQ ESC715:16
    CMP.B   #H'6,R0
    BEQ ESC718:16
    CMP.B   #H'8,R0
    BEQ ESC720:16
	RTS
;
ESC710:
    BTST.B  #5,@PTMD5F:8    ; Image Flag Check
    BEQ SKIP710             ;
    MOV.W   #H'0042,R3           ;
    CALDP3  #ZPPAGL         ; Call Page Length for line Packet to DP3
    BCLR.B  #5,@PTMD5F:8    ; Image Flag is Clear

SKIP710:
    BCLR.B  #QKCSWG,@UMOD01:8       ; 10 CPI
	MOV.B	#18,R0			; 920819
	LDC.B	#PAGE HBUF20,EP 	;  "
	MOV.W	#HBUF20,R4		;  "
	MOV.B	R0,@(3,R4)		;  "
	JMP	@STPIC
ESC711:
    BCLR.B  #QKCSWG,@UMOD01:8   ; 12 CPI
	MOV.B	#15,R0			; 920819
	LDC.B	#PAGE HBUF20,EP 	;  "
	MOV.W	#HBUF20,R4		;  "
	MOV.B	R0,@(3,R4)		;  "
	JMP	@STELT
ESC712:
    BCLR.B  #QELITE,@PTMD1F:8   ; RESET ELITE MODE
	BCLR.B	#QPIT15,@PTMD1F:8	; RESET 15 CPI MODE
	BSET.B	#QKCSWG,@UMOD01:8	; HG 136CHAR FLAG
	MOV.B	#18,R0			; 920819
	LDC.B	#PAGE HBUF20,EP 	;  "
	MOV.W	#HBUF20,R4		;  "
	MOV.B	R0,@(3,R4)		;  "
	MOV.B	#H'0,R0
	MOV.B	R0,@ANKSPS:8
	RTS
ESC713:
    MOV.B   #H'0,R0                 ; 180 : 90  [*sim]95.2.20
	MOV.B	R0,@ANKSPS:8
        MOV.B   #13,R0                  ;
        LDC.B   #PAGE HBUF20,EP         ;
        MOV.W   #HBUF20,R4              ;
        MOV.B   R0,@(3,R4)              ;
	BCLR.B	#QKCSWG,@UMOD01:8
	BSET.B	#QKCSWH,@UMOD01:8	; 13.3 CPI
	BCLR.B	#QPIT15,@PTMD1F:8
	BSET.B	#QELITE,@PTMD1F:8
	MOV.B	#1,@KFSPLS		;
	MOV.B	#2,@KFSPRS		;
	MOV.B	#1,@KHSPLS		; 920326
	MOV.B	#1,@KHSPRS		; 920326
	RTS
ESC714:
    BCLR.B  #QKCSWG,@UMOD01:8    ; 10 CPI
    MOV.B   #18,R0               ;
    LDC.B   #PAGE HBUF20,EP      ;
    MOV.W   #HBUF20,R4           ;
    MOV.B   R0,@(3,R4)           ;
    BCLR.B  #QELITE,@PTMD1F:8    ;
    BCLR.B  #QPIT15,@PTMD1F:8    ;
    BCLR.B  #QKCSWH,@UMOD01:8    ;
    MOV.B   #H'0,R0              ;
    MOV.B   R0,@ANKSPS:8         ;
    MOV.B   #1,@KFSPLS           ;
    MOV.B   #2,@KFSPRS           ;
    MOV.B   #1,@KHSPLS           ;
    MOV.B   #1,@KHSPRS           ;
    RTS

ESC715:
    BCLR.B  #QKCSWG,@UMOD01:8       ; 204 : 102
	MOV.B	#12,R0			; 920819
	LDC.B	#PAGE HBUF20,EP 	;  "
	MOV.W	#HBUF20,R4		;  "
	MOV.B	R0,@(3,R4)		;  "
	JMP	@ST15C

ESC715_1:
    JSR     @GETC           ;   dummy Code
    BCLR.B  #QKCSWG,@UMOD01:8       ; 204 : 102
	MOV.B	#12,R0			; 920819
	LDC.B	#PAGE HBUF20,EP 	;  "
	MOV.W	#HBUF20,R4		;  "
	MOV.B	R0,@(3,R4)		;  "
	JMP	@ST15C

ESC718:
    RTS
;-----------------------------------------------;
;  20 Cpi Development Module                    ;
;  2001/03/16 +Shin                             ;
;-----------------------------------------------;
ESC720:

    BTST.B  #5,@PTMD5F:8        ; Image Flag Check
    BEQ SKIP720                 ;
    MOV.W   #H'0042,R3          ;
    CALDP3  #ZPPAGL             ; Call Page Length for line Packet to DP3
    BCLR.B  #5,@PTMD5F:8        ; Image Flag is Clear

SKIP720:
    BSET.B  #QCONDE,@PTMD1F:8   ; 20 CPI Module (2001/03/16 +Shin)
    BSET.B  #QKJHAF,@PTMD4F:8   ;
    BCLR.B  #QKJQUA,@PTMD4F:8   ;
    MOV.B   #9,R0               ;
    LDC.B   #PAGE HBUF20,EP     ;
    MOV.W   #HBUF20,R4          ;
    MOV.B   R0,@(3,R4)          ;
    BSET.B  #4,@PTMD5F:8    ; 20 CPI Flag Set (2001/03/19 +Shin)
	JMP	@STPIC

	.PAGE
;
ESC74P: JSR	@GETC			; GET DATA (n1)
	AND.W	#H'01,R0
	MULXU.W #100,R0 		;
	MOV.W	R1,R2			;
	JSR	@GETC			; GET DATA (n2)
	AND.W	#H'0F,R0
	MULXU.W #10,R0			;
	ADD.W	R2,R1
	MOV.W	R1,R2			;
	JSR	@GETC			; GET DATA (n3)
	AND.W	#H'0F,R0
	ADD.W	R2,R0
	CLR.W	R2			; 921029
	SUB.W	#1,R0			; 921029
	LDC.B	#PAGE HBUF20,EP 	; 920819
	MOV.W	#HBUF20,R4		;  "
	MOV.B	@(3,R4),R2		;  "
	CMP.B	#13,R2			; 921228
	BEQ	ESC742			;  "
	MULXU.W R2,R0			; 920819
	MOV.W	R1,R0
ESC743: MULXU.W #ZCL180,R0		;
	TST.W	R0			;
	BNE	ESC741			; BR. IF VALUE OVER
	ADD.W	@LMARGS:8,R1		; + LEFT MARGIN VALUE
	MOV.W	R1,@DATLNS:8		; SAVE IT
	BCS	ESC741			; BR. IF OVERFLOW
	CMP.W	@RMARGS:8,R1		;
	BLS	NXCLM:16		; BR. IF NOT RIGHT MARGIN OVER
ESC741: RTS
ESC742: MOV.B	#27,R2			; 921228
	MULXU.W R2,R0
	MOV.W	R1,R0
	SHLR.W	R0
	BRA	ESC743
	.PAGE
;
CHDECO: JSR	@GETC			; X
	CMP.B	#H'58,R0
	BNE	CHDEC9
	JSR	@GETC			; n1
	JSR	@GETC			; n2
	JSR	@GETC			; a1
	AND.B	#H'03,R0
	CMP.B	#H'1,R0
	BEQ	CHDEC8
	JSR	@GETC			; a2
	AND.B	#H'03,R0
	CMP.B	#H'0,R0
	BEQ	CHDEC1
	CMP.B	#H'1,R0
	BEQ	CHDEC2
	CMP.B	#H'2,R0
	BEQ	CHDEC3
	BCLR.B	#QOUTLN,@PTMD0F:8
	BCLR.B	#QDAMIK,@UMOD05:8
	BCLR.B	#QDREVS,@UMOD05:8
	JSR	@GETC
	RTS
	.PAGE
;
CHDEC3: BCLR.B	#QOUTLN,@PTMD0F:8	; AMIKAKE
	BSET.B	#QDAMIK,@UMOD05:8
	BCLR.B	#QDREVS,@UMOD05:8
	BRA	CHDEC7
;
CHDEC2: BCLR.B	#QOUTLN,@PTMD0F:8	; REVERSE
	BCLR.B	#QDAMIK,@UMOD05:8
	BSET.B	#QDREVS,@UMOD05:8
	BRA	CHDEC7
;
CHDEC1: BCLR.B	#QOUTLN,@PTMD0F:8	; OUTLINE
	BCLR.B	#QDAMIK,@UMOD05:8
	BCLR.B	#QDREVS,@UMOD05:8
	BRA	CHDEC7
;
CHDEC7: JSR	@GETC			; a3 COLOR
	AND.B	#H'07,R0
	CMP.B	#H'0,R0
	BEQ	CHDE71
CHDE72: MOV.B	R0,@PTMD3F:8
	RTS
CHDE71: MOV.B	#H'08,R0
	BRA	CHDE72
;
CHDEC8: JSR	@GETC			; a2
	BCLR.B	#QOUTLN,@PTMD0F:8
	BCLR.B	#QDAMIK,@UMOD05:8
	BCLR.B	#QDREVS,@UMOD05:8
	BRA	CHDEC7
;
CHDEC9: RTS
	.PAGE
;
ST17P:	MOV.B	#H'17,R0
	BRA	STGLP1
;
KCONE1: BSET.B	#QKEIVP,@UMOD01:8
	RTS
KCONE2: BCLR.B	#QKEIVP,@UMOD01:8
	RTS
	.PAGE
;
;920318 DOUBLE HEIGHT UPPER/LOWER PART
FS58R:
ESC69R: JSR	@GETC
	AND.B	#H'07,R0
;
	CMP.B	#H'0,R0
	BEQ	ESC690
	CMP.B	#H'1,R0
	BEQ	ESC691
	CMP.B	#H'2,R0
	BEQ	ESC692
	CMP.B	#H'3,R0
	BEQ	ESC693
	CMP.B	#H'4,R0
	BEQ	ESC694
	RTS
;
ESC690: BCLR.B	#QKJVEL,@PTMD4F:8
	BCLR.B	#QVENLR,@PTMD0F:8
	BCLR.B	#QHENLR,@PTMD0F:8
	BCLR.B	#KUPPRO,@UMOD05:8
	BCLR.B	#KLOPRO,@UMOD05:8
	RTS
ESC691:
	BSET.B	#QKJVEL,@PTMD4F:8
	BSET.B	#QVENLR,@PTMD0F:8
	BSET.B	#KUPPRO,@UMOD05:8
	RTS
ESC692:
	BSET.B	#QKJVEL,@PTMD4F:8
	BSET.B	#QVENLR,@PTMD0F:8
	BSET.B	#KLOPRO,@UMOD05:8
	RTS
ESC693: BSET.B	#QKJVEL,@PTMD4F:8
	BSET.B	#QVENLR,@PTMD0F:8
	RTS
ESC694: BSET.B	#QKJVEL,@PTMD4F:8
	BSET.B	#QVENLR,@PTMD0F:8
	BSET.B	#QHENLR,@PTMD0F:8
	RTS

	.PAGE
;
MASKBL: JSR	@GETC			; 920320 Maskig block
	CMP.B	#H'0,R0
	BEQ	MASKB0
	CMP.B	#H'8,R0
	BCC	MASKB0
	AND.B	#H'0F,R0
	EXTU	R0
	MOV.W	#MSKTBL,R4
	ADD.W	R0,R4
	MOV.B	@R4,R0
;930407 MOV.B	R0,@MSKVAL:8
	LDC.B	#PAGE HBUF20,EP 	; 930407
	MOV.W	#HBUF20,R4		;   "
	MOV.B	R0,@(4,R4)		;   "
	BSET.B	#QKMSKF,@UMOD05:8
	RTS
MASKB0: BCLR.B	#QKMSKF,@UMOD05:8
	RTS
	.PAGE
;
	.ALIGN	2
MSKTBL: .DATA.B H'01, H'03, H'07, H'0F, H'1F, H'3F, H'7F, H'FF, H'FF
;
	.END

	.PROGRAM	apledt
	.HEADING	"M4324 AX MAKE EDITING PATTERN MODULE"
	.LIST		NOEXP,NOCOND
;********************************************************
;							*
;	M4324 AX MAKE EDITING PATTERN MODULE		*
;							*
;	FILE NAME	AX_EDT.MAR			*
;	CREATED 	14/MAY/1991			*
;							*
;********************************************************
;
	.EXPORT 	OUTSH, KOUTSH, REVERS, MSKBL	;\ 9/MAY/1992	920327
	.EXPORT 	EMPLQ, EMPDR, HELDR, HELLQ
	.EXPORT 	HEPDR, HEPLQ, AKLIN, AKDIN
	.EXPORT 	EMPKJ, HELKJ, HEPKJ, KJITL
;
	.IMPORT 	OLTTB, CP1T2, SETDS1,SETDS2,SETDSK
;
	.INCLUDE	"AX_BUF.H"
	.INCLUDE	"AX_DLD.H"
	.INCLUDE	"AX_DP2.H"
	.INCLUDE	"AX_TBF.H"
	.INCLUDE	"COMMON.H"
;
;	<< CG EDITING CONSTANT >>
;
QA2PAS: .EQU	  8			; VERTICAL ENLARGE 2 PASS BIT FOR ANK
QA3PAS: .EQU	 15			; VERTICAL ENLARGE 3 PASS BIT FOR ANK
QK2PAS: .EQU	 15			; VERTICAL ENLARGE 2 PASS BIT FOR KANJI
XSTYLE: .EQU	H'1000+H'0800           ; CHARACTER STYLE MASK
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
; << SUB >>	MAKE OUTLINE & OUTLINE WITH SHADOW	< ANK >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : AFTER EDITING PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
;		EDWKS1 : CONVERT HIGH	DATA SAVE AREA
;		EDWKS2 : CONVERT MIDDLE DATA SAVE AREA
;		EDWKS3 : CONVERT LOW	DATA SAVE AREA
;		EDWKS4 : WORK AREA
;		EDWKS5 : LENGTH SAVE AREA
;
;		  EP R4 : EDIT BUFFER 1 (SOURCE)
;		  EP R5 : EDIT BUFFER 2 (DESTIN.) -> WORK
;
OUTSH:	CLR.W	@EDWKS1:8		; RESET WORK AREA (EDWKS1->2)
	CLR.W	@EDWKS3:8		; RESET WORK AREA (EDWKS3->4)
	MOV.W	R3,R0			;+ SAVE LENGTH
	ADDS.B	#8,R0			; ADJUST LENGTH
	MOV.B	R0,@EDWKS5:8		; SAVE PATTERN LENGTH
	JSR	@SETDS2 		; GET DESTIN. POINTER
	MOV.W	R0,R5			; SET DESTIN. POINTER
	CLR.W	@R5			; CLEAR DESTIN. AREA
	CLR.W	@(2,R5) 		;
	CLR.W	@(4,R5) 		;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
OUTS_2: MOV.B	@R4,R2			; GET 1->8 PIN DATA
	MOV.B	R2,@(2*3,R5)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@R5,R2			;
	MOV.B	R2,@R5			;
	OR.B	@(1*3,R5),R1		;
	MOV.B	R1,@(1*3,R5)		;
	MOV.B	@(1,R4),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@(1+2*3,R5)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(1,R5),R2		;
	MOV.B	R2,@(1,R5)		;
	OR.B	@(1+1*3,R5),R1		;
	MOV.B	R1,@(1+1*3,R5)		;
	MOV.B	@(2,R4),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@(2+2*3,R5)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(2,R5),R2		;
	MOV.B	R2,@(2,R5)		;
	OR.B	@(2+1*3,R5),R1		;
	MOV.B	R1,@(2+1*3,R5)		;
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_2		; BR. IF NOT END
	CLR.W	@(2*3,R5)		; CLEAR DESTIN. AREA
	CLR.W	@(2+2*3,R5)		;
	CLR.W	@(4+2*3,R5)		;
	CLR.W	@(4*3,R5)		;
	CLR.W	@(2+4*3,R5)		;
	CLR.W	@(4+4*3,R5)		;
	CLR.W	@(6*3,R5)		;
	CLR.W	@(2+6*3,R5)		;
	CLR.W	@(4+6*3,R5)		;
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	ADD.W	#2,R3			; ADJUST LOOP COUNTER
	BTST.W	#QPOUTL,@(YMODEF,FP)	;
	BEQ	SHADOW:16		; BR. IF SHADOW FOR ANK
	CLR.W	@R4			; CLEAR SOURCE AREA
	CLR.W	@(2,R4) 		;
	CLR.W	@(4,R4) 		;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
OUTS_4: MOV.B	@R5,R2			; GET 1->8 PIN DATA
	MOV.B	R2,@(2*3,R4)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@R4,R2			;
	MOV.B	R2,@R4			;
	OR.B	@(1*3,R4),R1		;
	MOV.B	R1,@(1*3,R4)		;
	MOV.B	@(1,R5),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@(1+2*3,R4)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(1,R4),R2		;
	MOV.B	R2,@(1,R4)		;
	OR.B	@(1+1*3,R4),R1		;
	MOV.B	R1,@(1+1*3,R4)		;
	MOV.B	@(2,R5),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@(2+2*3,R4)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(2,R4),R2		;
	MOV.B	R2,@(2,R4)		;
	OR.B	@(2+1*3,R4),R1		;
	MOV.B	R1,@(2+1*3,R4)		;
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_4		; BR. IF NOT END
	CLR.W	@(2*3,R4)		; CLEAR SOURCE AREA
	CLR.W	@(2+2*3,R4)		;
	CLR.W	@(4+2*3,R4)		;
	CLR.W	@(4*3,R4)		;
	CLR.W	@(2+4*3,R4)		;
	CLR.W	@(4+4*3,R4)		;
	CLR.B	@(6*3,R4)		;
	CLR.B	@(1+6*3,R4)		;
	CLR.B	@(2+6*3,R4)		;
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	MOV.W	FP,@-SP 		;+ SAVE TEXT BUFFER POINTER
	LDC.B	#PAGE OLTTB,DP		; SET OUTLINE TABLE PAGE
	MOV.W	#OLTTB,R1		; SET OUTLINE CONVERSION TABLE
OUTS_6: MOV.B	@R5,R2			; GET 1->8 PIN DATA
	MOV.B	R2,@EDWKS1:8		; SAVE IT (HIGH DATA)
	MOV.B	R2,R1			;
	MOV.B	@(1,R5),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@EDWKS2:8		; SAVE IT (MIDDLE DATA)
	MOV.B	@(2,R5),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@EDWKS3:8		; SAVE IT (LOW DATA)
	MOV.B	@R1,R2			; GET CONVERSION DATA (1ST)
	BTST.B	#0,@EDWKS2:8		;
	BEQ	OUTS_8			; BR. IF 9 PIN OFF
	BSET.B	#7,R2			; SET 8 PIN ON
OUTS_8: OR.B	@(1*3,R4),R2		;
	MOV.B	R2,@(1*3,R4)		; SAVE 1->8 PIN DATA
	MOV.B	@EDWKS2:8,R1		; GET 2ND DATA (WORK)
	MOV.B	@R1,R2			; GET CONVERSION DATA (2ND)
	BTST.B	#7,@EDWKS1:8		;
	BEQ	OUTS_A			; BR. IF 8 PIN OFF
	BSET.B	#0,R2			; SET 9 PIN ON
OUTS_A: BTST.B	#0,@EDWKS3:8		;
	BEQ	OUTS_C			; BR. IF 17 PIN OFF
	BSET.B	#7,R2			; SET 16 PIN ON
OUTS_C: OR.B	@(1+1*3,R4),R2		;
	MOV.B	R2,@(1+1*3,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@EDWKS3:8,R1		; GET 3RD DATA (WORK)
	MOV.B	@R1,R2			; GET CONVERSION DATA (3RD)
	BTST.B	#7,@EDWKS2:8		;
	BEQ	OUTS_E			; BR. IF 16 PIN OFF
	BSET.B	#0,R2			; SET 17 PIN ON
OUTS_E: OR.B	@(2+1*3,R4),R2		;
	MOV.B	R2,@(2+1*3,R4)		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_6		; BR. IF NOT END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	@SP+,FP 		;+ UNSAVE TEXT BUFFER POINTER
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	BTST.W	#QPSHDW,@(YMODEF,FP)	;
	BEQ	OUTS_I			; BR. IF OUTLINE FOR ANK
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	ADDS.B	#3,R4			; ADJUST SOURCE POINTER
OUTS_G: MOV.B	@(2,R5),R2		; GET 3RD DATA
	MOV.B	R2,@EDWKS3:8		; SAVE HIGH DATA (WORK)
	MOV.B	@(1,R5),R2		; GET 2ND DATA
	MOV.B	R2,@EDWKS2:8		; SAVE MIDDLE DATA (WORK)
	MOV.B	@R5,R2			; GET 1ST DATA
	MOV.B	R2,@EDWKS1:8		; SAVE LOW DATA (WORK)
	BSR	SFTDWN:16		; *-> MAKE & WRITE + 1 ROW <-*
	ADDS.B	#3+3,R4 		; ADJUST SOURCE POINTER
	MOV.B	@R4,R2			; GET CONVERT HIGH
	OR.B	@EDWKS1:8,R2		; OR WITH ORIGINAL 1ST TO CONVERSION HIGH
	MOV.B	R2,@R4			; SAVE NEW HIGH
	MOV.B	@(1,R4),R2		; GET CONVERT MIDDLE
	OR.B	@EDWKS2:8,R2		; OR WITH ORIGINAL 2ND TO CONVERSION MIDDLE
	MOV.B	R2,@(1,R4)		; SAVE NEW MIDDLE
	MOV.B	@(2,R4),R2		; GET CONVERT LOW
	OR.B	@EDWKS3:8,R2		; OR WITH ORIGINAL 3RD TO CONVERSION LOW
	MOV.B	R2,@(2,R4)		; SAVE NEW LOW
	ADDS.B	#3+3,R4 		; ADJUST SOURCE POINTER
	BSR	SFTDWN:16		; *-> MAKE & WRITE + 5 ROW <-*
	SUBS.B	#3+3+3,R4		; MAKE NEXT WORK POINTER (SOURCE)
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_G		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
OUTS_I: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	BTST.W	#QAVENL,@(YMODEF,FP)	;
	BNE	OUTS_M			; BR. IF VERTICAL ENLARGE FOR ANK
OUTS_K: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#0,R2			; MASK 1 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1+1*3,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1+1*3,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	BCLR.B	#7,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2+1*3,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_K		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 1 PASS FOR ANK >>
;
OUTS_M: BTST.W	#QA3PAS,@(YMODEF,FP)	;
	BNE	OUTS_S			; BR. IF 3RD PASS
	BTST.W	#QA2PAS,@(YMODEF,FP)	;
	BNE	OUTS_Q			; BR. IF 2ND PASS
OUTS_O: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#0,R2			; MASK 1 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1+1*3,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1+1*3,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2+1*3,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	AND.B	#H'0F,R2                ; MASK HIGH NIBBLE
	MOV.B	R2,@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_O		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 2ND PASS FOR ANK >>
;
OUTS_Q: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1+1*3,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1+1*3,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2+1*3,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_Q		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 3RD FOR ANK >>
;
OUTS_S: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#3,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	AND.B	#H'0F,R2                ; MASK HIGH NIBBLE
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	CLR.B	@(1+1*3,R4)		; WRITE MIDDLE
	CLR.B	@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,OUTS_S		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
	.PAGE
;
;	<< SHADOW FOR ANK >>
;
SHADOW: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R3,R2			; SAVE IT
	ADDS.B	#9-3,R2 		;
	MOV.W	R2,@-SP 		;+ SAVE ADJUST LENGTH
	MULXU.B #3,R2			;
	ADD.W	R2,R4			;
	MOV.W	@SP+,R2 		;+ UNSAVE LENGTH
	SHLR.W	R2			;
	ADD.W	#-1,R2			;
SHAD_2: CLR.W	@(-2,R4)		; CLEAR SOURCE AREA
	CLR.W	@(-4,R4)		;
	CLR.W	@(-6,R4)		;
	SUBS.B	#6,R4			; UPDATE SOURCE POINTER
	SCB/F	R2,SHAD_2		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
SHAD_4: MOV.B	@R5,R2			; GET 1ST DATA
	MOV.B	R2,@EDWKS1:8		; SAVE LOW DATA (WORK)
	OR.B	@R4,R2			;
	MOV.B	R2,@R4			; SAVE NEW LOW
	MOV.B	@(1,R5),R2		; GET 2ND DATA
	MOV.B	R2,@EDWKS2:8		; SAVE MIDDLE DATA (WORK)
	OR.B	@(1,R4),R2		;
	MOV.B	R2,@(1,R4)		; SAVE NEW MIDDLE
	MOV.B	@(2,R5),R2		; GET 3RD DATA
	MOV.B	R2,@EDWKS3:8		; SAVE HIGH DATA (WORK)
	OR.B	@(2,R4),R2		;
	MOV.B	R2,@(2,R4)		; SAVE NEW HIGH
	ADDS.B	#3,R4			; ADJUST SOURCE POINTER
	BSR	SFTDWN:16		; MAKE & WRITE + 1 ROW
	ADDS.B	#3+3,R4 		; ADJUST SOURCE POINTER
	MOV.B	@R4,R2			; GET CONVERSION HIGH DATA
	OR.B	@EDWKS1:8,R2		; OR WITH ORIGINAL 1ST TO CONVERSION HIGH
	MOV.B	R2,@R4			; SAVE NEW HIGH
	MOV.B	@(1,R4),R2		; GET CONVERSION MIDDLE DATA
	OR.B	@EDWKS2:8,R2		; OR WITH ORIGINAL 1ST TO CONVERSION MIDDLE
	MOV.B	R2,@(1,R4)		; SAVE NEW MIDDLE
	MOV.B	@(2,R4),R2		; GET CONVERSION LOW DATA
	OR.B	@EDWKS3:8,R2		; OR WITH ORIGINAL 1ST TO CONVERSION LOW
	MOV.B	R2,@(2,R4)		; SAVE NEW LOW
	BTST.W	#QAPROP,@(YMODEF,FP)	;
	BNE	SHAD_6			; BR. IF PROPORTIONAL MODE
	BTST.W	#QALQMD,@(YMODEF,FP)	;
	BEQ	SHAD_8			; BR. IF DRAFT MODE
SHAD_6: ADDS.B	#3+3,R4 		; ADJUST SOURCE POINTER
	BSR	SFTDWN:16		; *-> MAKE & WRITE + 5 ROW <-*
	SUBS.B	#3+3,R4 		; MAKE NEXT WORK POINTER (SOURCE)
SHAD_8: SUBS.B	#3+3,R4 		; MAKE NEXT WORK POINTER (SOURCE)
	ADDS.B	#3,R5			; ADJUST DESTIN. POINTER
	SCB/F	R3,SHAD_4		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	BTST.W	#QAVENL,@(YMODEF,FP)	;
	BNE	SHAD_C			; BR. IF VERTICAL ENLARGE
SHAD_A: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	BCLR.B	#7,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,SHAD_A		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 1 PASS FOR ANK >>
;
SHAD_C: BTST.W	#QA3PAS,@(YMODEF,FP)	;
	BNE	SHAD_I			; BR. IF 3RD PASS
	BTST.W	#QA2PAS,@(YMODEF,FP)	;
	BNE	SHAD_G			; BR. IF 2ND PASS
SHAD_E: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	AND.B	#H'0F,R2                ; MASK HIGH NIBBLE
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,SHAD_E		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 2ND PASS >>
;
SHAD_G: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,SHAD_G		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 3RD PASS >>
;
SHAD_I: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#3,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	AND.B	#H'0F,R2                ; MASK HIGH NIBBLE
	MOV.B	R2,@R4			; WRITE HIGH
	CLR.B	@(1,R4) 		; WRITE MIDDLE
	CLR.B	@(2,R4) 		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,SHAD_I		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
	.PAGE
;
;	<< SHIFT FOR DOWN >>
;
;	IN	@EDWKS1->3 : SHIFT DATA
;
;	OUT	     EDBF1 : EDBF1 + SHIFT DOWN DATA
;
SFTDWN: MOV.B	@EDWKS1:8,R2		; GET SHIFT DATA 1ST
	SHLL.B	R2			;
	OR.B	@EDWKS1:8,R2		;
	MOV.B	R2,@EDWKS1:8		; SAVE IT
	OR.B	@R4,R2			;
	MOV.B	R2,@R4			; SAVE NEW LOW
	MOV.B	@EDWKS2:8,R2		; GET SHIFT DATA 2ND
	ROTXL.B R2			;
	OR.B	@EDWKS2:8,R2		;
	MOV.B	R2,@EDWKS2:8		; SAVE IT
	OR.B	@(1,R4),R2		;
	MOV.B	R2,@(1,R4)		; SAVE NEW MIDDLE
	MOV.B	@EDWKS3:8,R2		; GET SHIFT DATA 3RD
	ROTXL.B R2			;
	OR.B	@EDWKS3:8,R2		;
	MOV.B	R2,@EDWKS3:8		; SAVE IT
	OR.B	@(2,R4),R2		;
	MOV.B	R2,@(2,R4)		; SAVE NEW HIGH
	RTS
;
;	<< SHIFT FOR UP >>
;
;	IN	@EDWKS1->3 : SHIFT DATA
;
;	OUT	     EDBF1 : EDBF1 + SHIFT UP DATA
;
SFTUP:	MOV.B	@EDWKS3:8,R2		; GET SHIFT DATA 3RD
	SHLR.B	R2			;
	OR.B	@EDWKS3:8,R2		;
	MOV.B	R2,@EDWKS3:8		; SAVE IT
	OR.B	@(2,R4),R2		;
	MOV.B	R2,@(2,R4)		; SAVE NEW HIGH
	MOV.B	@EDWKS2:8,R2		; GET SHIFT DATA 2ND
	ROTXR.B R2			;
	OR.B	@EDWKS2:8,R2		;
	MOV.B	R2,@EDWKS2:8		; SAVE IT
	OR.B	@(1,R4),R2		;
	MOV.B	R2,@(1,R4)		; SAVE NEW MIDDLE
	MOV.B	@EDWKS1:8,R2		; GET SHIFT DATA 1ST
	ROTXR.B R2			;
	OR.B	@EDWKS1:8,R2		;
	MOV.B	R2,@EDWKS1:8		; SAVE IT
	OR.B	@R4,R2			;
	MOV.B	R2,@R4			; SAVE NEW LOW
	RTS
	.PAGE
;
; << SUB >>	MAKE OUTLINE & OUTLINE WITH SHADOW	< KANJI >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : AFTER EDITING PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
;		EDWKS1 : CONVERT HIGH	DATA SAVE AREA
;		EDWKS2 : CONVERT MIDDLE DATA SAVE AREA
;		EDWKS3 : CONVERT LOW	DATA SAVE AREA
;		EDWKS4 : WORK AREA
;		EDWKS5 : LENGTH SAVE AREA
;
;		  EP R4 : EDIT BUFFER 1 (SOURCE)
;		  EP R5 : EDIT BUFFER 2 (DESTIN.) -> WORK
;
KOUTSH: CLR.W	@EDWKS1:8		; RESET WORK AREA (EDWKS1->2)
	CLR.W	@EDWKS3:8		; RESET WORK AREA (EDWKS3->4)
	MOV.W	R3,R0			;+ SAVE LENGTH
	ADDS.B	#8,R0			; ADJUST LENGTH
	MOV.B	R0,@EDWKS5:8		; SAVE PATTERN LENGTH
	JSR	@SETDS2 		; GET DESTIN. POINTER
	MOV.W	R0,R5			; SET DESTIN. POINTER
	CLR.W	@R5			; CLEAR DESTIN. AREA
	CLR.W	@(2,R5) 		;
	CLR.W	@(4,R5) 		;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
KOUT_2: MOV.B	@R4,R2			; GET A PATTERN (1->8 PIN) DATA
	MOV.B	R2,@(1*3,R5)		; SAVE B' PATTERN
	OR.B	@R5,R2			; MAKE (A PATTERN) + (A PATTERN 1 FOR SHIFT RIGHT)
	MOV.B	R2,@R5			; MAKE B PATTERN
	MOV.B	@(1,R4),R2		; GET A PATTERN (9->16 PIN) DATA
	MOV.B	R2,@(1+1*3,R5)		; SAVE B' PATTERN
	OR.B	@(1,R5),R2		; MAKE (A PATTERN) + (A PATTERN 1 FOR SHIFT RIGHT)
	MOV.B	R2,@(1,R5)		; MAKE B PATTERN
	MOV.B	@(2,R4),R2		; GET A PATTERN (17->24 PIN) DATA
	MOV.B	R2,@(2+1*3,R5)		; SAVE B' PATTERN
	OR.B	@(2,R5),R2		; MAKE (A PATTERN) + (A PATTERN 1 FOR SHIFT RIGHT)
	MOV.B	R2,@(2,R5)		; MAKE B PATTERN
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_2		; BR. IF NOT MAKE B PATTERN END
	CLR.B	@(1*3,R5)		; CLEAR DESTIN. AREA
	CLR.B	@(1+1*3,R5)		;
	CLR.B	@(2+1*3,R5)		;
	CLR.W	@(2*3,R5)		;
	CLR.W	@(2+2*3,R5)		;
	CLR.W	@(4+2*3,R5)		;
	CLR.W	@(4*3,R5)		;
	CLR.W	@(2+4*3,R5)		;
	CLR.W	@(4+4*3,R5)		;
	CLR.W	@(6*3,R5)		;
	CLR.W	@(2+6*3,R5)		;
	CLR.W	@(4+6*3,R5)		;
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	ADD.W	#2,R3			; ADJUST LOOP COUNTER
	BTST.W	#QPOUTL,@(YMODEF,FP)	;
	BEQ	KSHADW:16		; BR. IF SHADOW FOR KANJI
	CLR.W	@R4			; CLEAR SOURCE AREA
	CLR.W	@(2,R4) 		;
	CLR.W	@(4,R4) 		;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
KOUT_4: MOV.B	@R5,R2			; GET B PATTERN (1->8 PIN) DATA
	MOV.B	R2,@(2*3,R4)		; SAVE C' PATTERN
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(1*3,R4),R1		;
	MOV.B	R1,@(1*3,R4)		; SAVE C' PATTERN
	OR.B	@R4,R2			; MAKE (B PATTERN) + (B PATTERN 1 FOR SHIFT RIGHT)
	MOV.B	R2,@R4			; MAKE C PATTERN
	MOV.B	@(1,R5),R2		; GET B PATTERN (9->16 PIN) DATA
	MOV.B	R2,@(1+2*3,R4)		; SAVE C' PATTERN
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(1+1*3,R4),R1		;
	MOV.B	R1,@(1+1*3,R4)		; SAVE C' PATTERN
	OR.B	@(1,R4),R2		; MAKE (B PATTERN) + (B PATTERN 1 FOR SHIFT RIGHT)
	MOV.B	R2,@(1,R4)		; MAKE C PATTERN
	MOV.B	@(2,R5),R2		; GET B PATTERN (17->24 PIN) DATA
	MOV.B	R2,@(2+2*3,R4)		; SAVE C' PATTERN
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(2+1*3,R4),R1		;
	MOV.B	R1,@(2+1*3,R4)		; SAVE C' PATTERN
	OR.B	@(2,R4),R2		; MAKE (B PATTERN) + (B PATTERN 1 FOR SHIFT RIGHT)
	MOV.B	R2,@(2,R4)		; MAKE C PATTERN
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_4		; BR. IF NOT MAKE C PATTERN END
	CLR.B	@(1*3,R4)		; CLEAR SOURCE AREA
	CLR.B	@(1+1*3,R4)		;
	CLR.B	@(2+1*3,R4)		;
	CLR.W	@(2*3,R4)		;
	CLR.W	@(2+2*3,R4)		;
	CLR.W	@(4+2*3,R4)		;
	CLR.W	@(4*3,R4)		;
	CLR.W	@(2+4*3,R4)		;
	CLR.W	@(4+4*3,R4)		;
	CLR.B	@(6*3,R4)		;
	CLR.B	@(1+6*3,R4)		;
	CLR.B	@(2+6*3,R4)		;
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	MOV.W	FP,@-SP 		;+ SAVE TEXT BUFFER POINTER
	LDC.B	#PAGE OLTTB,DP		; SET OUTLINE TABLE PAGE
	MOV.W	#OLTTB,R1		; SET OUTLINE CONVERSION TABLE
KOUT_6: MOV.B	@R5,R2			; GET B PATTERN (1->8 PIN) DATA
	MOV.B	R2,@EDWKS1:8		; SAVE IT (HIGH DATA)
	MOV.B	R2,R1			;
	MOV.B	@(1,R5),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@EDWKS2:8		; SAVE IT (MIDDLE DATA)
	MOV.B	@(2,R5),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@EDWKS3:8		; SAVE IT (LOW DATA)
	MOV.B	@R1,R2			; GET CONVERSION DATA (1ST)
	BTST.B	#0,@EDWKS2:8		;
	BEQ	KOUT_8			; BR. IF 9 PIN OFF
	BSET.B	#7,R2			; SET 8 PIN ON
KOUT_8: OR.B	@(1*3,R4),R2		; MAKE (C PATTERN) + (B PATTERN FOR 1 UP/DOWN SHIFT)
	MOV.B	R2,@(1*3,R4)		; SAVE D PATTERN
	MOV.B	@EDWKS2:8,R1		; GET 2ND DATA (WORK)
	MOV.B	@R1,R2			; GET CONVERSION DATA (2ND)
	BTST.B	#7,@EDWKS1:8		;
	BEQ	KOUT_A			; BR. IF 8 PIN OFF
	BSET.B	#0,R2			; SET 9 PIN ON
KOUT_A: BTST.B	#0,@EDWKS3:8		;
	BEQ	KOUT_C			; BR. IF 17 PIN OFF
	BSET.B	#7,R2			; SET 16 PIN ON
KOUT_C: OR.B	@(1+1*3,R4),R2		; MAKE (C PATTERN) + (B PATTERN FOR 1 UP/DOWN SHIFT)
	MOV.B	R2,@(1+1*3,R4)		; SAVE D PATTERN
	MOV.B	@EDWKS3:8,R1		; GET 3RD DATA (WORK)
	MOV.B	@R1,R2			; GET CONVERSION DATA (3RD)
	BTST.B	#7,@EDWKS2:8		;
	BEQ	KOUT_E			; BR. IF 16 PIN OFF
	BSET.B	#0,R2			; SET 17 PIN ON
KOUT_E: OR.B	@(2+1*3,R4),R2		; MAKE (C PATTERN) + (B PATTERN FOR 1 UP/DOWN SHIFT)
	MOV.B	R2,@(2+1*3,R4)		; SAVE D PATTERN
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_6		; BR. IF NOT MAKE D PATTERN END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	@SP+,FP 		;+ UNSAVE TEXT BUFFER POINTER
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	BTST.W	#QPSHDW,@(YMODEF,FP)	;
	BEQ	KOUT_M			; BR. IF OUTLINE FOR KANJI
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	ADDS.B	#3,R4			; ADJUST SOURCE POINTER
KOUT_G: MOV.B	@R5,R2			; GET 1ST DATA
	MOV.B	R2,@EDWKS1:8		; SAVE LOW DATA (WORK)
	MOV.B	@(1,R5),R2		; GET 2ND DATA
	MOV.B	R2,@EDWKS2:8		; SAVE MIDDLE DATA (WORK)
	MOV.B	@(2,R5),R2		; GET 3RD DATA
	MOV.B	R2,@EDWKS3:8		; SAVE HIGH DATA (WORK)
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	KOUT_I			; BR. IF NOT VERTICAL FORMAT
	BSR	SFTUP:16		; *-> MAKE (D' PATTERN) <- (D PATTERN) + (B PATTERN FOR 1 SHIFT UP/RIGHT) <-*
	BRA	KOUT_J
	;
KOUT_I: BSR	SFTDWN:16		; *-> MAKE (D' PATTERN) <- (D PATTERN) + (B PATTERN FOR 1 SHIFT DOWN/RIGHT) <-*
KOUT_J: ADDS.B	#3+3,R4 		; ADJUST SOURCE POINTER
	MOV.B	@R4,R2			; GET B PATTERN (1->8 PIN) DATA
	OR.B	@EDWKS1:8,R2		; MAKE (D' PATTERN) + (B PATTERN FOR SHIFT 3 TO RIGHT & 1 TO DOWN)
	MOV.B	R2,@R4			; SAVE E' PATTERN
	MOV.B	@(1,R4),R2		; GET B PATTERN (9->16 PIN) DATA
	OR.B	@EDWKS2:8,R2		; MAKE (D' PATTERN) + (B PATTERN FOR SHIFT 3 TO RIGHT & 1 TO DOWN)
	MOV.B	R2,@(1,R4)		; SAVE E' PATTERN
	MOV.B	@(2,R4),R2		; GET B PATTERN (17->24 PIN) DATA
	OR.B	@EDWKS3:8,R2		; MAKE (D' PATTERN) + (B PATTERN FOR SHIFT 3 TO RIGHT & 1 TO DOWN)
	MOV.B	R2,@(2,R4)		; SAVE E' PATTERN
	ADDS.B	#3,R4			; ADJUST SOURCE POINTER
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	KOUT_K			; BR. IF NOT VERTICAL FORMAT
	BSR	SFTUP:16		; *-> MAKE (E PATTERN) <- (E' PATTERN) + (B PATTERN FOR SHIFT 4 TO RIGHT & 2 TO UP)  <-*
	BRA	KOUT_L
	;
KOUT_K: BSR	SFTDWN:16		; *-> MAKE (E PATTERN) <- (E' PATTERN) + (B PATTERN FOR SHIFT 4 TO RIGHT & 2 TO DOWN)  <-*
KOUT_L: SUBS.B	#3+3,R4 		;
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_G		; BR. IF NOT MAKE E PATTERN END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
KOUT_M: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	BTST.W	#QKVENL,@(YMODEF,FP)	;
	BNE	KOUT_O			; BR. IF VERTICAL ENLARGE FOR KANJI
KOUT_N: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#0,R2			; MASK 1 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1+1*3,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1+1*3,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	BCLR.B	#7,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2+1*3,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_N		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 1 PASS FOR KANJI >>
;
KOUT_O: BTST.W	#QK2PAS,@(YMODEF,FP)	;
	BNE	KOUT_Q			; BR. IF 2ND PASS
KOUT_P: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#0,R2			; MASK 1 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1+1*3,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1+1*3,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2+1*3,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_P		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 2ND PASS FOR KANJI >>
;
KOUT_Q: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1*3,R4),R2		; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@(1*3,R4)		; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1+1*3,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1+1*3,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	BCLR.B	#7,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2+1*3,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2+1*3,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KOUT_Q		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
	.PAGE
;
;	<< SHADOW FOR KANJI >>
;
KSHADW: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	MOV.W	R3,R2			; SAVE IT
	ADDS.B	#9-3,R2 		;
	MOV.W	R2,@-SP 		;+ SAVE ADJUST LENGTH
	MULXU.B #3,R2			;
	ADD.W	R2,R4			;
	MOV.W	@SP+,R2 		;+ UNSAVE LENGTH
	SHLR.W	R2			;
	ADD.W	#-1,R2			;
KSHA_2: CLR.W	@(-2,R4)		; CLEAR SOURCE AREA
	CLR.W	@(-4,R4)		;
	CLR.W	@(-6,R4)		;
	SUBS.B	#6,R4			; UPDATE SOURCE POINTER
	SCB/F	R2,KSHA_2		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
KSHA_4: MOV.B	@R5,R2			; GET B PATTERN (1->8 PIN) DATA
	MOV.B	R2,@EDWKS1:8		; SAVE LOW DATA (WORK)
	OR.B	@R4,R2			; MAKE (C PATTERN) + (B PATTERN)
	MOV.B	R2,@R4			; SAVE C' PATTERN
	MOV.B	@(1,R5),R2		; GET B PATTERN (9->16 PIN) DATA
	MOV.B	R2,@EDWKS2:8		; SAVE MIDDLE DATA (WORK)
	OR.B	@(1,R4),R2		; MAKE (C PATTERN) + (B PATTERN)
	MOV.B	R2,@(1,R4)		; SAVE C' PATTERN
	MOV.B	@(2,R5),R2		; GET B PATTERN (17->24 PIN) DATA
	MOV.B	R2,@EDWKS3:8		; SAVE HIGH DATA (WORK)
	OR.B	@(2,R4),R2		; MAKE (C PATTERN) + (B PATTERN)
	MOV.B	R2,@(2,R4)		; SAVE C' PATTERN
	ADDS.B	#3,R4			; ADJUST SOURCE POINTER
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	KSHA_6			; BR. IF NOT VERTICAL FORMAT
	BSR	SFTUP:16		; *-> MAKE (C PATTERN) <- (C PATTERN) + (B PATTERN FOR SHIFT 1 TO UP/RIGHT) <-*
	BRA	KSHA_7
	;
KSHA_6: BSR	SFTDWN:16		; *-> MAKE (C PATTERN) <- (C PATTERN) + (B PATTERN FOR SHIFT 1 TO DOWN/RIGHT) <-*
KSHA_7: ADDS.B	#3+3,R4 		; ADJUST SOURCE POINTER
	MOV.B	@R4,R2			; GET C PATTERN (1->8 PIN) DATA
	OR.B	@EDWKS1:8,R2		; MAKE (C PATTERN) + (B PATTERN FOR SHIFT 3 TO RIGHT & 1 TO DOWN)
	MOV.B	R2,@R4			; SAVE C PATTERN
	MOV.B	@(1,R4),R2		; GET C PATTERN (9->16 PIN) DATA
	OR.B	@EDWKS2:8,R2		; MAKE (C PATTERN) + (B PATTERN FOR SHIFT 3 TO RIGHT & 1 TO DOWN)
	MOV.B	R2,@(1,R4)		; SAVE C PATTERNE
	MOV.B	@(2,R4),R2		; GET C PATTERN (17->24 PIN) DATA
	OR.B	@EDWKS3:8,R2		; MAKE (C PATTERN) + (B PATTERN FOR SHIFT 3 TO RIGHT & 1 TO DOWN)
	MOV.B	R2,@(2,R4)		; SAVE C PATTERN
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BEQ	KSHA_8			; BR, IF NOT VERTICAL FORMAT
	BSR	SFTUP:16		; *-> MAKE C PATTERN <- (C PATTERN) + (B PATTERN FOR SHIFT 4 TO RIGHT & 2 TO UP) <-*
	BRA	KSHA_9
	;
KSHA_8: BSR	SFTDWN:16		; *-> MAKE C PATTERN <- (C PATTERN) + (B PATTERN FOR SHIFT 4 TO RIGHT & 2 TO DOWN) <-*
KSHA_9: SUBS.B	#3+3+3,R4		; MAKE NEXT WORK POINTER (SOURCE)
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KSHA_4		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	BTST.W	#QKVFMT,@(YMODEF,FP)	;
	BNE	KSHA_G:16		; BR. IF VERTICAL FORMAT
	BTST.W	#QKVENL,@(YMODEF,FP)	;
	BNE	KSHA_C			; BR. IF VERTICAL ENLARGE FOR KANJI
KSHA_A: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	BCLR.B	#7,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KSHA_A		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 1 PASS FOR KANJI >>
;
KSHA_C: BTST.W	#QK2PAS,@(YMODEF,FP)	;
	BNE	KSHA_E			; BR. IF 2ND PASS
KSHA_D: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KSHA_D		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLARGE 2ND PASS FOR KANJI >>
;
KSHA_E: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	BCLR.B	#7,R2			; MASK 24 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KSHA_E		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL FORMAT 1 PASS FOR KANJI >>
;
KSHA_G: BTST.W	#QK2PAS,@(YMODEF,FP)	;
	BNE	KSHA_I			; BR. IF 2ND PASS
KSHA_H: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	BCLR.B	#0,R2			; MASK 1 PIN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KSHA_H		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;	<< VERTICAL ENLAGE 2 PASS >>
;
KSHA_I: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@R4,R2			; CLEAR ORIGINAL HIGH PATTERN
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(1,R4),R2		; CLEAR ORIGINAL MIDDLE PATTERN
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	AND.B	@(2,R4),R2		; CLEAR ORIGINAL LOW PATTERN
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KSHA_I		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
	.PAGE
;********************************************************
;							*
;	ANK / KANJI EDITING SUBROUTINE			*
;							*
;********************************************************
;
; << SUB >>	LOAD CG PATTERN TO IMAGE BUFFER 	<  LQ  ->EMPHASIZE >
;							< DRAFT->EMPHASIZE >
;							< KANJI->EMPHASIZE >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) (IN + 2)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
EMPDR:
EMPLQ:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
	CLR.W	@R5+			; CLEAR LAST + 1 PATTERN AREA
	CLR.W	@R5+			;
	CLR.W	@R5+			;
	ADD.W	#2,R3			; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	ADD.W	#-1,R3			;
EMPL_2: MOV.B	@R4,R2			; GET OLD DATA
	OR.B	@(-6,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET OLD DATA
	OR.B	@(-5,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET OLD DATA
	OR.B	@(-4,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,EMPL_2		; BR. IF NOT PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER (DESTIN.)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			;
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO IMAGE BUFFER 	<  LQ  ->HORIZONTAL ENLARGE >
;							< DRAFT->HORIZONTAL ENLARGE >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) ((IN + 1) x 2)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
HELDR:
HELLQ:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
	CLR.W	@R5+			; CLEAR LAST + 1 PATTERN AREA
	CLR.W	@R5+			;
	CLR.W	@R5+			;
	ADD.W	#2,R3			; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
	ADD.W	R0,R5			; SET DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	ADD.W	#-1,R3			;
HELL_2: CLR.B	@R5			; CLEAR PATTERN AREA
	CLR.B	@(1,R5) 		;
	CLR.B	@(2,R5) 		;
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	MOV.B	@R4,R2			; GET OLD DATA
	OR.B	@(-3,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET OLD DATA
	OR.B	@(-2,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET OLD DATA
	OR.B	@(-1,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,HELL_2		; BR. IF NOT PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER (DESTIN.)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	MOV.W	#01,R2			;
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO IMAGE BUFFER 	<  LQ  ->HORIZONTAL ENLARGE & EMPHASIZE >
;							< DRAFT->HORIZONTAL ENLARGE & EMPHASIZE >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) ((IN + 2) x 2)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
HEPDR:
HEPLQ:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
	CLR.W	@R5+			; CLEAR LAST + 1 PATTERN AREA
	CLR.W	@R5+			;
	CLR.W	@R5+			;
	ADD.W	#2,R3			; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
	ADD.W	R0,R5			; SET DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	ADD.W	#-1,R3			;
HEPL_2: CLR.B	@R5			; CLEAR PATTERN AREA
	CLR.B	@(1,R5) 		;
	CLR.B	@(2,R5) 		;
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	MOV.B	@R4,R2			; GET OLD DATA
	OR.B	@(-6,R4),R2		; OR WITH DATA TO OR DATA
	OR.B	@(-3,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET OLD DATA
	OR.B	@(-5,R4),R2		; OR WITH DATA TO OR DATA
	OR.B	@(-2,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET OLD DATA
	OR.B	@(-4,R4),R2		; OR WITH DATA TO OR DATA
	OR.B	@(-1,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,HEPL_2		; BR. IF NOT PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER (DESTIN.)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	MOV.W	#01,R2			;
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO EDIT BUFFER		< DRAFT->ITALIC >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) (IN + 4)
;		EP R4 : ITALIC PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
AKDIN:	JSR	@CP1T2			; COPY EDBF1 TO EDBF2
	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	ADDS.B	#4,R5			; ADJUST IT (LQ ITALIC = +4)
	MOV.W	R5,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE SOURCE POINTER (->DESTIN.)
	MOV.W	R5,@-SP 		;+ SAVE SOURCE POINTER
	ADDS.W	#114*3,R4		; <---> ADJUST POINTER (-> SOURCE) <--->
	ADD.W	#-1,R3			;
AKDN_2: MOV.B	@R4,R2			; <---> GET PATTERN 1->8 PIN <--->
	MOV.B	R2,R1			; SAVE DATA
	AND.B	#H'3F,R2                ;
	OR.B	@(4*3,R5),R2		;
	MOV.B	R2,@(4*3,R5)		; SAVE IT
	MOV.B	R1,R2			; GET DATA
	AND.B	#H'C0,R2                ;
	OR.B	@(3*3,R5),R2		;
	MOV.B	R2,@(3*3,R5)		; SAVE IT
	MOV.B	@(1,R4),R2		; <---> GET PATTERN 9->16 PIN <--->
	MOV.B	R2,R1			; SAVE DATA
	AND.B	#H'0F,R2                ;
	OR.B	@(1+3*3,R5),R2		;
	MOV.B	R2,@(1+3*3,R5)		; SAVE IT
	MOV.B	R1,R2			; GET DATA
	AND.B	#H'F0,R2                ;
	OR.B	@(1+2*3,R5),R2		;
	MOV.B	R2,@(1+2*3,R5)		; SAVE IT
	MOV.B	@(2,R4),R2		; <---> GET PATTERN 17->24 PIN <--->
	MOV.B	R2,R1			; SAVE DATA
	AND.B	#H'03,R2                ;
	OR.B	@(2+2*3,R5),R2		;
	MOV.B	R2,@(2+2*3,R5)		; SAVE IT
	MOV.B	R1,R2			; GET DATA
	AND.B	#H'FC,R2                ;
	OR.B	@(2+1*3,R5),R2		;
	MOV.B	R2,@(2+1*3,R5)		; SAVE IT
	ADDS.B	#3,R5			; UPDATE DESTINATION POINTER
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,AKDN_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE ADJUST PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING FLAG
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO EDIT BUFFER		< LQ->ITALIC >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) (IN + 12)
;		EP R4 : ITALIC PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
AKLIN:	BSR	CP2T2:16		; COPY EDBF1 TO EDBF2
	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	ADDS.B	#12,R5			; ADJUST IT (LQ ITALIC = +12)
	MOV.W	R5,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE SOURCE POINTER (->DESTIN.)
	MOV.W	R5,@-SP 		;+ SAVE SOURCE POINTER
	ADD.W	#114*3,R4		; ADJUST POINTER (-> SOURCE)
	ADD.W	#-1,R3			;
AKLN_2: MOV.B	@R4,R0			; <---> GET PATTERN DATA 1->8 PIN <--->
	MOV.W	R0,R1			; SAVE DATA
	AND.B	#H'03,R0                ;
	OR.B	@(12*3,R5),R0		;
	MOV.B	R0,@(12*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'0C,R0                ;
	OR.B	@(11*3,R5),R0		;
	MOV.B	R0,@(11*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'30,R0                ;
	OR.B	@(10*3,R5),R0		;
	MOV.B	R0,@(10*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'C0,R0                ;
	OR.B	@(9*3,R5),R0		;
	MOV.B	R0,@(9*3,R5)		; SAVE IT
	MOV.B	@(1,R4),R0		; <---> GET PATTERN DATA 9->16 PIN <--->
	MOV.W	R0,R1			; SAVE DATA
	AND.B	#H'03,R0                ;
	OR.B	@(1+8*3,R5),R0		;
	MOV.B	R0,@(1+8*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'0C,R0                ;
	OR.B	@(1+7*3,R5),R0		;
	MOV.B	R0,@(1+7*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'30,R0                ;
	OR.B	@(1+6*3,R5),R0		;
	MOV.B	R0,@(1+6*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'C0,R0                ;
	OR.B	@(1+5*3,R5),R0		;
	MOV.B	R0,@(1+5*3,R5)		; SAVE IT
	MOV.B	@(2,R4),R0		; <---> GET PATTERN DATA 17->24 PIN <--->
	MOV.W	R0,R1			; SAVE DATA
	AND.B	#H'03,R0                ;
	OR.B	@(2+4*3,R5),R0		;
	MOV.B	R0,@(2+4*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'0C,R0                ;
	OR.B	@(2+3*3,R5),R0		;
	MOV.B	R0,@(2+3*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'30,R0                ;
	OR.B	@(2+2*3,R5),R0		;
	MOV.B	R0,@(2+2*3,R5)		; SAVE IT
	MOV.W	R1,R0			; GET DATA
	AND.B	#H'C0,R0                ;
	OR.B	@(2+1*3,R5),R0		;
	MOV.B	R0,@(2+1*3,R5)		; SAVE IT
	ADDS.B	#3,R5			; UPDATE SOURCE POINTER
	ADDS.B	#3,R4			; UPDATE DESTINATION POINTER
	ADD.W	#-1,R3			; UPDATE LOOP COUNTER
	BPL	AKLN_2			; BR. IF NOT NED
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
;
; << SUB >>	COPY EDBF1 TO EDBF2
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EDBF1 : EACH PATTERN
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDBF2)
;		EDBF1 : ALL CLEAR
;		EDBF2 : EACH PATTERN
;
;	USE	R1->R3
;
CP2T2:	MOV.W	#EDBF1+6,R1		; SET EDIT BUFFER 1 POINTER (SOURCE)
	MOV.W	#EDBF2+6,R2		; SET EDIT BUFFER 2 POINTER (DESTIN.)
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R1,@-SP 		;+ SAVE CLEAR AREA POINTER
	SHLR.W	R3			; COLUMN / 2 (= WORD COPY)
	BCS	CP22_4			; BR. IF ODD COLUMN
	BEQ	CP22_4			; BR. IF (LENGTH / 2) = 0
	ADD.W	#-1,R3			;
CP22_4: MOV.W	@R1+,R0 		; GET PATTERN
	MOV.W	R0,@R2+ 		; SAVE IT
	MOV.W	@R1+,R0 		;
	MOV.W	R0,@R2+ 		;
	MOV.W	@R1+,R0 		;
	MOV.W	R0,@R2+ 		;
	SCB/F	R3,CP22_4		; BR. IF NOT END
	MOV.W	#114/2,R3		; SET CLEAR LENGTH (/ 2)
	ADD.W	#-1,R3			;
	MOV.W	@SP+,R1 		;+ UNSAVE CLEAR AREA POINTER
CP22_6: CLR.W	@R1+			; CLEAR AREA
	CLR.W	@R1+			;
	CLR.W	@R1+			;
	SCB/F	R3,CP22_6		; BR. IF NOT END
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO IMAGE BUFFER 	< KANJI->EMPHASIZE >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) ((IN + 2) x 2)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
EMPKJ:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
	CLR.W	@R5+			; CLEAR LAST + 1 PATTERN AREA
	CLR.W	@R5+			;
	CLR.W	@R5+			;
	ADD.W	#2,R3			; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	ADD.W	#-1,R3			;
EMPK_2: MOV.B	@R4,R2			; GET OLD DATA
	OR.B	@(-3,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET OLD DATA
	OR.B	@(-2,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET OLD DATA
	OR.B	@(-1,R4),R2		; OR WITH DATA TO OR DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,EMPK_2		; BR. IF NOT PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER (DESTIN.)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	MOV.W	#01,R2			;
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO IMAGE BUFFER 	< KANJI->HORIZONTAL ENLARGE >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) ((IN + 2) x 2)
;		EP R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
HELKJ:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
;930215 CLR.W	@R5+	;DB LINE CONNECT; CLEAR LAST + 1 PATTERN AREA
;  "    CLR.W   @R5+                    ;
;  "    CLR.W   @R5+                    ;
;  "    ADD.W   #2,R3                   ; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
	ADD.W	R0,R5			; SET DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	ADD.W	#-1,R3			;
HELK_2: MOV.B	@R4,R2			; GET DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	MOV.B	@R4,R2			; GET DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,HELK_2		; BR. IF PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	MOV.W	#01,R2			;
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO IMAGE BUFFER 	< KANJI->HORIZONTAL ENLARGE & EMPHASIZE >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) ((IN + 1) x 4)
;		   R4 : PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
HEPKJ:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
	CLR.W	@R5+			; CLEAR LAST + 1 PATTERN AREA
	CLR.W	@R5+			;
	CLR.W	@R5+			;
	ADD.W	#2,R3			; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
	ADD.W	R0,R5			; SET DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	ADD.W	#-1,R3			;
HEPK_2: MOV.B	@R4,R2			; GET DATA
	OR.B	@(-3,R4),R2		; OR WITH BEFORE DATA TO DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET DATA
	OR.B	@(-2,R4),R2		; OR WITH BEFORE DATA TO DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET DATA
	OR.B	@(-1,R4),R2		; OR WITH BEFORE DATA TO DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	MOV.B	@R4,R2			; GET DATA
	OR.B	@(-3,R4),R2		; OR WITH BEFORE DATA TO DATA
	MOV.B	R2,@R5			; SAVE 1->8 PIN DATA
	MOV.B	@(1,R4),R2		; GET DATA
	OR.B	@(-2,R4),R2		; OR WITH BEFORE DATA TO DATA
	MOV.B	R2,@(1,R5)		; SAVE 9->16 PIN DATA
	MOV.B	@(2,R4),R2		; GET DATA
	OR.B	@(-1,R4),R2		; OR WITH BEFORE DATA TO DATA
	MOV.B	R2,@(2,R5)		; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,HEPK_2		; BR. IF PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	MOV.W	#01,R2			;
	RTS
	.PAGE
;
; << SUB >>	LOAD CG PATTERN TO EDIT BUFFER		< KANJI->ITALIC >
;
;	IN	   R3 : PATTERN LENGTH (COLUMN)
;		EP R4 : PATTERN START POINTER (EDIT)
;		   FP : TEXT BUFFER POINTER
;
;	OUT	   R3 : PATTERN LENGTH (COLUMN) (IN + 6)
;		EP R4 : ITALIC PATTERN START POINTER
;		   FP : TEXT BUFFER POINTER
;
;	USE	R0->FP,DP,EP
;
KJITL:	JSR	@CP1T2			; COPY EDBF1 TO EDBF2
	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	ADDS.B	#6,R5			; ADJUST IT (LQ ITALIC = +6)
	MOV.W	R5,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,R5			; SAVE SOURCE POINTER (->DESTIN.)
	MOV.W	R5,@-SP 		;+ SAVE SOURCE POINTER
	ADD.W	#114*3,R4		; ADJUST POINTER (-> SOURCE)
	ADD.W	#-1,R3			;
KJIL_2: MOV.B	@R4+,R1 		; <---> GET PATTERN DATA 1->8 PIN <--->
	MOV.B	R1,R2			; SAVE DATA
	AND.B	#H'0F,R1                ;
	OR.B	@(6*3,R5),R1		; OR WITH DATA TO DESTIN. DATA
	MOV.B	R1,@(6*3,R5)		; SAVE IT
	MOV.B	R2,R1			; GET DATA
	AND.B	#H'F0,R1                ;
	OR.B	@(5*3,R5),R1		; OR WITH DATA TO DESTIN. DATA
	MOV.B	R1,@(5*3,R5)		; SAVE IT
	MOV.B	@R4+,R1 		; <---> GET PATTERN DATA 9->16 PIN <--->
	MOV.B	R1,R2			; SAVE DATA
	AND.B	#H'0F,R1                ;
	OR.B	@(4*3+1,R5),R1		; OR WITH DATA TO DESTIN. DATA
	MOV.B	R1,@(4*3+1,R5)		; SAVE IT
	MOV.B	R2,R1			; GET DATA
	AND.B	#H'F0,R1                ;
	OR.B	@(3*3+1,R5),R1		; OR WITH DATA TO DESTIN. DATA
	MOV.B	R1,@(3*3+1,R5)		; SAVE IT
	MOV.B	R2,R1			; GET DATA
	MOV.B	@R4+,R1 		; <---> GET PATTERN DATA 17->24 PIN <--->
	MOV.B	R1,R2			; SAVE DATA
	AND.B	#H'0F,R1                ;
	OR.B	@(2*3+2,R5),R1		; OR WITH DATA TO DESTIN. DATA
	MOV.B	R1,@(2*3+2,R5)		; SAVE IT
	MOV.B	R2,R1			; GET DATA
	AND.B	#H'F0,R1                ;
	OR.B	@(1*3+2,R5),R1		; OR WITH DATA TO DESTIN. DATA
	MOV.B	R1,@(1*3+2,R5)		; SAVE IT
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,KJIL_2		; BR. IF NOT END
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	#01,R2			; SET EDITING MODE FLAG
	RTS
;
;	REVERSE PROGRAM
;
REVERS: CLR.W	@EDWKS1:8		; RESET WORK AREA (EDWKS1->2)
	CLR.W	@EDWKS3:8		; RESET WORK AREA (EDWKS3->4)
	MOV.W	R3,R0			;+ SAVE LENGTH
	ADDS.B	#8,R0			; ADJUST LENGTH
	MOV.B	R0,@EDWKS5:8		; SAVE PATTERN LENGTH
	JSR	@SETDS2 		; GET DESTIN. POINTER
	MOV.W	R0,R5			; SET DESTIN. POINTER
	CLR.W	@R5			; CLEAR DESTIN. AREA
	CLR.W	@(2,R5) 		;
	CLR.W	@(4,R5) 		;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
REVE_2: MOV.B	@R4,R2			; GET 1->8 PIN DATA
	MOV.B	R2,@(2*3,R5)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@R5,R2			;
	MOV.B	R2,@R5			;
	OR.B	@(1*3,R5),R1		;
	MOV.B	R1,@(1*3,R5)		;
	MOV.B	@(1,R4),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@(1+2*3,R5)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(1,R5),R2		;
	MOV.B	R2,@(1,R5)		;
	OR.B	@(1+1*3,R5),R1		;
	MOV.B	R1,@(1+1*3,R5)		;
	MOV.B	@(2,R4),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@(2+2*3,R5)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(2,R5),R2		;
	MOV.B	R2,@(2,R5)		;
	OR.B	@(2+1*3,R5),R1		;
	MOV.B	R1,@(2+1*3,R5)		;
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,REVE_2		; BR. IF NOT END
	CLR.W	@(2*3,R5)		; CLEAR DESTIN. AREA
	CLR.W	@(2+2*3,R5)		;
	CLR.W	@(4+2*3,R5)		;
	CLR.W	@(4*3,R5)		;
	CLR.W	@(2+4*3,R5)		;
	CLR.W	@(4+4*3,R5)		;
	CLR.W	@(6*3,R5)		;
	CLR.W	@(2+6*3,R5)		;
	CLR.W	@(4+6*3,R5)		;
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	ADD.W	#2,R3			; ADJUST LOOP COUNTER
	CLR.W	@R4			; CLEAR SOURCE AREA
	CLR.W	@(2,R4) 		;
	CLR.W	@(4,R4) 		;
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
REVE_4: MOV.B	@R5,R2			; GET 1->8 PIN DATA
	MOV.B	R2,@(2*3,R4)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@R4,R2			;
	MOV.B	R2,@R4			;
	OR.B	@(1*3,R4),R1		;
	MOV.B	R1,@(1*3,R4)		;
	MOV.B	@(1,R5),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@(1+2*3,R4)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(1,R4),R2		;
	MOV.B	R2,@(1,R4)		;
	OR.B	@(1+1*3,R4),R1		;
	MOV.B	R1,@(1+1*3,R4)		;
	MOV.B	@(2,R5),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@(2+2*3,R4)		; SAVE IT
	MOV.B	R2,R1			; SAVE DATA
	OR.B	@(2,R4),R2		;
	MOV.B	R2,@(2,R4)		;
	OR.B	@(2+1*3,R4),R1		;
	MOV.B	R1,@(2+1*3,R4)		;
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,REVE_4		; BR. IF NOT END
	CLR.W	@(2*3,R4)		; CLEAR SOURCE AREA
	CLR.W	@(2+2*3,R4)		;
	CLR.W	@(4+2*3,R4)		;
	CLR.W	@(4*3,R4)		;
	CLR.W	@(2+4*3,R4)		;
	CLR.W	@(4+4*3,R4)		;
	CLR.B	@(6*3,R4)		;
	CLR.B	@(1+6*3,R4)		;
	CLR.B	@(2+6*3,R4)		;
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
	MOV.W	FP,@-SP 		;+ SAVE TEXT BUFFER POINTER
	LDC.B	#PAGE OLTTB,DP		; SET OUTLINE TABLE PAGE
	MOV.W	#OLTTB,R1		; SET OUTLINE CONVERSION TABLE
REVE_6: MOV.B	@R5,R2			; GET 1->8 PIN DATA
	MOV.B	R2,@EDWKS1:8		; SAVE IT (HIGH DATA)
	MOV.B	R2,R1			;
	MOV.B	@(1,R5),R2		; GET 9->16 PIN DATA
	MOV.B	R2,@EDWKS2:8		; SAVE IT (MIDDLE DATA)
	MOV.B	@(2,R5),R2		; GET 17->24 PIN DATA
	MOV.B	R2,@EDWKS3:8		; SAVE IT (LOW DATA)
	MOV.B	@R1,R2			; GET CONVERSION DATA (1ST)
	BTST.B	#0,@EDWKS2:8		;
	BEQ	REVE_8			; BR. IF 9 PIN OFF
	BSET.B	#7,R2			; SET 8 PIN ON
REVE_8: OR.B	@(1*3,R4),R2		;
	MOV.B	R2,@(1*3,R4)		; SAVE 1->8 PIN DATA
	MOV.B	@EDWKS2:8,R1		; GET 2ND DATA (WORK)
	MOV.B	@R1,R2			; GET CONVERSION DATA (2ND)
	BTST.B	#7,@EDWKS1:8		;
	BEQ	REVE_A			; BR. IF 8 PIN OFF
	BSET.B	#0,R2			; SET 9 PIN ON
REVE_A: BTST.B	#0,@EDWKS3:8		;
	BEQ	REVE_C			; BR. IF 17 PIN OFF
	BSET.B	#7,R2			; SET 16 PIN ON
REVE_C: OR.B	@(1+1*3,R4),R2		;
	MOV.B	R2,@(1+1*3,R4)		; SAVE 9->16 PIN DATA
	MOV.B	@EDWKS3:8,R1		; GET 3RD DATA (WORK)
	MOV.B	@R1,R2			; GET CONVERSION DATA (3RD)
	BTST.B	#7,@EDWKS2:8		;
	BEQ	REVE_E			; BR. IF 16 PIN OFF
	BSET.B	#0,R2			; SET 17 PIN ON
REVE_E: OR.B	@(2+1*3,R4),R2		;
	MOV.B	R2,@(2+1*3,R4)		; SAVE 17->24 PIN DATA
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE DESTIN. POINTER
	SCB/F	R3,REVE_6		; BR. IF NOT END
	LDC.B	#0,DP			; RESET < DP >
	MOV.W	@SP+,FP 		;+ UNSAVE TEXT BUFFER POINTER
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
REVE_I: MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE SOURCE POINTER
	MOV.W	R5,@-SP 		;+ SAVE DESTIN. POINTER
	ADD.W	#-1,R3			;
REVE_K: MOV.B	@R5,R2			; GET ORIGINAL 1ST PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	MOV.B	R2,@R4			; WRITE HIGH
	MOV.B	@(1,R5),R2		; GET ORIGINAL 2ND PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	MOV.B	R2,@(1,R4)		; WRITE MIDDLE
	MOV.B	@(2,R5),R2		; GET ORIGINAL 3RD PATTERN
	NOT.B	R2			; MAKE 1'S COMPLEMENT
	MOV.B	R2,@(2,R4)		; WRITE LOW
	ADDS.B	#3,R4			; UPDATE SOURCE POINTER
	ADDS.B	#3,R5			; UPDATE SOURCE POINTER
	SCB/F	R3,REVE_K		; BR. IF NOT END
	MOV.W	@SP+,R5 		;+ UNSAVE DESTIN. POINTER
	MOV.W	@SP+,R4 		;+ UNSAVE SOURCE POINTER
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	MOV.B	@EDWKS5:8,R3		;+ UNSAVE PATTERN LENGTH
	RTS
;
;MASKING BLOCK	27/MAY/1992 KANG.C.G
;
MSKBL:	MOV.W	R3,R5			; SAVE PATTERN LENGTH
	MULXU.B #3,R5			;
	ADD.W	R4,R5			; SET END POINTER
	CLR.W	@R5+			; CLEAR LAST + 1 PATTERN AREA
	CLR.W	@R5+			;
	CLR.W	@R5+			;
	ADD.W	#2,R3			; ADJUST IT
	MOV.W	R3,@-SP 		;+ SAVE PATTERN LENGTH
	MOV.W	R4,@-SP 		;+ SAVE STRAT POINTER
	MOV.W	R3,R0			; SAVE LENGTH
	MULXU.B #3,R0			; CALCULATE COLUMN x 3 = BYTE
	ADD.W	R0,R4			; SET SOURCE POINTER
	MOV.W	R4,R5			; SAVE SOURCE POINTER
MSKBL0: MOV.B	@R4,R2			; GET OLD DATA
;
	MOV.W	R4,@-SP 		; 930407
	LDC.B	#PAGE HBUF20,EP 	;
	MOV.W	#HBUF20,R4		;
	MOV.B	@(4,R4),R0		;
	MOV.W	@SP+,R4 		;
;
;930407 MOV.B	@MSKVAL,R0
	AND.B	R0,R2
	MOV.B	R2,@R5		;1	; SAVE 1->8 PIN DATA
	MOV.B	#H'0,R2
	MOV.B	R2,@(1,R5)	;2	; SAVE 9->16 PIN DATA
	MOV.B	#H'0,R2
	MOV.B	R2,@(2,R5)	;3	; SAVE 17->24 PIN DATA
	SUBS.B	#3,R5			; UPDATE DESTIN. POINTER
	SUBS.B	#3,R4			; UPDATE SOURCE POINTER
	SCB/F	R3,MSKBL0		; BR. IF NOT PATTERN END
	MOV.W	@SP+,R4 		;+ UNSAVE START POINTER (DESTIN.)
	MOV.W	@SP+,R3 		;+ UNSAVE PATTERN LENGTH
	SHLL.W	R3			; LENGTH x 2
	MOV.W	#01,R2			;
	RTS
	.PAGE
;

	.END

	.PROGRAM	aplmon
	.HEADING	"STATUS MONITOR MODULE"
	.LIST		NOCOND,NOEXP
;********************************************************
;							*
;	M4324 STATUS MONITOR APPLICATION MODULE		*
;							*
;	FILE NAME	AX_MON.MAR			*
;	CREATED	 	10/APR/1991			*
;							*
;********************************************************
;
	.EXPORT		MONTBL
	.EXPORT		CALMON
	.EXPORT		INTACT,INTACF,INTCVR,INTHSM,INTOPC,INTSNS

	.IMPORT		MONTCB,MONSTK
	.IMPORT		SYSCAL,CMDCAN,GETPE2,HSMODE
	.IMPORT		DP1OFF,DP1OFP,DP1PER,DP1PES

	.INCLUDE	"COMMON.H"
	.INCLUDE	"M43RTM.H"
	.INCLUDE	"SYSEEP.H"
	.INCLUDE	"PNLIOS.H"
	.INCLUDE	"SYSRAM.H"
	.INCLUDE	"AX_IOS.H"
	.INCLUDE	"AX_MON.H"
	.INCLUDE	"AX_DP3.H"
	.INCLUDE	"AX_RAM.H"

;	.SECTION	APLRAM,DUMMY,LOCATE=H'FE00
;
;	MONITOR WORK AREA
;
	.ORG	H'FE20
MONF:	.RES.B	  1			; MONITOR FLAG
QMONE:	.EQU	  0			;   1:MONITOR ENABLE
QPECKE:	.EQU	  1			;   1:PE CHECK ENABLE
QCHGPE:	.EQU	  2			;   1:CHANGE PE STATUS
;	.EQU	  3			;
;	.EQU	  4			;
;	.EQU	  5			;
;	.EQU	  6			;
;	.EQU	  7			;

	.RES.B	  7			; RESERVED AREA
	.PAGE
	.SECTION	APL1,CODE,ALIGN=16
;
;	SLAVE CPU ACTION END INTERRUPT
;
;	IN	NONE
;
;	OUT	NONE
;
INTACT:	RTS				;

;
;	COVER STATUS CHANGE INTERRUPT HANDLER
;
;	IN	R0 : COVER SW STATUS
;
;	OUT	NONE
;
INTCVR:	BTST.B	#QMONE,@MONF:8		;
	BEQ	INTA_1			; BR IF MONITOR DISABLE
	BSET.B	#QDCVR,@PSWDF:8		; SET PANEL SW DISABLE
	CALMON	#FCCVR			; CALL COVER SW MONITOR
	RTS				;

;
;	ACSF STATUS CHANGE INTERRUPT HANDLER
;
;	IN	R1 : CHANGE STATUS
;
;	OUT	NONE
;
INTACF:	BTST.B	#QMNSW,R1		;
	BEQ	INTA_1			; BR IF NOT SF-260 MANUAL SW CHANGE
	MOV.B	@OPTF:8,R0		;
	AND.B	#XACSW+XSELA,R0		;
	BNE	INTA_1			; BR IF NOT SF-260 ATTACHED
	BNOT.B	#QMNSW,@OPTF:8		; EXCHANGE SF-260 AUTO/MANUAL SW STATUS
	BTST.B	#QMONE,@MONF:8		;
	BEQ	INTA_1			; BR IF MONITOR DISABLE
	CALMON	#FC260			; CALL SF-260 SW MONITOR
INTA_1:	RTS				;
	.PAGE
;
;	HEAD SHIFT MANUAL MOVE INTERRUPT HANDLER
;
;	IN	NONE
;
;	OUT	NONE
;
INTHSM:	BCLR.B	#QHSMV,@ERRSF:8		; RESET HEAD SHIFT MOVE STATUS
	BTST.B	#QMONE,@MONF:8		;
	BEQ	INTA_1			; BR IF MONITOR DISABLE
	BTST.W	#QCVSW,@SWSF:8		;
	BNE	INTA_1			; BR IF COVER CLOSE
	BTST.B	#QSERVM,@MODEF:8	;
	BNE	INTA_1			; BR IF SERVICE MODE
	LEDON	#QLMNH			; TURN ON MANUAL HEAD SHIFT MODE LED
	BEQ	INTA_1			; BR IF ALREADY MANUAL MODE LED ON
	CALMON	#FCHSM			; CALL HEAD SHIFT MODE MONITOR
	RTS				;

;
;	SENSOR STATUS INTERRUPT HANDLER
;
;	IN	R1 : SENSOR STATUS
;
;	OUT	NONE
;
INTSNS:	BTST.B	#QLFACT,@PRLFF:8	;
	BEQ	INTOP1			; BR IF NOT LF ACTIVE
	BSET.B	#QCHGPE,@MONF:8		; SET CHANGE PE STATUS FLAG
	RTS
;
;	OVER PE COUNT STATUS INTERRUPT HANDLER
;
;	IN	R0 : OPC POINTER
;		R1 : NEW OVER PE COUNT
;		R2 : OLD OVER PE COUNT
;
;	OUT	NONE
;
INTOPC:	BCLR.B	#QCHGPE,@MONF:8		;
	BNE	INTOP1			; BR IF CHANGE PE STATUS
	CMP.W	R1,R2			;
	BEQ	INTA_1			; BR IF OPC NOT CHANGE
INTOP1:	BTST.B	#QMONE,@MONF:8		;
	BEQ	INTA_1			; BR IF MONITOR DISABLE
	CALMON	#FCPES			; CALL PE CHECK MONITOR
	RTS				;

;
;	CALL MONITOR SYSTEM CALL
;
;	IN	R2 : EVENT FLAG
;
;	OUT	R0 : ANSWER CODE
;		R1 : MONITOR TCB POINTER
;
CALMON:	MOV.W	#MONTCB,R1		;
	MOV.B	#ORFLG,R0		; CALL MONITOR BY EVENT FLAG
	JMP	@SYSCAL			;
	.PAGE
	.SECTION	APL2,CODE,ALIGN=16
;
;	TASK DEFINITION TABLE
;
	.ALIGN		  2
MONTBL:	.DATA.W		MONTCB		; TCB
	.DATA.B		  1		; PRIORITY
	.DATA.B		ZTIST4		; STATUS
	.DATA.W		MONSTK		; STACK
	.DATA.W		MONINI		; ENTRY
	.DATA.B		PAGE MONINI	; CP
	.DATA.B		  0		; DP
	.DATA.B		  0		; EP
	.DATA.B		ZBR		; BR
	.DATA.W		  0		; NO MAIL BOX
	.DATA.W		  0		; NO PACKET
	.PAGE
;
;	INITIALIZE MONITOR TASK
;
MONINI:	MOV.W	#ZNN,R2			;
	BTST.B	#QPECKE,@MONF:8		;
	BNE	MONI_4			; BR IF PE CHECK ENABLE
	BCLR.W	#QCPES,R2		; IGNORE PE CHECK
MONI_4:	MOV.B	#XTFOR,R3		;
	WAIFLG				; WAIT STATUS CHECK REUEST
	MOV.W	R2,R0			; GET ENEVT FLAG STATUS
	MOV.W	#ZNN-ZMSBW,R2		;
	MOV.B	#ZN,R3			;
MONI_5:	ADD.B	#1,R3			; MAKE JUMP NO.
	ROTL.W	R2			; MAKE EVENT FLAG CLEAR MASK
	SHLR.W	R0			;
	BCC	MONI_5			; BR IF NOT EVENT FLAG HIT
	ANDFLG				; RESET REQUEST EVENT FLAG
	BTST.B	#QMONE,@MONF:8		;
	BNE	MONI_6			; BR IF MONITOR ENABLE
	CMP.B	#FMONE,R3		;
	BHI	MONINI			; BR IF DISABLE JOB
MONI_6:	MULXU.B	#3,R3			;
	JSR	@(MONI_9:16,R3)		; EXECUTE REQUEST JOB
	BRA	MONINI			;
					;
MONI_9:					;
	RTS3				; 0001  DP3 ACTION FINISH
	BRA	MONALM:16		; 0002  SET ALARM ERROR MODE
	BRA	MONDIS:16		; 0004  SET MONITOR DISABLE
	BRA	MONENA:16		; 0008  SET MONITOR ENABLE
	BRA	MONCVR:16		; 0010  CHECK COVER STATUS
	BRA	MONHSM:16		; 0020  CHECK HEAD SHIFT MODE
	BRA	MON260:16		; 0040  CHECK SF260 STATUS
	BRA	MONPED:16		; 0080  SET PE CHECK DISABLE
	BRA	MONPEE:16		; 0100  SET PE CHECK ENABLE
	BRA	MONPES:16		; 0200  CHECK PE STATUS
	BRA	MONPRD:16		; 0400  SET PRINT DISABLE MODE
	BRA	MONPEO:16		; 0800  RESET PE OVERRIDE MODE
	BRA	MONPRE:16		; 1000  SET PRINT ENABLE  MODE
	BRA	MONPRO:16		; 2000  SET PRINT ENABLE  MODE
	RTS3				; 4000
	RTS3				; 8000
	.PAGE
;
;	SET ALARM ERROR MODE
;
;	IN	NONE
;
;	OUT	NONE
;
MONALM:					;
	CALIOS	#DSPALM			; DISPLAY ALARM ERROR
MONA_1:	BRA	MONA_1			; STOP SYSTEM

;
;	SET MONITOR DISABLE
;
;	IN	NONE
;
;	OUT	NONE
;
MONDIS:	BCLR.B	#QMONE,@MONF:8		; SET MONITOTR DISABLE
MOND_1:	RTS				;

;
;	SET MONITOR ENABLE
;
;	IN	NONE
;
;	OUT	NONE
;
MONENA:	BSET.B	#QMONE,@MONF:8		; SET MONITOTR ENABLE
	BNE	MOND_1			; BR IF ALREADY ENABLE
	CALMON	#FC260+FCPES		; CHECK SF-260, PE STATUS
;	BRA	MONCVR			; CHECK CPOVER SW STATUS
	.PAGE
;
;	CHECK COVER SW STATUS
;
;	IN	NONE
;
;	OUT	NONE
;
MONCVR:	MOV.B	@ERRF:8,R5		; GET ERROR STATUS
	BTST.W	#QCVSW,@SWSF:8		;
	BNE	MONC_1			; BR IF COVER OPEN TO CLOSE
	BSET.B	#QDCVR,@PSWDF:8		; SET PANEL SW DISABLE
	BSET.B	#QCVRER,R5		; SET COVER ERROR
	BNE	MONH_1			; BR IF ALREADY COVER ERROR
	JSR	@CMDCAN			; CANCEL SLAVE CPU COMMAND
	BRA	CHKERR			;
					;
MONC_1:	BTST.B	#QCVRER,R5		; RESET COVER ERROR
	BEQ	MONH_1			; BR IF NOT COVER ERROR
	CALDPH	#ZPCVC+XWACTF		; SEND COVER CLOSE PACKET TO DP3
	WAIDP3				; WAIT COVER CLOSE ACTION FINISH
	BTST.W	#QCVSW,@SWSF:8		;
	BEQ	MONH_1			; BR IF COVER OPEN
	MOV.B	@ERRF:8,R5		; GET ERROR STATUS
	BCLR.B	#QCVRER,R5		; RESET COVER ERROR
	BCLR.B	#QDCVR,@PSWDF:8		; SET PANEL SW ENABLE
;	BRA	CHKERR			;
	.PAGE
;
;	CHECK ERROR STATUS
;
;	IN	R5 : NEW ERROR STATUS
;
;	OUT	NONE
;
CHKERR:	MOV.B	@ERRF:8,R4		; GET OLD ERROR STATUS
	CMP.B	R4,R5			;
	BEQ	CHKE_4			; BR IF NOT ERROR STATUS CHANGE
	MOV.B	R5,@ERRF:8		; SET NEW CHECK ERROR STATUS
	AND.B	#XINSER+XPE2ER+XPE1ER,R5;
	BEQ	CHKE_1			; BR IF NOT PE
	AND.B	#XINSER+XPE2ER+XPE1ER,R4;
	BNE	CHKE_3			; BR IF ALREADY PE STATUS
	BCLR.B	#QPREM,@MODEF:8		; RESET PRINT ENABLE MODE
	JSR	@DP1PES			; OUTPUT PE I/F SIGNAL
	CALDPH	#ZPPE			; SEND PE PACKET TO DP3
	BRA	CHKE_3			;
					;
CHKE_1:	AND.B	#XINSER+XPE2ER+XPE1ER,R4;
	BEQ	CHKE_2			; BR IF NOT PE RESET
	JSR	@DP1PER			; RESET PE I/F SIGNAL
CHKE_2:	MOV.B	@ERRF:8,R5		;
	BEQ	CHKE_3			; BR IF NO ERROR
	BCLR.B	#QPREM,@MODEF:8		; RESET PRINT ENABLE MODE
	JSR	@DP1OFF			; OUTPUT OFFLINE I/F SIGNAL
	CALDPH	#ZPOFF			; SEND OFFLINE PACKET TO DP3
CHKE_3:					;
	CALIOS	#DSPNOR			; DISPLAY ERROR MESSAGE
	RTS				;

CHKE_4:	BTST.B	#QPREM,@MODEF:8		;
	BNE	CHKE_5			; BR IF PRINT ENABLE MODE
	BTST.B	#QDTPR,@PSWDF:8		;
	BNE	CHKE_5			; BR IF TEST PRINT MODE
	BTST.B	#QINSM,@PRMDF:8		;
	BNE	CHKE_5			; BR IF PAPER INSERT MODE
	LEDON	#QLLOAD			; TURN ON LOAD LED
	RTS				;
					;
CHKE_5:					;
	LEDOFF	#QLLOAD			; TURN OFF LOAD LED
	RTS				;
	.PAGE
;
;	CHECK HEAD SHIFT MODE
;
;	IN	NONE
;
;	OUT	NONE
;
MONHSM:	MOV.W	#HSMODE,R4		; CHANGE HEAD SHIFT MODE
	CALDPH	#ZPOWN			;
MONH_1:	RTS				;

;
;	SF-260 AUTO/MANUAL SW STATUS CHECK
;
;	IN	NONE
;
;	OUT	NONE
;
MON260:	MOV.B	@OPTF:8,R0		;
	AND.B	#XACSW+XSELA,R0		;
	BNE	MONH_1			; BR IF NOT SF-260 ATTACHED
	CALDPH	#ZP260M			; CHANGE SF-260 PAPER MODE
	RTS				;

;
;	SET PE CHECK DISABLE
;
;	IN	NONE
;
;	OUT	NONE
;
MONPED:	BCLR.B	#QPECKE,@MONF:8		; SET PE CHECK DISABLE
	RTS				;

;
;	SET PE CHECK ENABLE
;
;	IN	NONE
;
;	OUT	NONE
;
MONPEE:	BSET.B	#QPECKE,@MONF:8		; SET PE CHECK ENABLE
	BNE	MONH_1			; BR IF ALREADY ENABLE
MONPE1:	MOV.W	#ZNN-FCPES,R2		;
	ANDFLG				; RESET PE CHECK REQUEST
	BTST.B	#QLFACT,@PRLFF:8	;
	BNE	MONH_1			; BR IF LF ACTIVE
;	BRA	MONPES			;
	.PAGE
;
;	CHECK PE SENSOR STATUS
;
;	IN	NONE
;
;	OUT	NONE
;
MONPES:	MOV.B	@PAMDF:8,R0		; GET PAPER MODE
	MOV.B	@SNSF:8,R1		; GET SENSOR STATUS
	MOV.B	R1,R3			;
	MOV.B	@ERRF:8,R5		; GET ERROR STATUS
	AND.B	#XCVRER,R5		; RESET ERROR FLAG
	CMP.B	#ZBTM,R0		;
	BCS	CHKFRM:16		; BR IF FORMS MODE
	CMP.B	#ZSHT,R0		;
	BCS	CHKBTM:16		; BR IF BOTTOM MODE
	BEQ	CHKSHT			; BR IF SHEET MODE
;	BRA	CHKACF			; BR IF ACSF MODE

;
;	CHECK PE FOR ACSF
;
;	IN	R0 : PAPER MODE
;		R1 : SENSOR STATUS
;		R3 : SENSOR STATUS
;		R5 : ERROR STATUS
;
;	OUT	NONE
;
CHKACF:	BSR	CHKPES			; CHECK SHEET/ACSF PE
	CMP.W	R0,R1			;
	BHI	CHKS_1			; BR IF OPC < PE COUNT 1
	BTST.B	#QSPES,R3		;
	BNE	CHKA_1			; BR IF NOT SENSOR PE
	BCLR.B	#QINSM,@PRMDF:8		; RESET PAPER INSERT MODE
	BSR	CHKA_3			; EJECT SHEET
	BRA	CHKERR			;
					;
	BSET.B	#QPMDER,R5		;+++ SET PAPER MODE ERROR
CHKA_1:	BCS	CHKA_2			; BR IF OPC > PE COUNT 1
	TST.W	R1			;
	BEQ	CHKS_1			; BR IF PE COUNT 1 = 0
CHKA_2:	BCLR.B	#QINSM,@PRMDF:8		; RESET PAPER INSERT MODE
	BRA	CHKERR			;

CHKA_3:	CMP.W	#ZNN,R0			;
	BEQ	CHKA_4			; BR IF ALREADY EJECTED
	CALDPH	#ZPEJPE			; EJECT PAPER
CHKA_4:	RTS				;
	.PAGE
;
;	CHECK PE FOR SHEET
;
;	IN	R0 : PAPER MODE
;		R1 : SENSOR STATUS
;		R3 : SENSOR STATUS
;		R5 : ERROR STATUS
;
;	OUT	NONE
;
CHKSHT:	BSR	CHKPES			; CHECK SHEET/ACSF PE
	BTST.B	#QSPES,R3		;
	BEQ	CHKF_3			; BR IF SENSOR PE
	BCLR.B	#QJAMI,@ERRSF:8		;
	BCLR.B	#QINSER,R5		; RESET INSERT ERROR
	CMP.W	R0,R1			;
	BCS	CHKA_2			; BR IF OPC > PE COUNT 1
	BHI	CHKS_1			; BR IF OPC < PE COUNT 1
	TST.W	R1			;
	BNE	CHKA_2			; BR IF PE COUNT 1 <> 0
CHKS_1:	BSET.B	#QINSM,@PRMDF:8		; SET PAPER INSERT MODE
	BRA	CHKERR			;
	.PAGE
;
;	CHECK PE FOR SHEET/ACSF
;
CHKPES:	MOV.W	@EEPBF+E2INS0,R2	; GET SHEET INSERT FEED COUNT
	JSR	@GETPE2			; CALCULATE PE COUNT 2
	AND.B	#XBPES+XFPES,R1		;
	BEQ	CHKP_1			; BR IF NO OTHER PAPER
	BSET.B	#QPMDER,R5		; SET PAPER MODE ERROR
	CMP.B	#ZACF0,R0		;
	BNE	CHKP_1			; BR IF NOT SF-260 AUTO MODE
	BSET.B	#Q260ER,R5		; SET SF-260 STACKER ERROR
CHKP_1:	MOV.W	#SOPC,R0		; GET OVER PE COUNT POINTER
	MOV.W	@EEPBF+E2OPCS,R1	; GET PE COUNT 1
;	BRA	CHKPE			;

;
;	CHECK PE
;
;	IN	R0 : OVER PE COUNT POINTER
;		R1 : PE COUNT 1
;		R2 : PE COUNT 2
;		R3 : SENSOR STATUS
;		R5 : ERROR STATUS
;
;	OUT	R0 : OVER PE COUNT
;		R1 : PE COUNT 1
;		R2 : PE COUNT 2
;		R3 : PE SONSOR STATUS
;		R4 : NOT CHANGED
;		R5 : ERROR STATUS
;		 Z : 1=SENSOR PE
;
CHKPE:	SUB.W	#0,R2			; CORRECT PE COUNT 2
	BCC	CHKP_2			;
	CLR.W	R2			;
CHKP_2:	CMP.W	R1,R2			;
	BCC	CHKP_3			; BR IF PE COUNT 1 =< PE COUNT 2
	MOV.W	R1,R2			; CORRECT PE COUNT 2
CHKP_3:	AND.B	#XBPES+XFPES+XSPES,R3	;
	BNE	CHKP_4			; BR IF PAPER PRESENT
	BCLR.B	#QJAME,@ERRSF:8		; RESET EJECT JAM STATUS
	BEQ	CHKP_4			;
	MOV.W	#ZNN,@R0		; SET EJECT COUNT TO OPC
CHKP_4:	BTST.B	#QJAME,@ERRSF:8		;
	BEQ	CHKP_5			; BR IF NOT EJECT JAM
	BSET.B	#QEJCER,R5		; SET EJECT ERROR
CHKP_5:	BTST.B	#QJAMI,@ERRSF:8		;
	BEQ	CHKP_6			; BR IF NOT INSERT JAM
	BSET.B	#QINSER,R5		; SET INSERT ERROR
CHKP_6:	MOV.W	@R0,R0			; GET OVER PE COUNT
	RTS				;
	.PAGE
;
;	CHECK PE FOR FORMS
;
;	IN	R0 : PAPER MODE
;		R1 : SENSOR STATUS
;		R3 : SENSOR STATUS
;		R5 : ERROR STATUS
;
;	OUT	NONE
;
CHKFRM:	MOV.B	@OPTF:8,R0		; GET ACSF SW STATUS
	AND.B	#XMNSW+XACSW+XSELA,R0	;
	BNE	CHKF_1			; BR IF NOT SF-260 AUTO SW ON
	BSET.B	#Q260ER,R5		; SET SF-260 STACKER ERROR
CHKF_1:	AND.B	#XBPES+XSPES,R1		;
	BEQ	CHKF_2			; BR IF NO OTHER PAPER
	BSET.B	#QPMDER,R5		; SET PAPER MODE ERROR
CHKF_2:	MOV.W	#FOPC,R0		; GET OVER PE COUNT POINTER
	MOV.W	@EEPBF+E2OPCF,R1	; GET PE COUNT 1
	MOV.W	@EEPBF+E2INF,R2		; GET PE COUNT 2
	BSR	CHKPE			; CHECK PE
	BTST.B	#QFPES,R3		;
	BNE	CHKF_5			; BR IF NOT SENSOR PE
CHKF_3:	CMP.W	R0,R1			;
	BHI	CHKB_3			; BR IF OPC < PE COUNT 1
	BSET.B	#QPE1ER,R5		; SET PE BEFORE EJECT
	CMP.W	R0,R2			;
	BHI	CHKF_6			; BR IF OPC < PE COUNT 2
	BSET.B	#QPE2ER,R5		; SET PE AFTER EJECT
	BSR	CHKA_3			; EJECT FORMS
CHKF_6:	BTST.B	#QPEOVM,@PRMDF:8	;
	BEQ	CHKF_4			; BR IF NOT OVERRIDE MODE
	AND.B	#ZN-XPE2ER-XPE1ER,R5	; RESET PE
CHKF_4:	BCLR.B	#QINSM,@PRMDF:8		; RESET PAPER INSERT MODE
	BRA	CHKERR			;
					;
CHKF_5:	BCLR.B	#QJAMI,@ERRSF:8		;
	BCLR.B	#QINSER,R5		; RESET INSERT ERROR
	BRA	CHKB_3			;
	.PAGE
;
;	CHECK PE FOR BOTTOM
;
;	IN	R0 : PAPER MODE
;		R1 : SENSOR STATUS
;		R3 : SENSOR STATUS
;		R5 : ERROR STATUS
;
;	OUT	NONE
;
CHKBTM:	BTST.B	#QBPES,R1		;
	BEQ	CHKB_4			; BR IF NOT BOTTOM SENSOR ON
	BCLR.B	#QSPES,R1		; RESET SHEET PE SENSOR
CHKB_4:	AND.B	#XFPES+XSPES,R1		;
	BEQ	CHKB_1			; BR IF NO OTHER PAPER
	BSET.B	#QPMDER,R5		; SET PAPER MODE ERROR
CHKB_1:	MOV.W	#BOPC,R0		; GET OVER PE COUNT POINTER
	MOV.W	@EEPBF+E2OPCB,R1	; GET PE COUNT
	MOV.W	@EEPBF+E2INB,R2		; GET PE COUNT 2
	BSR	CHKPE			; CHECK PE
	BTST.B	#QBPES,R3		;
	BNE	CHKB_3			; BR IF NOT SENSOR PE
	CMP.W	R0,R1			;
	BHI	CHKB_3			; BR IF OPC < PE COUNT 1
	BSET.B	#QPE1ER,R5		; SET PE BEFORE EJECT
	CMP.W	R0,R2			;
	BHI	CHKB_2			; BR IF OPC < PE COUNT 2
	BSET.B	#QPE2ER,R5		; SET PE AFTER EJECT
	BSR	CHKA_3			; EJECT BOTTOM
CHKB_2:	BTST.B	#QPEOVM,@PRMDF:8	;
	BEQ	CHKB_3			; BR IF NOT OVERRIDE MODE
	AND.B	#ZN-XPE2ER-XPE1ER,R5	; RESET PE
CHKB_3:	BSET.B	#QINSM,@PRMDF:8		; SET INSERT MODE
	BRA	CHKERR			;
	.PAGE
;
;	SET/RESET PRINT ENABLE MODE
;
;	IN	NONE
;
;	OUT	NONE
;
MONPRD:	BCLR.B	#QPREM,@MODEF:8		; RESET PRINT ENABLE MODE
	BEQ	MONP_4			; BR IF ALREADY PRINT DISABLE MODE
	JSR	@DP1OFP			; OUTPUT OFFLINE I/F SIGNAL
	CALIOS	#DSPNOR			; DISPLAY PRINT DISABLE MODE MESSAGE
	RTS				;

MONPEO:	BCLR.B	#QPEOVM,@PRMDF:8	; RESET PE OVERRIDE MODE
	BTST.B	#QPECKE,@MONF:8		;
	BNE	MONPE1			; BR IF PE CHECK ENABLE
	RTS				;

MONPRE:	BSR	MONPEO			; RESET PE OVERRIDE MODE
	MOV.B	#ZN-XEJCER-XINSER,R0	;
	BRA	MONP_1			;

MONPRO:	CMP.B	#ZACF0,@PAMDF:8		;
	BCC	MONPRE			; BR IF ACSF MODE
	MOV.B	#ZN-XEJCER-XINSER-XPE1ER,R0
MONP_1:	AND.B	@ERRF:8,R0		;
	BNE	MONP_4			; BR IF CAN'T PRINT ENABLE
	BTST.B	#QDALM,@PSWDF:8		;
	BNE	MONP_4			; BR IF ALARM ERROR MODE
	MOV.B	@MODEF:8,R0		;
	AND.B	#XSERVM+XSPCM+XPFCM+XPREM,R0
	BNE	MONP_4			; BR IF SPECIAL MODE
	MOV.B	@PAMDF:8,R0		; GET PAPER MODE
	CMP.B	#ZSHT,R0		;
	BNE	MONP_2			; BR IF NOT SHEET MODE
	BTST.B	#QSPES,@SNSF:8		;
	BEQ	MONP_2			; BR IF SENSOR PE
	MOV.W	@EEPBF+E2OPCS,R1	; GET PE COUNT 1
	CMP.W	@SOPC:8,R1		;
	BCS	MONP_4			; BR IF NOT SHEET INSERTED
MONP_2:	BCLR.B	#QJAME,@ERRSF:8		;
	BCLR.B	#QEJCER,@ERRF:8		; RESET EJECT ERROR
	BCLR.B	#QJAMI,@ERRSF:8		;
	BCLR.B	#QINSER,@ERRF:8		; RESET INSERT ERROR
	BCLR.B	#QPE1ER,@ERRF:8		; RESET PE ERROR
	BEQ	MONP_3			; BR IF NOT PE
	BSET.B	#QPEOVM,@PRMDF:8	; SET PE OVERRIDE MODE
MONP_3:	BSET.B	#QPREM,@MODEF:8		; SET PRINT DISABLE MODE
	CALDPH	#ZPON			; SEND ONLINE PACKET TO DP3
	CALIOS	#DSPNOR			; DISPLAY PRINT ENABLE MODE MESSAGE
MONP_4:	RTS				;
	.END

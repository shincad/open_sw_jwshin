C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE MIS
OBJECT MODULE PLACED IN .\BIN\Mis.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SRC\Mis.C LARGE OPTIMIZE(9,SPEED) BROWSE DEFINE(PanelID=INL_190AW01,ModelNa
                    -me=QL19W,BF_MOVING_WINDOW) DEBUG OBJECTEXTEND PRINT(.\LST\Mis.lst) OBJECT(.\BIN\Mis.obj)

line level    source

   1          #include "MCU.H"
   2          #include "8051.H"
   3          #include "RAM.H"
   4          #include "NVRAM.H"
   5          #include "sRGB.H"
   6          #include "NT686xx_MCU_REG.H"
   7          #include "Scaler.H"
   8          #include "OSD.H"
   9          #include "NT686xx_SC_REG.H"
  10          #include "Board.H"
  11          #include "Mis.H"
  12          #include "stdio.H"
  13          #include "Factory.H"
  14          #include "OSD_TAB.H"
  15          #include "Rom_map.H"
  16          #include "ModeHandle.H"
  17          #include "BFControl.H"
  18          #include "OSD_LF.H"
  19          
  20          void CheckPowerStatus()
  21          {
  22   1              ADC_CON = DEFAULT_ADC_CON;              //Channel;  // Start AD Convert
  23   1              if((ucPowerStatus & SoftPowerOnFlag)== 0){
  24   2                      PowerSaving();          //power saving befor power off
  25   2                      LED_RedOff();
  26   2                      LED_GrnOff();
  27   2      //              printf("PowerOff\r\n");
  28   2              }
  29   1              else{
  30   2      
  31   2                      LED_GrnOn();
  32   2                      
  33   2      //              printf("PowerOn\r\n");
  34   2              }
  35   1      }
  36          
  37          void CheckTimer()
  38          {
  39   1              //printf(" %d \r\n", (unsigned short)ucOSDType);                                        // +jwshin 120302
  40   1              if((ucOSDType <= LF_MAIN_MENU)&&(ucOSDType > OSDOFF) || (ucOSDType==SOURCE_MSG)||
  41   1              (ucOSDType==LOCK_MSG)|| (ucOSDType==BEST_MSG) || (ucOSDType==DDCCI_MSG)||(ucOSDType == POWER_ON_LOGO)){         
             -        // +jwshin 120224 POWER_ON_LOGO 추가..
  42   2      
  43   2                      if(Get_usOSDTimer_10ms() == 0){
  44   3                              if(ucOSDType == DIRECT_MENU && ucOSDLvl1_Cursor == mDirect_Source){
  45   4                                      if((ucPowerStatus & ~SoftPowerOnFlag) != ucSource){
  46   5                                              ChangeInputSource();
  47   5                                              return;
  48   5                                      }
  49   4                              }       
  50   3                              
  51   3                              OSD_OFF();
  52   3                              
  53   3                              if(bOutOfLimit){        //SHOW OUTOFRANGE AFTER SOURCE MENU TIMEOUT
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 2   

  54   4                                      bShowOutRange = FALSE;
  55   4                                      Set_usPoSvTimer(500);
  56   4                              }
  57   3                              else if(usVSync > V_UPPER_BOUND){       //BACK TO OUTOFRANGE85HZ AFTER SOURCE MENU TIMEOUT
  58   4                                      ucOSDType = OUT_RANGE2;
  59   4                              }
  60   3                      }
  61   2              }
  62   1              //-------------- +jwshin 120302
  63   1              else if(ucOSDType == POWER_ON_LOGO) {
  64   2                      if(bInSync == FALSE) {
  65   3                              //------------------ +jwshin POWER_ON_LOGO를 위한 Mode
  66   3                              if((Get_usOSD2Timer_10ms() == 0)) {
  67   4                                      OSD_OFF();
  68   4              
  69   4                                      PowerSaving();
  70   4                                      bForceToSleep= TRUE;
  71   4                              }
  72   3                              //----------------------------------
  73   3                              else if((bInSync==TRUE) && (Get_usOSD2Timer_10ms() == 0)) {                                     // +jwshin 120302   신호가 있고, OSD2Ti
             -mer가 0일 경우에는 OSD를 Off..~!
  74   4                                      OSD_OFF();
  75   4                              }
  76   3                      }
  77   2              }
  78   1              else if(ucOSDType == OUT_RANGE2){
  79   2                      if(Get_usOSDTimer_10ms() == 0){                 // show out 5 seconds
  80   3                              bShowOutRange85 = FALSE;
  81   3                              WriteIIC560(OSD_CTRL1,0x00);
  82   3      
  83   3                              if(ucOutOfRangeTimer == 0){             // last time, show NoSync and going to PowerSaving 2005-11-30 V019b1
  84   4                                      bIsFRCMode = TRUE;
  85   4                                      ShowNoSync();
  86   4                                      bShowNoSync = TRUE;
  87   4                                      ucOSDType = OUT_RANGE;
  88   4                                      Set_usWarningMsgTimer_1s(10);                           
  89   4              
  90   4                              }
  91   3                      }
  92   2                      if(Get_usWarningMsgTimer_1s() == 0){            // disappear for 60 seconds
  93   3                              ucOutOfRangeTimer--;
  94   3                              ShowOutOfRange85Hz();
  95   3                              Set_usWarningMsgTimer_1s(60);
  96   3                      }
  97   2              }
  98   1              else if(ucOSDType == OUT_RANGE){
  99   2                      if(Get_usWarningMsgTimer_1s() == 0){
 100   3                              //      DVI disable interrupt
 101   3                              if(ucSignalType == sigDVI){
 102   4                                      WriteIIC560(SYNC_INT_EN1,0x00); //disable IRQ interrupt
 103   4                                      WriteIIC560(SYNC_INT_EN2,0x00);
 104   4                                      ucCurrentDVIClk = ReadIIC560(DVI_PIXELCLK);
 105   4                                      //printf("ucCurrentDVIClk = %d\r\n",(unsigned short)ucCurrentDVIClk);
 106   4                              }
 107   3                              OSD_OFF();
 108   3      
 109   3                              PowerSaving();
 110   3      //                      ClearNewModeLED();
 111   3      //                      LED_GrnOff();                                           // -jwshin 111213
 112   3      //                      LED_RedOn();
 113   3                              bForceToSleep= TRUE;
 114   3                      }
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 3   

 115   2              }
 116   1              else if(ucIsLFDemoMode == TRUE){
 117   2                      if(ucOSDType == OSDOFF)
 118   2                              ShowLFDemoOSD();
 119   2                      else if(ucOSDType == LFDEMO){
 120   3                              
 121   3      #ifdef BF_MOVING_WINDOW
 122   3      
 123   3                              BF_MovingWindow();
 124   3      
 125   3      #else
                                      MoveLFDemoOSD();
              #endif
 128   3                      }
 129   2              }
 130   1      
 131   1      
 132   1      //      if((bPOTUpdate == TRUE) && (bFactoryMode==FALSE)){
 133   1              if(bPOTUpdate == TRUE){
 134   2                      Write24C16(EPADDR_POT_BYTE0,(unsigned char)ulPOTTimerH);//0x1a = POT byte 0
 135   2                      Write24C16(EPADDR_POT_BYTE1,(unsigned char)(ulPOTTimerH >> 8));//0x1b = POT byte 1
 136   2                      Write24C16(EPADDR_POT_15M, ucPOTTimerM_4);      //0x2d = POT_15M
 137   2                      bPOTUpdate = FALSE;
 138   2              }
 139   1      
 140   1      
 141   1              if(ucTime2Backlight == 1){      // 1: Turn ON 0: Do nothing
 142   2                      if(!IsBackLightOn()){
 143   3                      BackLightOn();
 144   3                      }
 145   2      #if 0
                      if(ucDynBKMode && (IsBackLightOn()) && (bVideoMuted == FALSE) && !bDDCCmdUpdate){
              
                                      if(Get_usBFTimer_10ms() == 0){
                                              if(ucBF_Status == 0){
                                                      ucBF_Status = 1;
                                                      BF_UpdateHistogram();
                                                      Set_usBFTimer_10ms(BF_DYNAMIC_ACC_TIME);
                                              }
                                              else if(ucBF_Status == 1){
                                                      ucBF_Status = 2;
                                                      BF_GetHistogram();
                                                      Set_usBFTimer_10ms(BF_DYNAMIC_ACC_TIME);
                                              }
                                              else{
                                                      ucBF_Status = 0;
              #ifdef BF_DYNAMIC_BACKLIGHT
                                                              BF_SetDymBacklight();
              #endif
                                                      if(ucBFMode == BF_ACC_AUTO){
                                                              unsigned char tmpReg1;
                                                              tmpReg1 = ReadIIC560(0x130);
                                                              if((tmpReg1 & BIT_1) != 0){     // WINDOW1
                                                                      BF_SetDymACEMode(0);
                                                              }
                                                      }
                                                      Set_usBFTimer_10ms(BF_DYNAMIC_ACC_TIME);
                                              }
                                      }
              
                              }       
              #else
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 4   

 177   2      
 178   2              if(ucDynBKMode && (IsBackLightOn()) && (bVideoMuted == FALSE) && !bDDCCmdUpdate){
 179   3                              if(Get_usBFTimer_10ms() > 2) BF_UpdateHistogram();
 180   3                              if((Get_usBFTimer_10ms() == 0) && !bDDCCmdUpdate)
 181   3                              //if(Get_usBFTimer_10ms() < 2)
 182   3                              {
 183   4                                      BF_GetHistogram();
 184   4                              }
 185   3      
 186   3      #ifdef BF_DYNAMIC_BACKLIGHT
 187   3                              if((ucDynBKMode == ON) && !bDDCCmdUpdate){
 188   4                                      BF_SetDymBacklight();
 189   4                              }
 190   3      #endif
 191   3                              if((Get_usBFTimer_10ms() == 0) && !bDDCCmdUpdate){
 192   4                                      if(ucBFMode == BF_ACC_AUTO){
 193   5                                              unsigned char tmpReg1;
 194   5                                              tmpReg1 = ReadIIC560(0x130);
 195   5                                              if((tmpReg1 & BIT_1) != 0)      // WINDOW1
 196   5                                              {
 197   6                                                      BF_SetDymACEMode(0);
 198   6                                              }
 199   5                                      }
 200   4                              }
 201   3      
 202   3                              if((Get_usBFTimer_10ms() == 0) && !bDDCCmdUpdate)
 203   3                              {
 204   4                                      BF_UpdateHistogram(); 
 205   4                                      BF_GetHistogram();
 206   4                                      Set_usBFTimer_10ms(BF_DYNAMIC_ACC_TIME);
 207   4                              }
 208   3      
 209   3                      }       
 210   2      #endif
 211   2              }
 212   1      
 213   1      
 214   1      
 215   1      #ifdef ENABLE_TD_               //      THEFT DETERRENCE
              //      printf("ucTD_Timeout=%d\r\n",(unsigned short)ucTD_Timeout);
                      if(((ucTD_State == TD_POSSIBLE_THEFT && ucTD_Timeout == 0) || (ucTD_State == TD_THEFT )|| (ucTD_State == 
             -TD_LOG_TIMEOUT )) && 
                              (ucOSDType != POWER_ON_LOGO) ) {
              
                              if(ucTD_State == TD_POSSIBLE_THEFT){
                                      ucTD_State = TD_THEFT;
                                      //ucTD_State = TD_LOG_TIMEOUT;
                                      Write24C16(EPADDR_TD_STATE, ucTD_State);
                              }
              
                              if(!bForceToSleep && IsBackLightOn() && (bVideoMuted == FALSE)){
              //                      printf("usPoSvTimer=%d\r\n",(unsigned short)usPoSvTimer);
                                      
                                      if(!bShowTheftOSD){
              //                              ucBrightness = MIN_BRIGHTNESS;  //DIFFERENT BANK, CAN NOT USE MCU_DataMap[EPADDR_MIN_BRIGHT];   //0x08 
             -= brightness
                                              ucBrightness = 0;       //DIFFERENT BANK, CAN NOT USE MCU_DataMap[EPADDR_MIN_BRIGHT];   //0x08 = brightness
                                              //ucSavePointer = svBRIGHTNESS;
                                              //SaveData();
              //                              ucContrast = MIN_CONTRAST;      //DIFFERENT BANK, CAN NOT USE MCU_DataMap[EPADDR_MIN_CONTRAST];         //0x09 =
             - contrast
                                              ucContrast = 0; //DIFFERENT BANK, CAN NOT USE MCU_DataMap[EPADDR_MIN_CONTRAST];         //0x09 = contrast
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 5   

                                              //ucSavePointer = svCONTRAST;
                                              //SaveData();
                                              SetBrightness();
                                              ucColorTemperature = COLOR_USER;
                                              ucR_Gain= ucR_GainUser = 0;
                                              ucG_Gain= ucG_GainUser = 0;
                                              ucB_Gain= ucB_GainUser = 0;
                                              SetContrastRGB();
              
                                              ucLFMode = LF_MODE_OFF;
                                              ucDynBKMode = 0;
                                              //ucSavePointer = svDYBK;
                                              //SaveData();
                                              //LFEnableSettings();
                                      }
              
                                      if(ucOSDType == OSDOFF || Get_usPoSvTimer() == 0)
                                              ShowTheftOSD();
                              }
                      }
              #endif
 257   1      
 258   1      
 259   1      }
 260          
 261          
 262          void LEDFlash()
 263          {
 264   1              if(bIsLEDFlashing== TRUE){      //new mode
 265   2                      if ( bGLEDState == FALSE ) {
 266   3                              LED_GrnOn();
 267   3                      }
 268   2                      else{
 269   3                              LED_GrnOff();
 270   3                      }
 271   2                      bIsLEDFlashing = FALSE;
 272   2              }
 273   1              
 274   1      /*
 275   1              if(bIsLFLEDFlashing == TRUE){   //LF demo mode
 276   1                      if ( bLFLEDState == FALSE ) {
 277   1                              LED_LF_On();
 278   1                      }
 279   1                      else{
 280   1                              LED_LF_Off();
 281   1                      }
 282   1                      bIsLFLEDFlashing = FALSE;
 283   1              }
 284   1      */
 285   1      }
 286          
 287          //---------------------- +jwshin 111213
 288          //------------- LED Flicking Routine
 289          void GrnLEDFlick()
 290          {
 291   1              if(ucNoSigTimer==0) {   
 292   2                              if(NoSigTogg) {
 293   3                                      LED_GrnOn();
 294   3                              }
 295   2                              else {
 296   3                                      LED_GrnOff();
 297   3                              }
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 6   

 298   2                              NoSigTogg ^= 1;
 299   2                              ucNoSigTimer = 100;
 300   2              }
 301   1              
 302   1      }
 303                  
 304          
 305          
 306          void Sleep(unsigned short time)
 307          {
 308   1              Set_usTimer1_1ms(time);
 309   1              while(Get_usTimer1_1ms() != 0){};
 310   1      }
 311          
 312          void Set_usTimer1_1ms(unsigned short time)
 313          {
 314   1              usTimer1_1ms = time;                    // timeout n ms
 315   1              usTimer1_1ms = time;                    // timeout n ms
 316   1      }
 317          
 318          unsigned short Get_usTimer1_1ms(void)
 319          {
 320   1      unsigned short temp1,temp2;
 321   1              do{
 322   2                      temp1 = usTimer1_1ms;
 323   2                      temp2 = usTimer1_1ms;
 324   2              }
 325   1              while(temp1 != temp2);
 326   1              return temp1;
 327   1      }
 328          
 329          void Set_usPoSvTimer(unsigned short time)
 330          {
 331   1              usPoSvTimer = time;                     // timeout n ms
 332   1              usPoSvTimer = time;                     // timeout n ms
 333   1      }
 334          
 335          unsigned short Get_usPoSvTimer(void)
 336          {
 337   1      unsigned short temp1,temp2;
 338   1              do{
 339   2                      temp1 = usPoSvTimer;
 340   2                      temp2 = usPoSvTimer;
 341   2              }
 342   1              while(temp1 != temp2);
 343   1              return temp1;
 344   1      }
 345          
 346          void Set_usWarningMsgTimer_1s(unsigned short time)
 347          {
 348   1              usWarningMsgTimer_1s = time;                    // timeout n ms
 349   1              usWarningMsgTimer_1s = time;                    // timeout n ms
 350   1      }
 351          
 352          unsigned short Get_usWarningMsgTimer_1s(void)
 353          {
 354   1      unsigned short temp1,temp2;
 355   1              do{
 356   2                      temp1 = usWarningMsgTimer_1s;
 357   2                      temp2 = usWarningMsgTimer_1s;
 358   2              }
 359   1              while(temp1 != temp2);
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 7   

 360   1              return temp1;
 361   1      }
 362          
 363          void Set_usOSDTimer_10ms(unsigned short time)
 364          {
 365   1              usOSDTimer_10ms = time;                 // timeout n ms
 366   1              usOSDTimer_10ms = time;                 // timeout n ms
 367   1      }
 368          
 369          unsigned short Get_usOSDTimer_10ms(void)
 370          {
 371   1      unsigned short temp1,temp2;
 372   1              do{
 373   2                      temp1 = usOSDTimer_10ms;
 374   2                      temp2 = usOSDTimer_10ms;
 375   2              }
 376   1              while(temp1 != temp2);
 377   1              return temp1;
 378   1      }
 379          
 380          void Set_ulPOTTimerH(unsigned long time)
 381          {
 382   1              ulPOTTimerH = time;                     // timeout n ms
 383   1              ulPOTTimerH = time;                     // timeout n ms
 384   1      }
 385          
 386          //-------------------- +jwshin 120302
 387          void Set_usOSD2Timer_10ms(unsigned short time)
 388          {
 389   1              usOSDTimer_10ms = time;                 // timeout n ms
 390   1              usOSDTimer_10ms = time;                 // timeout n ms
 391   1      }
 392          
 393          unsigned short Get_usOSD2Timer_10ms(void)
 394          {
 395   1      unsigned short temp1,temp2;
 396   1              do{
 397   2                      temp1 = usOSDTimer_10ms;
 398   2                      temp2 = usOSDTimer_10ms;
 399   2              }
 400   1              while(temp1 != temp2);
 401   1              return temp1;
 402   1      }
 403          //-----------------------------------
 404          
 405          unsigned long Get_ulPOTTimerH(void)
 406          {
 407   1      unsigned long temp1,temp2;
 408   1              do{
 409   2                      temp1 = ulPOTTimerH;
 410   2                      temp2 = ulPOTTimerH;
 411   2              }
 412   1              while(temp1 != temp2);
 413   1              return temp1;
 414   1      }
 415          
 416          void Set_usBFTimer_10ms(unsigned short time)
 417          {
 418   1              usBFTimer_10ms = time;                  // timeout n ms
 419   1              usBFTimer_10ms = time;                  // timeout n ms
 420   1      }
 421          
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 8   

 422          unsigned short Get_usBFTimer_10ms(void)
 423          {
 424   1      unsigned short temp1,temp2;
 425   1              do{
 426   2                      temp1 = usBFTimer_10ms;
 427   2                      temp2 = usBFTimer_10ms;
 428   2              }
 429   1              while(temp1 != temp2);
 430   1              return temp1;
 431   1      }
 432          
 433          
 434          
 435          
 436          
 437          
 438          
 439          
 440          
 441          
 442          
 443          
 444          /*
 445          void WriteFixString( unsigned char x, unsigned char y, unsigned char *str)
 446          {
 447                  xdata unsigned char buff[20];   
 448                  unsigned char i;
 449                  
 450          #ifdef NO_PRINT_LIB
 451                  buff[0]='n'; buff[1]='\0';
 452                  StrCat(buff,str,20);
 453          #else
 454                  sprintf( buff, "n%s", str);
 455          #endif
 456          
 457                  for ( i=0;  buff[i] != '\r' && buff[i] != '\0' && buff[i]<0x80; i++);
 458          //      for ( i=0;  buff[i] != '\r' && buff[i] != '\0'; i++)
 459          
 460                  buff[0] = i - 1;
 461          //      for ( j = i; j< 20; j++ ) buff[j] = 0;  fill 0's in remaining
 462          
 463                  ucStrAlignment = 0;
 464                  ucStrWidth = 1;
 465          
 466                  WriteArialFont(buff);   
 467                  WriteXY_String(1, x, y);
 468                  
 469          }
 470          */
 471          
 472          #ifdef NO_PRINT_LIB
              void UShortToStr(unsigned short us_value, unsigned char *str, unsigned int digit)
              {
              // us_value -> str
              // if digit = 3:   us_value = 12  then str="012"
              // if digit = 0:   us_value = 12 then str="12"
               //unsigned short rev_value =0;
               unsigned int doffset,total_len=0;
               unsigned short ustmp=us_value;
              
               
                      if (digit==0)
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 9   

                      {
                              do {
                                      total_len++;
                              }while ( (ustmp/=10)>0 );       
                      }
                      else
                      {
                              total_len = digit;
                      }
               
                      doffset = total_len;
                      do {
                              doffset--;
                              *(str+doffset) = (us_value%10) +'0';
                      }while ( (us_value/=10)>0 );
                      
                      while (doffset>0) *(str+(--doffset)) = ' ';
                      *(str+total_len)='\0';
                      
               /*
               do
                      { 
                              *str++ = (us_value%10) +'0';
                      }
                      while ( (us_value/=10)>0 );
                      *str = '\0';
                      
                      return (str= pStart);
              */      
                      
               /* 
                      do
                      {
                              rev_value = rev_value*10 + us_value%10;
                              d++;
               printf("d=%d, rev_value=%d\r\n",(unsigned short)d, (unsigned short)rev_value);
                      }
                      while ( (us_value/=10)>0 );
              
                      if ( digit != 0 )
                      {
                              d = digit -d;
                              while ( d--> 0 ) *str++ = ' ';
                      }
              
                      do
                      { 
                              *str++ = (rev_value%10) +'0';
                              printf("rev_value=%d\r\n", rev_value);
                      }
                      while ( (rev_value/=10)>0 );
                      *str = '\0';
                
                      return (str = pStart);
              */
              }
              
              void StrCat(unsigned char *p_str1,unsigned char *p_str2, unsigned int str1_len)
              {
                      unsigned char *ptmp1 = p_str1;
                      unsigned char *ptmp2 = p_str2;
                      unsigned int len = 0;
C51 COMPILER V8.12   MIS                                                                   04/16/2014 18:12:29 PAGE 10  

              
                      while ( *ptmp1++ != '\0' ) len++;
                      while ( *ptmp2++ != '\0' ) len++;
                      if ( len >str1_len-1 ) return;
              
                      ptmp1--;
                      ptmp2 = p_str2;
                      while ( (*ptmp1++ = *ptmp2++) != '\0' ) {}
              
              }
              
              /*
              unsigned char *StrCopy(char *p_to, unsigned char *p_from)
              {
                      unsigned char *pStart = p_to;
                               
                      while((*p_to++ = *p_from++ ) != '\0' ) {}
                               
                      return (p_to=pStart);
              }
              */
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    775    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE KEYPAD
OBJECT MODULE PLACED IN .\BIN\KeyPad.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SRC\KeyPad.C LARGE OPTIMIZE(9,SPEED) BROWSE DEFINE(PanelID=INL_190AW01,Mode
                    -lName=QL19W,BF_MOVING_WINDOW) DEBUG OBJECTEXTEND PRINT(.\LST\KeyPad.lst) OBJECT(.\BIN\KeyPad.obj)

line level    source

   1          #include "RAM.H"
   2          #include "sRGB.H"
   3          #include "NT686xx_MCU_REG.H"
   4          #include "NVRAM.H"
   5          #include "Scaler.H"
   6          #include "AutoAdj.H"
   7          #include "OSD.H"
   8          #include "UserAdj.H"
   9          #include "Board.H"
  10          //#include "stdio.H"
  11          #include "mis.H"
  12          #include "ddc_ci.H"
  13          #include "8051.H"       // EA
  14          #include "ROM_Map.H"
  15          #include "factory.H"
  16          #include "modehandle.H"
  17          #include "SmartBright.H"
  18          #include "NT686xx_SC_REG.H"
  19          #include "BFControl.H"
  20          #include "OSD_LF.H"
  21          #include "MCU.H"
  22          //#define KeyPadDebug
  23          
  24          #ifdef KeyPadDebug
                      #define NVTprint(s,a1) printf(s,a1)
              #else
  27                  #define NVTprint(s,a1)
  28          #endif
  29          
  30          
  31          void ScanKeyPad(void)
  32          {
  33   1      
  34   1      #define KeyTypLevel0 0x02//0x0b//0x02//0x13
  35   1      #define KeyTypLevel1 0x16//0x1e//0x2c
  36   1      #define KeyTypLevel2 0x34//0x2c//0x5b
  37   1      #define KeyTypLevel3 0x5f
  38   1      #define KeyTypLevel4 0x6f
  39   1      #define KeyTypLevel5 0x7f
  40   1      
  41   1      #define KeyMinLevel0 ((KeyTypLevel0+KeyTypLevel1)/2)                            //0x0c
  42   1      #define KeyMinLevel1 ((KeyTypLevel1+KeyTypLevel2)/2)                            //0x25                  
  43   1      #define KeyMinLevel2 ((KeyTypLevel2+KeyTypLevel3)/2)                            //0x49
  44   1      #define KeyMinLevel3 ((KeyTypLevel3+KeyTypLevel4)/2)                            //0x67
  45   1      #define KeyMinLevel4 ((KeyTypLevel4+KeyTypLevel5)/2)                            //0x77
  46   1      
  47   1      unsigned char KeyPad1,KeyPad2;
  48   1      
  49   1              Set_usTimer1_1ms(0);
  50   1              do{     
  51   2                      WaitADConversion();
  52   2      
  53   2                      KeyPad1 = Key1_Input();
  54   2                      KeyPad2 = Key2_Input();
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 2   

  55   2      
  56   2                      //------------- Power Button Check  +jwshin 120223
  57   2                      if(!(PortC & BIT_2))
  58   2                      {
  59   3                              KeyPad2 = 0x02;                 
  60   3                              //----------- +jwshin PortC의 Bit2를 검지해서, 강제로 A/D Value를 입력함.                                                       
  61   3                      }
  62   2                      
  63   2                      //------------------------ +jwshin 120223
  64   2                      if((Button_Select_A() == LOW))
  65   2                      {       
  66   3                              KeyPad1 = 0x35;
  67   3                      }
  68   2                      else if((Button_Select_B() == LOW))
  69   2                      {
  70   3                              KeyPad1 = 0x4c;
  71   3                      }
  72   2                      else
  73   2                      {}
  74   2                      //-----------------------------------------
  75   2      
  76   2      
  77   2      
  78   2                      //--------- A/D Value를 읽기위해, Routine Call..~!!!
  79   2      //              ShowOSD_Debug(KeyPad2);                         // +jwshin 110418
  80   2                      
  81   2      //      printf("1");
  82   2                      
  83   2                      
  84   2                      if(IsAC_PowerOff()){
  85   3                              bExitSysLoop = TRUE;
  86   3                              printf("LowPower\r\n");
  87   3                              return;
  88   3                      }
  89   2      
  90   2      #if _SmartBright_ == ON
                              // SmartBrightControl
                              ucBrightADC = Bright_Input();
              #if 1
                              SmartBright();
              #else           
                              if(ucBrightADC1 < ucBrightADC) ucBrightADC1=ucBrightADC;
              
                              if(++ucADCCounter > 3){ 
                                      ucBrightADC = ucBrightADC1;
                                      ucADCCounter = 0;
                                      ucBrightADC1 = 0;
                                      //printf("ucBrightADC(MAX)=%d\r\n",(unsigned short)ucBrightADC);
                                      SmartBright();
                              }
              #endif
              #endif
 107   2              
 108   2                      //printf("KeyInput=%02x,%02x\r\n",(unsigned short)KeyPad1,(unsigned short)KeyPad2);             // +jwshin 110526
 109   2              
 110   2                      ADC_CON = DEFAULT_ADC_CON;              //Channel;  // Start AD Convert
 111   2                      
 112   2                      
 113   2                      if(KeyPad1 < KeyMinLevel0)
 114   2                              KeyTemp1 = 0x01;
 115   2                      else if(KeyPad1 < KeyMinLevel1)
 116   2                              KeyTemp1 = 0x02;
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 3   

 117   2                      else if(KeyPad1 < KeyMinLevel2)
 118   2                              KeyTemp1 = 0x08;
 119   2                      //---------- +jwshin 120223     
 120   2                      else if(KeyPad1 < KeyMinLevel3)
 121   2                              KeyTemp1 = 0x09;        
 122   2                      //----------------------------  
 123   2                      else
 124   2                              KeyTemp1 = 0x00;
 125   2                              
 126   2                      if(KeyPad2 < KeyMinLevel0)
 127   2                              KeyTemp1 |= 0x10;
 128   2                      else if(KeyPad2 < KeyMinLevel1)
 129   2                              KeyTemp1 |= 0x20;
 130   2                      else if(KeyPad2 < KeyMinLevel2)
 131   2                              KeyTemp1 |= 0x30;
 132   2                      else
 133   2                              KeyTemp1 |= 0x00;
 134   2      
 135   2                      if(KeyTemp1 != KeyTemp2){
 136   3      //                      printf("KeyInput=%02x,%02x\r\n",(unsigned short)KeyPad1,(unsigned short)KeyPad2);               // +jwshin 110526
 137   3      //                      printf("KeyTemp=%02x,%02x\r\n",(unsigned short)KeyTemp1,(unsigned short)KeyTemp2);              // +jwshin 110526
 138   3                              KeyTemp2 = KeyTemp1;
 139   3                              bKeyChanged = TRUE;
 140   3                              Set_usTimer1_1ms(KEY_STABLE_TIME);
 141   3                      }
 142   2                      
 143   2                      
 144   2      #if 0
              //--------------------------------- -jwshin 111208 이 Routine은 사용하지 않음...
              //check power key
              //      -----------------------------------
              //              Power button down
                              if((GetPowerKeyStatus() == LOW)&&( bPowerKeyFlag == FALSE) ){
                                      bPowerKeyFlag = TRUE;
                                      bKeyChanged = TRUE;
                                      Set_usTimer1_1ms(KEY_STABLE_TIME);
              //                      printf("bPowerKeyFlag == TRUE\r\n");
                              }
              
              //      -----------------------------------
              //              Power button up
                      //      printf("test %x\r\n", (unsigned short)bPowerKeyFlag);
                              if((GetPowerKeyStatus() != LOW)&&(bPowerKeyFlag == TRUE)){
                                      bPowerKeyFlag = FALSE;
                                      bKeyChanged = TRUE;
                                      Set_usTimer1_1ms(KEY_STABLE_TIME);
                      //              printf("bPowerKeyFlag == FALSE\r\n");
                              }
              //---------------------------------------------------------------------------------             
              #endif
 167   2              }while(Get_usTimer1_1ms() != 0);
 168   1      
 169   1      //change key
 170   1              if(bKeyChanged == TRUE){
 171   2                      bKeyChanged = FALSE;
 172   2                      ucCurKey = KeyTemp2;
 173   2                      //--------------- +jwshin 111208
 174   2                      if(ucCurKey == FactoryKey) {
 175   3                              printf("EEPROM Init...2011.12 jwshin...\r\n");                  // +jwshin 111208
 176   3                              InitEEPROM(1);
 177   3                              ucCurKey = IGNORE_KEY;
 178   3                      }
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 4   

 179   2                      //----------------------------------------
 180   2                      
 181   2                      
 182   2                      
 183   2                      //--------------------- bPowerKeyFlag 도 사용하지 않음...
 184   2                      if(bPowerKeyFlag == TRUE){
 185   3      //                      printf("bPowerKeyFlag\r\n");
 186   3                      if((ucCurKey == FactoryKey)&&(ucPowerStatus < 0x80)){   //entry factory mode
 187   4                              FactoryEnterMode();                                                             
 188   4      #ifdef BenQ_FACTORY
                                      BenQ_EnterFactoryMode();
              #endif
 191   4      
 192   4                              }
 193   3                              ucCurKey = POWER_KEY;
 194   3                      }
 195   2                      //------------------------------------------------
 196   2                      else{
 197   3                      if((bVideoMuted == TRUE)&&(bIsBurnInEnabled == TRUE)&&(ucCurKey == QuitBurninKey)&&(bShowAging == TRUE))
             -{
 198   4                              bIsBurnInEnabled = FALSE;
 199   4                              Write24C16(EPADDR_BURNIN, bIsBurnInEnabled);//0x14 = Burn-in mode               
 200   4      //                      Write24C16(EPADDR_FACTORY, 0 );
 201   4                              ucCurKey = IGNORE_KEY;
 202   4                      } 
 203   3                      }
 204   2      
 205   2                      if ((ucCurKey == IGNORE_KEY) && (ucPrevKey == FUNC_KEY) && !bIsOSDLocked)
 206   2                              ucCurKey = LF_KEY;
 207   2      
 208   2                      if (ucOSDType == LFDEMO && ucCurKey != FUNC_KEY )
 209   2                              ucCurKey = IGNORE_KEY;
 210   2      
 211   2      #ifdef ENABLE_TD_                       //      THEFT DETERRENCE
                              if(ucTD_State == TD_THEFT){
                                      ucCurKey = IGNORE_KEY;
                              }
              #endif
 216   2      //printf("ucCurKey=%02x,%02x\r\n",(unsigned short)ucCurKey,(unsigned short)ucPrevKey);  // +jwshin 110526
 217   2                      
 218   2      // set repeat timer
 219   2                      ucPrevKey = ucCurKey;
 220   2                      if (ucCurKey == FUNC_KEY)
 221   2                              ucTime2RepeatKey = 255;
 222   2                      else
 223   2                              ucTime2RepeatKey = KEY_HOLDING_TIME;
 224   2      //release Repeat mark
 225   2              //      THEFT DETERRENCE
 226   2      //              if(ucCurKey == MENU_KEY || ucCurKey == DDCCiHotKey ||ucCurKey == TDResetKey||ucCurKey == QuickResetKey
             -)
 227   2                      if(ucCurKey == MENU_KEY || ucCurKey == DDCCiHotKey ||ucCurKey == QuickResetKey )
 228   2                      {
 229   3                              RepeatCounter = 60;
 230   3                      }
 231   2                      else if ( ucCurKey==IGNORE_KEY ){
 232   3                      }
 233   2              }
 234   1              //---------------------------------- Power Key가 On되면, 여기로 진입..~!
 235   1              else if((ucPowerStatus & SoftPowerOnFlag) !=0){ // ONLY IN DC ON
 236   2                      if(ucTime2RepeatKey == 0){
 237   3                              if((ucPrevKey == MENU_KEY)&&(bVideoMuted == FALSE)){
 238   4                                      ucTime2RepeatKey = 10;  //6 Sec
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 5   

 239   4                                      if(RepeatCounter != 0){
 240   5                                              if(--RepeatCounter == 0){
 241   6                                                      if(bIsOSDLocked == FALSE){
 242   7                                                              bIsOSDLocked = TRUE;            //change to osd lock
 243   7                                                              Write24C16(EPADDR_OSDLOCK, bIsOSDLocked);//0x05 = osd lock
 244   7                                                      }
 245   6                                                      else{
 246   7                                                              bIsOSDLocked = FALSE;           //change to osd unlock
 247   7                                                              Write24C16(EPADDR_OSDLOCK, bIsOSDLocked);//0x05 = osd lock
 248   7                                                      }
 249   6                                                      ShowOSD_Lock();
 250   6                                                      ucCurKey = IGNORE_KEY;
 251   6                                                      ucPrevKey = IGNORE_KEY;
 252   6                                              }
 253   5                                      }
 254   4                              }
 255   3      //#ifdef ENABLE_TD_                     //      THEFT DETERRENCE
 256   3                              else if((ucPrevKey == DDCCiHotKey)&&(bVideoMuted == FALSE)){
 257   4                                      ucTime2RepeatKey = 10;  //6 Sec
 258   4                                      if(RepeatCounter != 0){
 259   5                                              if(--RepeatCounter == 0){
 260   6                                                      if(bIsDDCCiSupported == FALSE){
 261   7                                                              bIsDDCCiSupported = TRUE;               //change to osd lock
 262   7                                                              Write24C16(EPADDR_DDCCI, bIsDDCCiSupported);//0x05 = osd lock
 263   7                                                              StartDDCCI();
 264   7                                                      }
 265   6                                                      else{
 266   7                                                              bIsDDCCiSupported = FALSE;              //change to osd unlock
 267   7                                                              Write24C16(EPADDR_DDCCI, bIsDDCCiSupported);//0x05 = osd lock
 268   7                                                              StopDDCCI();
 269   7                                                      }
 270   6                                                      OSD_OFF();      // RELOAD FONT AFTER SOURCE MENU
 271   6                                                      ShowDDCCiOnOff();
 272   6                                                      ucCurKey = IGNORE_KEY;
 273   6                                                      ucPrevKey = IGNORE_KEY;
 274   6                                              }
 275   5                                      }
 276   4                              }
 277   3                              else if(ucPrevKey == FUNC_KEY){
 278   4                                      ucCurKey = LF_DEMO_KEY;
 279   4                                      ucPrevKey = LF_DEMO_KEY;
 280   4                              }
 281   3                              else if(((ucOSDType >= OSDOFF)&&(ucOSDType <= DIRECT_MENU))||
 282   3                                      (ucOSDType == FACTORY) ||
 283   3                                      (ucOSDType == OUT_RANGE2)){
 284   4                                      switch(ucPrevKey){
 285   5                                      case UpKey:
 286   5                                      case DownKey:
 287   5                                              //if (ucOSDType==DIRECT_MENU&&ucOSDLvl1_Cursor == mDirect_Source) break;
 288   5      
 289   5                                              ucCurKey = ucPrevKey;
 290   5      
 291   5                                              if( ucOSDType==MAIN_MENU || ucOSDType ==SUB_MENU )
 292   5                                                      ucTime2RepeatKey = 50;
 293   5                                              else
 294   5                                                      ucTime2RepeatKey = KEY_REPEATING_TIME;
 295   5                                              break;
 296   5                                      }
 297   4                              }
 298   3                      }
 299   2              }
 300   1      }
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 6   

 301          
 302          void CheckKey(void)
 303          {
 304   1      
 305   1              ScanKeyPad();
 306   1      
 307   1      //      if ( ucCurKey == IGNORE_KEY ) return;
 308   1      //power saving
 309   1              if((ucPowerStatus & SoftPowerOnFlag) == 0){
 310   2                      if(ucCurKey == UpKey){
 311   3                              ucModeNumber = 0xff;
 312   3                      }
 313   2                      if(ucCurKey == DownKey){
 314   3                              ucModeNumber--;
 315   3                      }
 316   2                      if(ucCurKey != POWER_KEY){
 317   3                              ucCurKey = IGNORE_KEY;
 318   3                      }
 319   2              }
 320   1              else if(bIsOSDLocked && ucCurKey!=IGNORE_KEY ){
 321   2                      if(!bVideoMuted){
 322   3                              if(ucOSDType != OSDOFF )
 323   3                                      OSD_OFF();
 324   3                              else 
 325   3                                      ShowOSD_Lock();
 326   3                      }
 327   2                       ucCurKey = IGNORE_KEY;
 328   2              }
 329   1              else if((IsPanelPowerOn() == OFF)||
 330   1                      (bOutOfLimit && !(ucOSDType == DIRECT_MENU && ucOSDLvl1_Cursor == mDirect_Source)) || (bInSync == FALSE)
             -) {
 331   2      //              (bVideoMuted == TRUE)){                 // -jwshin 120228
 332   2                      
 333   2      
 334   2      
 335   2                      if(ucCurKey==INPUT_KEY && !bDCReset){
 336   3                              bForceToSleep = FALSE;
 337   3                              ScalerPowerUp();
 338   3                      
 339   3                              if(bOutOfLimit){
 340   4                                      Set_usPoSvTimer(0);     //LET ShowOutOfRangeOver() DISABLED
 341   4                              }       
 342   3                      
 343   3                              OSD_OFF();
 344   3                              bBGMode = FALSE;
 345   3                              ForceToBackground(0);
 346   3                              SourceMenu();
 347   3                              BackLightOn();
 348   3                              
 349   3                              Set_usOSDTimer_10ms(500);
 350   3                              ucPrevKey = IGNORE_KEY;
 351   3                      }
 352   2      
 353   2                      //printf("%d , %d \r\n",(unsigned short)bInSync,(unsigned short)bForceToSleep);
 354   2                      if(ucCurKey != POWER_KEY){                                              // +jwshin 120227                                                PowerSaving 모드에서 Power Key를 제외한 모든 Key
             - Disable...
 355   3                              if((bInSync==FALSE)&&(bPowerSaveFlag==FALSE)) {                                         // +jwshin 120227                                        단, No Signal 이고, PowerS
             -aving 이 아닌 상태에서는 Mode 전환 진입 허용
 356   4                              }
 357   3                              else {
 358   4                                      ucCurKey = IGNORE_KEY;
 359   4                              }
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 7   

 360   3                      }
 361   2              }
 362   1      
 363   1      //if ( ucOSDType==DIRECT_MENU&&ucOSDLvl1_Cursor == mDirect_Source )     printf("usOSDTimer_10ms=%d\r\n",usOSDT
             -imer_10ms);
 364   1      
 365   1              if(ucCurKey != IGNORE_KEY && ucCurKey !=POWER_KEY ){
 366   2                      if(ucCurKey != AUTO_KEY && usVSync > V_UPPER_BOUND && !(ucOSDType==DIRECT_MENU&&ucOSDLvl1_Cursor == mDir
             -ect_Source)){
 367   3                              //if ( bShowOutRange85 && ucCurKey== DownKey )
 368   3                              if(ucCurKey==INPUT_KEY){
 369   4                                      if(bShowOutRange85){
 370   5                                              OSD_OFF();
 371   5                                              bShowOutRange85 = FALSE;
 372   5                                      }
 373   4                              }
 374   3                              else{
 375   4                                      if(bShowOutRange85 ==  FALSE)
 376   4                                              ShowOutOfRange85Hz();
 377   4                                      ucCurKey = IGNORE_KEY;
 378   4                              }
 379   3                      }
 380   2                      else if(ucOSDType==SOURCE_MSG || ucOSDType==BEST_MSG){
 381   3                              OSD_OFF();
 382   3                              ucCurKey = IGNORE_KEY;
 383   3                      }
 384   2              }
 385   1              switch(ucCurKey){
 386   2      //      printf("%d \n",ucCurKey);                       // +jwshin 110527       
 387   2              case POWER_KEY:         //POWER
 388   2                      ucCurKey = IGNORE_KEY;
 389   2                      bShowAging = 0;
 390   2                      if((ucPowerStatus & SoftPowerOnFlag) == 0){
 391   3                              ucPowerStatus |= SoftPowerOnFlag;       //normal
 392   3                              Write24C16(EPADDR_POWER, ucPowerStatus);//0x04 = Power Status
 393   3                              bInSync = FALSE;
 394   3                              
 395   3                              if(bVideoMuted == FALSE){
 396   4                                      bVideoMuted = TRUE;
 397   4                                      Set_usPoSvTimer(500);
 398   4                              }
 399   3      
 400   3                              bBGMode = FALSE;
 401   3                              ForceToBackground(0);   //Set fource to background
 402   3                              ScalerPowerUp();
 403   3                              if(ucModeNumber == 0xfc){
 404   4      //                              LED_RedOn();                            // -jwshin 111213
 405   4                                      InitEEPROM(1);                  
 406   4                                      EA = 0;
 407   4                                      while(1){};
 408   4                              }
 409   3                              
 410   3                              ucModeNumber = 0xff;
 411   3                              
 412   3              //SLOW UP FOR BOBO
 413   3      /*              if((!bMute)&&(bStandalone == 0)){
 414   3                              if(ucVolume!=0){
 415   3                                      ucVolume = 1;
 416   3                                      SetVolume();
 417   3                              }
 418   3                      } */                                    //-jwshin 111214
 419   3      
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 8   

 420   3                              bShowDiscon = FALSE;    //clear display flag
 421   3                              bShowOutRange = FALSE;
 422   3                              bShowOutRange85 = FALSE;
 423   3                              bDCReset = TRUE;
 424   3                              //InputSourceSelect();
 425   3                              if(Read24C16(EPADDR_BURNIN) != 0){
 426   4                                      FactoryEnterMode();                     
 427   4                      #ifdef BenQ_FACTORY
                                              BenQ_EnterFactoryMode();
                              #endif                                                          
 430   4                              }
 431   3      
 432   3                              LoadModeIndependentSettings();
 433   3                              LoadFont();
 434   3      
 435   3      /*                      if(ucSource == mSource_DVI)
 436   3                                      ucPowerStatus |= InputSourceDVI;
 437   3                              else
 438   3                                      ucPowerStatus &= ~InputSourceDVI;*/
 439   3                              InputSourceSelect();                    
 440   3                      }
 441   2                  else{
 442   3                              OSD_OFF();
 443   3      
 444   3                              ucPowerStatus &= ~SoftPowerOnFlag;      //power off
 445   3                              Write24C16(EPADDR_POWER, ucPowerStatus);//0x04 = Power Status
 446   3      
 447   3                              BF_DisableWindow(BF_WINDOW_1);
 448   3                              BF_DisableWindow(BF_WINDOW_2);
 449   3      
 450   3                              if(bFactoryMode == TRUE){
 451   4                                      ReleaseFactoryMode();
 452   4                              }
 453   3                              PowerSaving();
 454   3                              WriteIIC560(DVI_CTRL15,0xb3);   // DVI Power Consumptipn 2006-03-27
 455   3                              bStatusReport = 0;      
 456   3      //                      ClearNewModeLED();
 457   3                              LED_RedOff();
 458   3                              LED_GrnOff();
 459   3                              SEL1_GrnOff();                  // +jwshin 120224
 460   3                              SEL2_GrnOff();
 461   3      
 462   3                              AUDIO_MUTE();
 463   3                              AMP_STBY();
 464   3      
 465   3                      }
 466   2                      break;
 467   2              case MENU_KEY:          //MENNU 
 468   2                      MainMenu();
 469   2                      Set_usOSDTimer_10ms((unsigned short)ucOSDTimer*100);
 470   2                      ucCurKey = IGNORE_KEY;
 471   2                      break;
 472   2              case UpKey:             //up
 473   2                      ItemUp();
 474   2                      ucCurKey = IGNORE_KEY;
 475   2                      break;
 476   2              case DownKey:           //Down
 477   2                      ItemDown();
 478   2                      ucCurKey = IGNORE_KEY;
 479   2                      break;
 480   2              case INPUT_KEY:
 481   2                      if(bFactoryMode == TRUE){
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 9   

 482   3                              if(ucOSDType==OSDOFF||ucOSDType==OUT_RANGE2){
 483   4                                      FactoryShowMenu();
 484   4                              }
 485   3                      }
 486   2                      else{
 487   3                              if(ucOSDType==OSDOFF||ucOSDType==OUT_RANGE2){
 488   4                                      OSD_OFF();
 489   4                                      SourceMenu();
 490   4                              }
 491   3                              else if((ucOSDType == DIRECT_MENU)&&(ucOSDLvl1_Cursor == mDirect_Source)){
 492   4                                      if(++ucOSDLvl2_Cursor > mSource_VIDEO )
 493   4                                              ucOSDLvl2_Cursor = mSource_VGA;
 494   4                                      SelectLFMITM();
 495   4                              }
 496   3                              else{
 497   4                                      OSD_OFF();
 498   4                              }
 499   3                              Set_usOSDTimer_10ms(500);
 500   3                      }
 501   2                      ucCurKey = IGNORE_KEY;
 502   2                      break;
 503   2              case LF_KEY:
 504   2                      if(ucOSDType == LF_MAIN_MENU){
 505   3                              LFMenuControl(LFDown);                  
 506   3                              Set_usOSDTimer_10ms(500);
 507   3                      }
 508   2                      else if(ucIsLFDemoMode == FALSE){
 509   3                              LFMenuControl(LFOpen);
 510   3                              Set_usOSDTimer_10ms(500);
 511   3                      }
 512   2                      ucCurKey = IGNORE_KEY;
 513   2                      break;
 514   2              case LF_DEMO_KEY:
 515   2      
 516   2                      if (ucOSDType == LFDEMO)
 517   2                              LFLeaveDemoMode(1);
 518   2                      else if (ucOSDType == OSDOFF)
 519   2                              LFEnterDemoMode(1);
 520   2      
 521   2                      ucCurKey = IGNORE_KEY;
 522   2                      break;
 523   2      
 524   2              case AUTO_KEY:                  //Auto
 525   2      
 526   2                      if(ucOSDType == FACTORY)                // disable AutoKey in Factory Mode
 527   2                              return;
 528   2                              
 529   2                      
 530   2                      if(ucOSDType >= MAIN_MENU &&  ucOSDType <= SHOW_SLDR){
 531   3                              ExitKey();
 532   3                              Set_usOSDTimer_10ms((unsigned short)ucOSDTimer*100);
 533   3                              break;
 534   3                      }
 535   2                      else if((ucSignalType != sigDVI)&&(ucOSDType == OSDOFF)&&(bBGMode == FALSE)){
 536   3                              LED_GrnOn();
 537   3                              OSD_OFF();
 538   3                              ShowAutoAdj();
 539   3                              AutoTune();
 540   3                              OSD_OFF();
 541   3                              if(usVSync > V_UPPER_BOUND) ucOSDType = OUT_RANGE2;
 542   3                      }
 543   2                      else if(bInSync==FALSE) {                               // +jwshin 120227 신호 없을 때...               Sync Signal이 없을 때...
C51 COMPILER V8.12   KEYPAD                                                                11/09/2015 19:43:38 PAGE 10  

 544   3                      }
 545   2                      else
 546   2                              OSD_OFF();
 547   2                      ucCurKey = IGNORE_KEY;
 548   2                      break;
 549   2                      
 550   2                      
 551   2              //-------------- +jwshin 120223
 552   2              case BUTTON_SEL_KEY_A :
 553   2                      //--------------- +jwshin 120224 Select Button A가 선택되었을 경우...
 554   2                      Button_En_SelA();
 555   2                      SEL1_GrnOn();
 556   2                      SEL2_GrnOff();
 557   2                      ShowMonSelMsg(0);
 558   2                      Write24C16(EPADDR_BUTTON_STATUS,0x01);
 559   2                      ucCurKey = IGNORE_KEY;  
 560   2                      break;
 561   2              case BUTTON_SEL_KEY_B :
 562   2                      //--------------- +jwshin 120224 Select Button B가 선택되었을 경우...
 563   2                      Button_En_SelB();
 564   2                      SEL2_GrnOn();
 565   2                      SEL1_GrnOff();
 566   2                      ShowMonSelMsg(1);
 567   2                      Write24C16(EPADDR_BUTTON_STATUS,0x00);
 568   2                      ucCurKey = IGNORE_KEY;
 569   2                      break;
 570   2              //------------------------------                
 571   2              }
 572   1      }
 573          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1361    ----
   CONSTANT SIZE    =     45    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

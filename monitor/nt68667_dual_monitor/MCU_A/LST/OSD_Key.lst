C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE OSD_KEY
OBJECT MODULE PLACED IN .\BIN\OSD_Key.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SRC\OSD_Key.c LARGE OPTIMIZE(9,SPEED) BROWSE DEFINE(PanelID=INL_190AW01,Mod
                    -elName=QL19W,BF_MOVING_WINDOW) DEBUG OBJECTEXTEND PRINT(.\LST\OSD_Key.lst) OBJECT(.\BIN\OSD_Key.obj)

line level    source

   1          #include "RAM.H"
   2          #include "OSD.H"
   3          #include "NT686xx_MCU_REG.H"
   4          #include "NT686xx_SC_REG.H"
   5          #include "Scaler.H"
   6          #include "UserAdj.H"
   7          #include "OSD_TAB.H"
   8          #include "factory.H"
   9          #include "nvram.H"
  10          #include "rom_map.H"
  11          #include "Mis.H"
  12          #include "BFControl.H"
  13          #include "smartbright.H"
  14          #if _Enable_OD_ == ON
              #include "OD.H"
              #endif
  17          
  18          code unsigned char SubItemTab[]={
  19                  mLuminance_Tint ,mPicture_VPos, mColor_User_B, mOSDSetting_OSDTimeout, mSetup_Reset
  20          };
  21          
  22          void ItemUp(void)
  23          {
  24   1      unsigned char i;
  25   1              if(ucOSDType == MAIN_MENU){
  26   2                      if(++ucOSDLvl1_Cursor > mSETUP){
  27   3                              ucOSDLvl1_Cursor = mLUMINANCE;
  28   3                      }
  29   2                      if(((ucSource == mSource_DVI)||(ucSource == mSource_HDMI))&&(ucOSDLvl1_Cursor == mPICTURE))
  30   2                              ucOSDLvl1_Cursor++;
  31   2                      SelectMainIcon();
  32   2              }
  33   1              else if(ucOSDType == SUB_MENU){
  34   2                      i = SubItemTab[ucOSDLvl1_Cursor];
  35   2                      if((bFactoryMode == TRUE)&&(ucOSDLvl1_Cursor == mLUMINANCE)){
  36   3                              i++;
  37   3                      }
  38   2                      else if((ucColorTemperature != COLOR_USER)&&(ucOSDLvl1_Cursor == mCOLOR)){
  39   3                              i = 0;
  40   3                      }
  41   2                      if(++ucOSDLvl2_Cursor > i){
  42   3                              ucOSDLvl2_Cursor = 0;
  43   3                      }
  44   2                      if((ucOSDLvl1_Cursor == mLUMINANCE)&&(ucSource < mSource_VIDEO)){
  45   3                              if(ucOSDLvl2_Cursor == mLuminance_Saturation){
  46   4                                      if(bFactoryMode == TRUE){
  47   5                                              ucOSDLvl2_Cursor = mFactory;
  48   5                                      }
  49   4                                      else{
  50   5                                              ucOSDLvl2_Cursor = mLuminance_Brightness;
  51   5                                      }
  52   4                              }
  53   3                      }
  54   2                      SelectSubItem();
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 2   

  55   2              }
  56   1              else if(ucOSDType == SHOW_SLDR){
  57   2                      switch(ucOSDLvl1_Cursor){
  58   3                      case mLUMINANCE:
  59   3                              switch(ucOSDLvl2_Cursor){
  60   4                              case mLuminance_Brightness:
  61   4                                      BrightnessUp();
  62   4                                      break;
  63   4                              case mLuminance_Contrast:
  64   4                                      ContrastUp();
  65   4                                      break;
  66   4                              case mLuminance_Saturation:
  67   4                                      SaturationUp();
  68   4                                      break;
  69   4                              case mLuminance_Tint:
  70   4                                      TintUp();
  71   4                                      break;
  72   4                              }
  73   3                              break;
  74   3                      case mPICTURE:
  75   3                              switch(ucOSDLvl2_Cursor){
  76   4                              case mPicture_Phase:
  77   4                                      PhaseUp();
  78   4                                      break;
  79   4                              case mPicture_Clock:
  80   4                                      ClockUp();
  81   4                                      break;
  82   4                              case mPicture_HPos:
  83   4                                      HP_Up();
  84   4                                      break;
  85   4                              case mPicture_VPos:
  86   4                                      VP_Up();
  87   4                                      break;
  88   4                              }
  89   3                              break;
  90   3                      case mCOLOR:
  91   3                              switch(ucOSDLvl2_Cursor){
  92   4                              case mColor_Tempk:
  93   4                                      ColorTempUp();
  94   4                                      break;
  95   4                              case mColor_User_R:
  96   4                                      ColorRedUp();
  97   4                                      break;
  98   4                              case mColor_User_G:
  99   4                                      ColorGreenUp();
 100   4                                      break;
 101   4                              case mColor_User_B:
 102   4                                      ColorBlueUp();
 103   4                                      break;
 104   4                              }
 105   3                              break;
 106   3                      case mOSDSETTING:
 107   3                              switch(ucOSDLvl2_Cursor){
 108   4                              case mOSDSetting_Horizontal:
 109   4                                      OSD_X_Up();
 110   4                                      break;
 111   4                              case mOSDSetting_Vertical:
 112   4                                      OSD_Y_Up();
 113   4                                      break;
 114   4                              case mOSDSetting_Transparency:
 115   4                                      TransparencyUp();
 116   4                                      break;
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 3   

 117   4                              case mOSDSetting_OSDTimeout:
 118   4                                      OSD_TimerUp();
 119   4                                      break;
 120   4                              }
 121   3                              break;
 122   3                      case mSETUP:
 123   3                              switch(ucOSDLvl2_Cursor){
 124   4                              case mSetup_Language:
 125   4                                      //LanguageUp();
 126   4                                      //---- -jwshin 111214   
 127   4                                      break;
 128   4                              case mSetup_AudioMute:
 129   4                                      ucOSDLvl3_Cursor ^= BIT_0;
 130   4                                      SelectYesNo();
 131   4                                      bMute = (bit)ucOSDLvl3_Cursor;
 132   4                                      if(bMute){
 133   5                                              //-------------- +jwshin 120228   음 차단을 위해, PWM Value 강제로 Write...
 134   5                                              WriteIIC560(PWM0_LCNT,0xff);
 135   5                                              WriteIIC560(PWM0_HCNT,0);
 136   5                                              //-----------------------------------
 137   5                                              AMP_STBY();
 138   5                                              AUDIO_MUTE();
 139   5                                              printf("SetVolume=MUTE\r\n");
 140   5                                      }
 141   4                                      else {
 142   5                                              //---------------- +jwshin 120228 음 차단을 위해 강제로 Write한 PWM Value를 다시 복귀...
 143   5                                              ucVolume = Read24C16(EPADDR_VOLUME);
 144   5                                              WriteIIC560(PWM0_LCNT,(255 - ((unsigned short)ucVolume * 255 / 100)));
 145   5                                              WriteIIC560(PWM0_HCNT,((unsigned short)ucVolume * 255 / 100));
 146   5                                              //---------------------------------------------
 147   5                                              AMP_On();
 148   5                                              AUDIO_On();
 149   5                                              printf("SetVolume=MUTE Off\r\n");
 150   5                                      }                               
 151   4                                      ucSavePointer = svMUTE;
 152   4                                      break;
 153   4                              case mSetup_Input:
 154   4                                      InputSourceUp();
 155   4                                      break;
 156   4                              case mSetup_DCR:
 157   4                                      ucOSDLvl3_Cursor ^= BIT_0;
 158   4                                      SelectYesNo();
 159   4                                      ucDynBKMode = ucOSDLvl3_Cursor;
 160   4                                      ucSavePointer = svDYBK;
 161   4                                      //LFEnableSettings();
 162   4                                      if((ucLFMode != LF_MODE_OFF || ucDynBKMode)){
 163   5                                              BF_DisableWindow(BF_WINDOW_2);
 164   5                                              BF_EnableWindow(BF_WINDOW_1);
 165   5                                              BF_SetActiveWindow(BF_WINDOW_1);
 166   5                                      }
 167   4                                      if(ucDynBKMode == 0){
 168   5                                              SetBrightness();
 169   5                                              iCurDynBk = ucBrightness;
 170   5                                      }
 171   4                                      break;
 172   4      #if _Enable_OD_ == ON
                                      case mSetup_OD:
                                              bSmartResponse ^= BIT_0;
                                              ucOSDLvl3_Cursor = bSmartResponse;
                                              SelectYesNo();
                                              Write24C16(EPADDR_OD_ONOFF, ucOSDLvl3_Cursor);
                                              if(ucOSDLvl3_Cursor == 0)
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 4   

                                                      DisableOD();
                                              else
                                                      EnableOD();
                                              break;
              #endif
 184   4                              case mSetup_Reset:
 185   4                                      ucOSDLvl3_Cursor ^= BIT_0;
 186   4                                      SelectYesNo();
 187   4                                      break;
 188   4                              }
 189   3                              break;
 190   3                      }
 191   2              }
 192   1              else if(ucOSDType == LF_MAIN_MENU){
 193   2                      LFMenuControl(LFUp);
 194   2              }
 195   1              else if(ucOSDType == OSDOFF){
 196   2                      //------------- -jwshin 120224    Direct Menu는 Volume만 처리한다...
 197   2                      //ShowDirectBrightnessMenu();
 198   2                      ShowDirectVolumeMenu();                         // +jwshin 120224
 199   2                      
 200   2              }
 201   1              else if(ucOSDType == DIRECT_MENU){
 202   2                      if(ucOSDLvl1_Cursor == mDirect_Source){
 203   3                              if(--ucOSDLvl2_Cursor > mSource_VIDEO)
 204   3                                      ucOSDLvl2_Cursor = mSource_VIDEO;
 205   3                              SelectLFMITM();
 206   3                      }
 207   2                      else if(ucOSDLvl1_Cursor == mDirect_Volume){
 208   3                              DirectVolumeUp();
 209   3                      }
 210   2                      else if(ucOSDLvl1_Cursor == mDirect_Brightness){
 211   3                              DirectBrightnessUp();
 212   3                      }
 213   2              }
 214   1              else if(ucOSDType == FACTORY){
 215   2                      FactoryItemUp();
 216   2              }
 217   1              //------------------- +jwshin 120228
 218   1              else if(ucOSDType == POWER_ON_LOGO) {
 219   2                      if(bInSync == TRUE) {                           // Sync Signal이 있을 경우에는 OSD_OFF() 실행...
 220   3                              OSD_OFF();
 221   3                      }
 222   2                      return;
 223   2              }
 224   1              
 225   1              if((ucOSDType == LF_MAIN_MENU)||(ucOSDType == DIRECT_MENU) || (ucOSDType == SOURCE_MSG) || (ucOSDType == 
             -POWER_ON_LOGO))                       // +jwshin 120313
 226   1              {
 227   2                      if(bInSync == FALSE) 
 228   2                      {
 229   3                              Set_usOSDTimer_10ms((unsigned short)ucOSDTimer*100);
 230   3                      }
 231   2                      else
 232   2                      {
 233   3                              Set_usOSDTimer_10ms(300);
 234   3                      }
 235   2              }
 236   1              else
 237   1              {
 238   2                      Set_usOSDTimer_10ms((unsigned short)ucOSDTimer*100);
 239   2              }
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 5   

 240   1      
 241   1      }
 242          
 243          void ItemDown(void)
 244          {
 245   1      unsigned char i;
 246   1              if(ucOSDType == MAIN_MENU){
 247   2                      if(--ucOSDLvl1_Cursor > mSETUP){
 248   3                              ucOSDLvl1_Cursor = mSETUP;
 249   3                      }
 250   2                      if(((ucSource == mSource_DVI)||(ucSource == mSource_HDMI))&&(ucOSDLvl1_Cursor == mPICTURE))
 251   2                              ucOSDLvl1_Cursor--;
 252   2                      SelectMainIcon();
 253   2              }
 254   1              else if(ucOSDType == SUB_MENU){
 255   2                      i = SubItemTab[ucOSDLvl1_Cursor];
 256   2                      if((bFactoryMode == TRUE)&&(ucOSDLvl1_Cursor == mLUMINANCE)){
 257   3                              i++;
 258   3                      }
 259   2                      else if((ucColorTemperature != COLOR_USER)&&(ucOSDLvl1_Cursor == mCOLOR)){
 260   3                              i = 0;
 261   3                      }
 262   2                      if(--ucOSDLvl2_Cursor > i){
 263   3                              ucOSDLvl2_Cursor = i;
 264   3                      }
 265   2                      if((ucOSDLvl1_Cursor == mLUMINANCE)&&(ucSource < mSource_VIDEO)){
 266   3                              if(ucOSDLvl2_Cursor == mLuminance_Tint){
 267   4                                      ucOSDLvl2_Cursor = mLuminance_Contrast;
 268   4                              }
 269   3                      }
 270   2                      SelectSubItem();
 271   2              }
 272   1              else if(ucOSDType == SHOW_SLDR){
 273   2                      switch(ucOSDLvl1_Cursor){
 274   3                      case mLUMINANCE:
 275   3                              switch(ucOSDLvl2_Cursor){
 276   4                              case mLuminance_Brightness:
 277   4                                      BrightnessDown();
 278   4                                      break;
 279   4                              case mLuminance_Contrast:
 280   4                                      ContrastDown();
 281   4                                      break;
 282   4                              case mLuminance_Saturation:
 283   4                                      SaturationDown();
 284   4                                      break;
 285   4                              case mLuminance_Tint:
 286   4                                      TintDown();
 287   4                                      break;
 288   4                              }
 289   3                              break;
 290   3                      case mPICTURE:
 291   3                              switch(ucOSDLvl2_Cursor){
 292   4                              case mPicture_Phase:
 293   4                                      PhaseDown();
 294   4                                      break;
 295   4                              case mPicture_Clock:
 296   4                                      ClockDown();
 297   4                                      break;
 298   4                              case mPicture_HPos:
 299   4                                      HP_Down();
 300   4                                      break;
 301   4                              case mPicture_VPos:
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 6   

 302   4                                      VP_Down();
 303   4                                      break;
 304   4                              }
 305   3                              break;
 306   3                      case mCOLOR:
 307   3                              switch(ucOSDLvl2_Cursor){
 308   4                              case mColor_Tempk:
 309   4                                      ColorTempDown();
 310   4                                      break;
 311   4                              case mColor_User_R:
 312   4                                      ColorRedDown();
 313   4                                      break;
 314   4                              case mColor_User_G:
 315   4                                      ColorGreenDown();
 316   4                                      break;
 317   4                              case mColor_User_B:
 318   4                                      ColorBlueDown();
 319   4                                      break;
 320   4                              }
 321   3                              break;
 322   3                      case mOSDSETTING:
 323   3                              switch(ucOSDLvl2_Cursor){
 324   4                              case mOSDSetting_Horizontal:
 325   4                                      OSD_X_Down();
 326   4                                      break;
 327   4                              case mOSDSetting_Vertical:
 328   4                                      OSD_Y_Down();
 329   4                                      break;
 330   4                              case mOSDSetting_Transparency:
 331   4                                      TransparencyDown();
 332   4                                      break;
 333   4                              case mOSDSetting_OSDTimeout:
 334   4                                      OSD_TimerDown();
 335   4                                      break;
 336   4                              }
 337   3                              break;
 338   3                      case mSETUP:
 339   3                              switch(ucOSDLvl2_Cursor){
 340   4                              case mSetup_Language:
 341   4                                      //LanguageDown();
 342   4                                      //---- -jwshin 111214
 343   4                                      break;
 344   4                              case mSetup_AudioMute:
 345   4                                      ucOSDLvl3_Cursor ^= BIT_0;
 346   4                                      SelectYesNo();
 347   4                                      bMute = (bit)ucOSDLvl3_Cursor;
 348   4                                      if(bMute){
 349   5                                              //-------------- +jwshin 120228   음 차단을 위해, PWM Value 강제로 Write...
 350   5                                              WriteIIC560(PWM0_LCNT,0xff);
 351   5                                              WriteIIC560(PWM0_HCNT,0);
 352   5                                              //-----------------------------------
 353   5                                              AUDIO_MUTE();
 354   5                                              AMP_STBY();
 355   5                                      printf("SetVolume=MUTE\r\n");
 356   5                                      }
 357   4                                      else {
 358   5                                              //---------------- +jwshin 120228 음 차단을 위해 강제로 Write한 PWM Value를 다시 복귀...
 359   5                                              ucVolume = Read24C16(EPADDR_VOLUME);
 360   5                                              WriteIIC560(PWM0_LCNT,(255 - ((unsigned short)ucVolume * 255 / 100)));
 361   5                                              WriteIIC560(PWM0_HCNT,((unsigned short)ucVolume * 255 / 100));
 362   5                                              //---------------------------------------------
 363   5                                              AMP_On();
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 7   

 364   5                                              AUDIO_On();
 365   5                                              printf("SetVolume=MUTE Off\r\n");
 366   5                                      }
 367   4                                      ucSavePointer = svMUTE;
 368   4                                      break;
 369   4                              case mSetup_Input:
 370   4                                      InputSourceDown();
 371   4                                      break;
 372   4                              case mSetup_DCR:
 373   4                                      ucOSDLvl3_Cursor ^= BIT_0;
 374   4                                      SelectYesNo();
 375   4                                      ucDynBKMode = ucOSDLvl3_Cursor;
 376   4                                      ucSavePointer = svDYBK;
 377   4                                      //LFEnableSettings();
 378   4                                      if((ucLFMode != LF_MODE_OFF || ucDynBKMode)){
 379   5                                              BF_DisableWindow(BF_WINDOW_2);
 380   5                                              BF_EnableWindow(BF_WINDOW_1);
 381   5                                              BF_SetActiveWindow(BF_WINDOW_1);
 382   5                                      }
 383   4                                      if(ucDynBKMode == 0){
 384   5                                              SetBrightness();
 385   5                                              iCurDynBk = ucBrightness;
 386   5                                      }
 387   4                                      break;
 388   4      #if _Enable_OD_ == ON
                                      case mSetup_OD:
                                              bSmartResponse ^= BIT_0;
                                              ucOSDLvl3_Cursor = bSmartResponse;
                                              SelectYesNo();
                                              Write24C16(EPADDR_OD_ONOFF, ucOSDLvl3_Cursor);
                                              if(ucOSDLvl3_Cursor == 0)
                                                      DisableOD();
                                              else
                                                      EnableOD();
                                              break;
              #endif
 400   4                              case mSetup_Reset:
 401   4                                      ucOSDLvl3_Cursor ^= BIT_0;
 402   4                                      SelectYesNo();
 403   4                                      break;
 404   4                              }
 405   3                              break;
 406   3                      }
 407   2              }
 408   1              else if(ucOSDType == LF_MAIN_MENU){
 409   2                      LFMenuControl(LFDown);
 410   2              }
 411   1              else if(ucOSDType == OSDOFF){
 412   2                      ShowDirectVolumeMenu();
 413   2              }
 414   1              else if(ucOSDType == DIRECT_MENU){
 415   2                      if(ucOSDLvl1_Cursor == mDirect_Source){
 416   3                              if(++ucOSDLvl2_Cursor > mSource_VIDEO)
 417   3                                      ucOSDLvl2_Cursor = mSource_VGA;
 418   3                              SelectLFMITM();
 419   3                      }
 420   2                      else if(ucOSDLvl1_Cursor == mDirect_Volume){
 421   3                              DirectVolumeDown();
 422   3                      }
 423   2                      else if(ucOSDLvl1_Cursor == mDirect_Brightness){
 424   3                              DirectBrightnessDown();
 425   3                      }
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 8   

 426   2              }
 427   1              //--------------- RGB Signal Switching 을 위한 Routine... +jwshin 120224
 428   1              else if(ucOSDType == POWER_ON_LOGO){
 429   2                      if(Read24C16(EPADDR_RGB_SW1)) {                 // RGB 1 일 때, RGB 2로 Change...
 430   3                              RGB_SW1_RGB2();
 431   3                              Write24C16(EPADDR_RGB_SW1,0);
 432   3                      }
 433   2                      else {                                                                                                                  // RGB 2 일 때, RGB 1으로 Change...
 434   3                              RGB_SW1_RGB1();
 435   3                              Write24C16(EPADDR_RGB_SW1,1);
 436   3                      }
 437   2                      
 438   2                      ShowSourceMsg();                                // +jwshin 120227 Mode 전환 시 화면 상태를 Display해 주기 위해... 삽입...
 439   2                      
 440   2                      if(bInSync == FALSE) {
 441   3                              Set_usOSD2Timer_10ms((unsigned short)ucOSDTimer*100);                           // +jwshin 120302
 442   3                      }
 443   2                      else {
 444   3                              Set_usOSD2Timer_10ms(300);                              // +jwshin 120302
 445   3                      }
 446   2                      ucOSDType = POWER_ON_LOGO;                // +jwshin 120227 ShowSourceMsg 이후, ucOSDType 을 POWER_ON_LOGO 모드로 전
             -환하여 Nosignal 상태에서도 안정화 될 수 있도록 조치...
 447   2                      
 448   2              }
 449   1              //----------------------------------------------
 450   1              
 451   1              else if(ucOSDType == FACTORY){
 452   2                      FactoryItemDown();
 453   2              }
 454   1      
 455   1              if((ucOSDType == LF_MAIN_MENU)||(ucOSDType == DIRECT_MENU) || (ucOSDType == SOURCE_MSG) || (ucOSDType == 
             -POWER_ON_LOGO))                       // +jwshin 120313
 456   1              {
 457   2                      if(bInSync == FALSE) 
 458   2                      {
 459   3                              Set_usOSDTimer_10ms((unsigned short)ucOSDTimer*100);
 460   3                      }
 461   2                      else
 462   2                      {
 463   3                              Set_usOSDTimer_10ms(300);
 464   3                      }
 465   2              }
 466   1              else
 467   1              {
 468   2                      Set_usOSDTimer_10ms((unsigned short)ucOSDTimer*100);
 469   2              }
 470   1      
 471   1      }
 472          
 473          
 474          void MainMenu(void)
 475          {
 476   1      //unsigned char i;
 477   1              switch(ucOSDType){
 478   2              case OSDOFF: 
 479   2                      ucOSDType = MAIN_MENU;
 480   2                      ucOSDLvl1_Cursor = 0;
 481   2                      
 482   2                      MainOSD();
 483   2                      OSD_ON();
 484   2      
 485   2                      break;
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 9   

 486   2              case MAIN_MENU:
 487   2                      ucOSDType = SUB_MENU;
 488   2                      SelectSubItem();
 489   2      
 490   2              
 491   2                      break;
 492   2              case SUB_MENU:
 493   2                      if(ucOSDLvl1_Cursor == mLUMINANCE && ucOSDLvl2_Cursor == mFactory){
 494   3                              SubIconWinOff();
 495   3                              MainIconWinOff();
 496   3                              FactoryShowMenu();
 497   3                              break;
 498   3                      }
 499   2                      else{
 500   3                              ucOSDType = SHOW_SLDR;
 501   3                              ShowAdjustMenu();
 502   3                      }
 503   2                      break;
 504   2              case SHOW_SLDR:
 505   2                      SaveData();
 506   2                      ucOSDType = SUB_MENU;
 507   2                      if(((ucOSDLvl1_Cursor == mCOLOR)&&(ucOSDLvl2_Cursor == mColor_Tempk))||(ucOSDLvl1_Cursor == mSETUP))
 508   2                              SubIconWinOff();
 509   2                      if(ucOSDLvl1_Cursor == mSETUP){
 510   3                              if(ucOSDLvl2_Cursor == mSetup_Input){
 511   4                                      if(ucSource != (ucPowerStatus & ~SoftPowerOnFlag)){
 512   5                                              ucPowerStatus = ucSource | SoftPowerOnFlag;
 513   5                                              InputSourceSelect();
 514   5                                      }
 515   4                              }
 516   3                              else if(ucOSDLvl2_Cursor == mSetup_Reset){
 517   4                                      if(ucOSDLvl3_Cursor != mNo){
 518   5                                              Recall();
 519   5                                      }
 520   4                              }
 521   3                      }
 522   2                      ShowSubMenu();
 523   2                      SelectSubItem();
 524   2                      break;
 525   2              case DIRECT_MENU:
 526   2                      if(ucOSDLvl1_Cursor == mDirect_Source){
 527   3                              if((ucPowerStatus & ~SoftPowerOnFlag) != ucSource){
 528   4                                      ChangeInputSource();
 529   4                              }
 530   3                              else{
 531   4                                      ucSource = ucOSDLvl2_Cursor;
 532   4                                      ucSavePointer = svSOURCE;
 533   4                                      OSD_OFF();
 534   4                                      
 535   4                                      if(usVSync > V_UPPER_BOUND){    //BACK TO OUTOFRANGE85HZ AFTER SOURCE MENU TIMEOUT
 536   5                                              ucOSDType = OUT_RANGE2;
 537   5                                      }
 538   4                                      else if(bOutOfLimit){   //SHOW OUTOFRANGE AFTER SOURCE MENU TIMEOUT
 539   5                                              bShowOutRange = FALSE;
 540   5                                              Set_usPoSvTimer(500);
 541   5                                      }
 542   4                              }
 543   3                      }
 544   2                      else
 545   2                              OSD_OFF();
 546   2                      break;
 547   2              case DDCCI_MSG:
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 10  

 548   2              case LOCK_MSG:
 549   2              case LF_MAIN_MENU:
 550   2                      OSD_OFF();
 551   2                      break;
 552   2              case FACTORY:
 553   2                      FactoryEnter();
 554   2                      break;
 555   2              case POWER_ON_LOGO:                                                             // +jwshin 120227 신호 없을 경우에만 .. 모드 전환 부분에서 Menu key disable...
 556   2              
 557   2      //              printf(" %d ", (unsigned short)bInSync);        
 558   2                      if(bInSync == TRUE) {                           // Sync Signal이 있을 경우에는 OSD_OFF() 실행...
 559   3                              OSD_OFF();
 560   3                      }
 561   2                      break;
 562   2              //--------------------------------      
 563   2              }
 564   1              ucCurKey = IGNORE_KEY;
 565   1      }
 566          
 567          
 568          void ExitKey()
 569          {
 570   1              switch(ucOSDType){
 571   2              case MAIN_MENU: 
 572   2                      OSD_OFF();
 573   2                      ucOSDLvl1_Cursor = 0;
 574   2                      break;
 575   2              case SUB_MENU:
 576   2                      SubIconWinOff();
 577   2                      ucOSDType = MAIN_MENU;
 578   2                      ucOSDLvl2_Cursor = 0;
 579   2                      break;
 580   2              case SHOW_SLDR:
 581   2                      SaveData();
 582   2                      ucOSDType = SUB_MENU;
 583   2                      ShowSubMenu();
 584   2                      SelectSubItem();
 585   2                      ucOSDLvl3_Cursor = 0;
 586   2                      break;
 587   2              }
 588   1              
 589   1              ucCurKey = IGNORE_KEY;
 590   1                      
 591   1      }
 592          
 593          
 594          
 595          
 596          
 597          
 598                  
 599          
 600          
 601          
 602          
 603          
 604          
 605          
 606          
 607          
 608          
 609                          
C51 COMPILER V8.12   OSD_KEY                                                               11/09/2015 19:43:39 PAGE 11  

 610                          
 611          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1881    ----
   CONSTANT SIZE    =     43    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

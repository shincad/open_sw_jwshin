#ifndef	_NVRAM_H_
#define _NVRAM_H_

#include "mydef.h"

#define EEPROM_ADDR	0xa0
//#define DDC_ADDR_ANALOG 0x600
//#define DDC_ADDR_DIGITAL 0x680
#define DDC_DELAY_TIME 50		//wait 50 * 10ms

enum _EEPROM_ADDR_ {	
	EPADDR_EMPTY0 = 0,
	EPADDR_EMPTY1,
	EPADDR_FWVER,
	EPADDR_FWREVER,
	EPADDR_POWER,
	EPADDR_OSDLOCK,
	EPADDR_OSDLANG,
	EPADDR_OSDTIMER,
	EPADDR_BRIGHT,
	EPADDR_CONTRAST,
	EPADDR_USERSTART,
	EPADDR_RSO_NOTF,
	EPADDR_INPUT_SRC,
	EPADDR_BURNIN,
	EPADDR_OSDX,
	EPADDR_OSDY,				
	
	EPADDR_SCALER_OFFSET,	// 0x10
	EPADDR_COLOR_TEMP,
	EPADDR_POT_BYTE0,
	EPADDR_POT_BYTE1,
	EPADDR_IDX,
	EPADDR_PANELID,
	EPADDR_MAX_BRIGHT,
	EPADDR_MIN_BRIGHT,
	EPADDR_MAX_CONTRAST,
	EPADDR_MID_CONTRAST,
	EPADDR_MIN_CONTRAST,
	EPADDR_BRIGHT_FACTORY,
	EPADDR_CONTRAST_FACTORY,
#if _SmartBright_==ON
	EPADDR_SMARTBRIGHT,			//
	EPADDR_BRIGHTOFFSET_HI,			//
	EPADDR_BRIGHTOFFSET_LO,		//
#else
	EPADDR_VOLUME,
	EPADDR_STANDALONE,
	EPADDR_MUTE,					
#endif	

	EPADDR_RBKOFFSET,				//0x20
	EPADDR_GBKOFFSET,
	EPADDR_BBKOFFSET,
	EPADDR_OFFSETDOWN,			//
	EPADDR_POT_15M,				//
	EPADDR_TRANSPARENCY,
	EPADDR_DDCCI,
	EPADDR_SWLOCK,
	EPADDR_GAMMA_ONOFF,
	EPADDR_LF_LUM,
	EPADDR_LF_CON,
	EPADDR_LF_CLRTEMP,
	EPADDR_DVI_LF_MODE,
	EPADDR_DSUB_LF_MODE,
	EPADDR_LF_CUS_LUM,
	EPADDR_LF_CUS_CON,
	
	EPADDR_LF_CUS_CLR,				// 0x30
	EPADDR_LF_CUS_SHP,				
	EPADDR_LF_CUS_ACC,
	EPADDR_LF_CUS_YP,
	EPADDR_BF_MODE,
	EPADDR_BF_FT_MODE,
	EPADDR_BF_FT_FT,
	EPADDR_BF_FT_GREEN,
	EPADDR_BF_FT_BLUE,
	EPADDR_OD_MODE,
	EPADDR_OD_ONOFF,
	EPADDR_LFDEMO_ONOFF,			//0x3b
	EPADDR_DYNAMIC_BKMODE,
	
//	EPADDR_SIZE_TPYE,
	EPADDR_BUTTON_STATUS,					// +jwshin 120223
//	EPADDR_PIXEL_ORBIT,
	EPADDR_RGB_SW1,							// +jwshin 120223
	EPADDR_SMART_CONTRAST,
	
	
	EPADDR_BRIGHT_USER = 0x40,
	EPADDR_CONTRAST_USER,
	EPADDR_SATURATION,
	EPADDR_TINT,
	EPADDR_BRIGHT_SRGB,
	EPADDR_CONTRAST_SRGB,
	EPADDR_BRIGHT_9300,
	EPADDR_CONTRAST_9300,
	EPADDR_RGAIN_USER,
	EPADDR_GGAIN_USER,
	EPADDR_BGAIN_USER,
	EPADDR_RGAIN_6500,
	EPADDR_GGAIN_6500,
	EPADDR_BGAIN_6500,
	EPADDR_RGAIN_SRGB,
	EPADDR_GGAIN_SRGB,
	EPADDR_BGAIN_SRGB,//0x50
	EPADDR_RGAIN_9300,
	EPADDR_GGAIN_9300,
	EPADDR_BGAIN_9300,
	EPADDR_ADCR_OFFSET,
	EPADDR_ADCG_OFFSET,
	EPADDR_ADCB_OFFSET,
	EPADDR_ADCR_GAIN,
	EPADDR_ADCG_GAIN,
	EPADDR_ADCB_GAIN,
	EPADDR_PERFECTUNE,
//	EPADDR_FACTORY,
	
	EPADDR_TD_ACMODE,
	EPADDR_TD_TIMEOUT,
	EPADDR_TD_PINCODEL1,
	EPADDR_TD_PINCODEL2,
	EPADDR_TD_PINCODEH1,
	EPADDR_TD_PINCODEH2,//0x60
	EPADDR_TD_STATE,

	EPADDR_SN0,
	EPADDR_SN1,
	EPADDR_SN2,
	EPADDR_SN3,
	EPADDR_SN4,
	EPADDR_SN5,
	EPADDR_SN6,
	EPADDR_SN7,
	EPADDR_SN8,
	EPADDR_SN9,
	EPADDR_SN10,
	EPADDR_SN11,
	EPADDR_SN12,
	EPADDR_RGB_OFFSET,
	EPADDR_RGAIN_5000,//0x70
	EPADDR_GGAIN_5000,
	EPADDR_BGAIN_5000,
	EPADDR_RGAIN_7500,
	EPADDR_GGAIN_7500,
	EPADDR_BGAIN_7500,
	EPADDR_RGAIN_8200,
	EPADDR_GGAIN_8200,
	EPADDR_BGAIN_8200,
	EPADDR_RGAIN_11500,
	EPADDR_GGAIN_11500,
	EPADDR_BGAIN_11500

};



extern code unsigned char initTab[];

unsigned char Read24C16(unsigned short addr16);
unsigned short Read24C16_Short(unsigned short addr16);
void InitEEPROM(bit );
void Write24C16(unsigned short,unsigned char);
void Write24C16_Short(unsigned short ,unsigned short);
void WritePage24C16(unsigned short,unsigned short ,unsigned char *,unsigned char);

void LoadDDCData(unsigned char ddcsw);
void SaveDDCData(unsigned char ddcsw);

void InitModeData(unsigned short mode);
void InitModeData16();
void ClearAutoAdjTag(void);
void CheckNVRAM(void);

extern void NVRAM_Init(void);
void Check_DDC_Update(void);
#if FE2P_LIB==ON
extern unsigned char FE2P_CheckValidBlock();
extern void FE2P_LoadToSram();
extern void FE2P_SaveToFlash();
extern void FE2P_Process(bit ForceUpdate);
extern void FE2P_ClearBuffer();
#endif

#endif

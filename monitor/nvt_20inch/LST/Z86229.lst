C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 1   


C51 COMPILER V7.03, COMPILATION OF MODULE Z86229
OBJECT MODULE PLACED IN .\BIN\Z86229.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SRC\Z86229.C OPTIMIZE(9,SPEED) DEFINE(X21) DEBUG OBJECTEXTEND PRINT(.\LST\Z
                    -86229.lst) OBJECT(.\BIN\Z86229.obj)

stmt level    source

   1          #include "Z86229.H"
   2          #include "MyDef.H"
   3          #include "RAM.H"
   4          #include "IIC.H"
   5          #include "stdio.h"
   6          #include "8051.H"
   7          #include "MCU.H"
   8          #include "Scaler.H"
   9          #include "F63xREG.H"
  10          #include "PANEL.H"
  11          #include "osd.h"
  12          #include "useradj.h"
  13          #include "TW990x.h"
  14          
  15          void Z86229_Init(void)
  16          {
  17   1              VChip_Data[0]=0;
  18   1              VChip_Data[1]=0;
  19   1              Non_VChip_Count =0;
  20   1              VChip_Block =0;
  21   1              VChip_Password[0]=0x0f;VChip_Password[1]=0x0f;VChip_Password[2]=0x0f;VChip_Password[3]=0x0f;
  22   1              VChip_ChangePassword[0]=0x0f;VChip_ChangePassword[1]=0x0f;VChip_ChangePassword[2]=0x0f;VChip_ChangePasswo
             -rd[3]=0x0f;
  23   1              VChip_Confirm =0;
  24   1              VChip_RatingSelected =0;
  25   1              VChip_AcquisitionMPAA =0;
  26   1              VChip_AcquisitionTV =0;
  27   1              VChip_AcquisitionTVFVVSLD =0;
  28   1              ResetPasswordBuff =0;
  29   1              ResetData[0] =0;ResetData[1] =0;ResetData[2] =0;ResetData[3] =0;ResetData[4] =0;ResetData[5] =0;
  30   1              
  31   1              /*//RESET
  32   1              Write_Z86229_1Byte(Z86229_SLAVE, 0xFB);
  33   1              Write_Z86229_1Byte(Z86229_SLAVE, 0xFC);
  34   1              Write_Z86229_1Byte(Z86229_SLAVE, 0x00);
  35   1              Sleep(10);//delay10ms();*/
  36   1      
  37   1              
  38   1      //      if(0x00 == Read24C16(0x7f0)){//caption on status
  39   1      //              SetCaptionTextDispMode(Read24C16(0x7f1));//direct write to Z86229
  40   1      //              FB_Enable();
  41   1      //              printf("SetCaptionTextDispMode ==0\r\n");
  42   1      //      }
  43   1      //      else {
  44   1      //              SetCaptionTextDispMode(0x00);//caption off
  45   1      //              FB_Disable();
  46   1      //      }
  47   1              if(0x00 < Read24C16(0x7f0)){//caption on status //Debug by Jason Choi
  48   2                      SetCaptionTextDispMode(Read24C16(0x7f1));//direct write to Z86229
  49   2                      FB_Enable();
  50   2      //              printf("SetCaptionTextDispMode =0N\r\n");
  51   2              }
  52   1              else {
  53   2                      SetCaptionTextDispMode(0x00);//caption off
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 2   

  54   2      //                              printf("SetCaptionTextDispMode =0FF\r\n");
  55   2      
  56   2                      FB_Disable();
  57   2              }
  58   1              
  59   1              if(0x00 == Read24C16(0x7f2)){
  60   2                      Write_Z86229_2Byte(Z86229_SLAVE, 0xc1, 0xC0);//for box
  61   2      //              printf("box...\r\n");
  62   2              }else{
  63   2                      Write_Z86229_2Byte(Z86229_SLAVE, 0xc1, 0xC9);//for shadow
  64   2      //              printf("shadow...\r\n");
  65   2              }
  66   1              //Write_Z86229_1Byte(Z86229_SLAVE, 0x24);//for closed-caption not erase
  67   1              //Sleep(100);//delay10ms();
  68   1              Write_Z86229_2Byte(Z86229_SLAVE, 0xC0, 0x02);//Horizontal signal source =>HIN
  69   1      
  70   1              //Write_Z86229_2Byte(Z86229_SLAVE, 0xc1, 0x92);//for box
  71   1              Write_Z86229_2Byte(Z86229_SLAVE, 0xc2, 0x29);//for Horizontal Position
  72   1      }
  73          
  74          //Caption/Text Display Mode
  75          void SetCaptionTextDispMode(unsigned char ucMode)
  76          {
  77   1              unsigned char ucCommand;
  78   1              switch ( ucMode )
  79   1              {
  80   2                      case 0x01://CC1
  81   2                              ucCommand = 0x17;
  82   2                              break;
  83   2                      case 0x02: //CC2:
  84   2                              ucCommand = 0x15;
  85   2                              break;
  86   2                      case 0x03: //CC3:
  87   2                              ucCommand = 0x1f;
  88   2                              break;
  89   2                      case 0x04: //CC4:
  90   2                              ucCommand = 0x1d;
  91   2                              break;
  92   2                              
  93   2                      case 0x05: //T1:
  94   2                              ucCommand = 0x13;
  95   2                              break;
  96   2                      case 0x06: //T2:
  97   2                              ucCommand = 0x11;
  98   2                              break;
  99   2                      case 0x07: //T3:
 100   2                              ucCommand = 0x1b;
 101   2                              break;
 102   2                      case 0x08: //T4:
 103   2                              ucCommand = 0x19;
 104   2                              break;                  
 105   2                      case 0x00: // CC_TEXT_OFF:
 106   2                      default:
 107   2                              ucCommand = 0x16;
 108   2                              break;  
 109   2              }
 110   1              Write_Z86229_1Byte(Z86229_SLAVE, ucCommand);
 111   1      //      printf("SetCaptionTextDispMode=%x\r\n",(unsigned short)ucCommand);
 112   1      }
 113          
 114          void Write_Z86229_1Byte(unsigned char device, unsigned char ucCommand)
 115          {
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 3   

 116   1              unsigned char i,SS;
 117   1              for ( i = 0; i < 10; i++) {
 118   2                      SS = Read_Z86229_1Byte(Z86229_SLAVE);
 119   2                      if ( (SS&0x80) == 0x80 ) { // RDY
 120   3                      IIC_Start();
 121   3                      WriteByte(device);
 122   3                      IIC_ACK();
 123   3                      WriteByte(ucCommand);
 124   3                      IIC_ACK();
 125   3                      IIC_Stop();
 126   3      //printf("write Z86229\r\n");
 127   3                              break;
 128   3                      }
 129   2                      Sleep(10);//delay_10ms(1);
 130   2              }
 131   1              Sleep(10);//delay_10ms(1);
 132   1      }
 133          
 134          void Check_VChip(void)
 135          {
 136   1              unsigned char SS,data1,data2;
 137   1              Write_Z86229_2Byte(Z86229_SLAVE, 0xC5, 0x61);   
 138   1              SS = Read_Z86229_1Byte(Z86229_SLAVE);
 139   1      //      printf("SS=%x\r\n",(unsigned short)SS);
 140   1              if ( (SS&0x40) == 0x40 ) { // Data is available to be read out..
 141   2                      if ( (SS&0x20) == 0x20 ) { // Check.. number of bytes available for output..
 142   3                              SS = Read_Z86229_3Byte(Z86229_SLAVE,&data1,&data2);
 143   3                              Non_VChip_Count =0;
 144   3                              if ( (data1 & 0x40) == 0x40 ){
 145   4                                      data1 &= 0x7F; data2 &= 0x7F;
 146   4                                      VChip_Data[0] = data1;
 147   4                                      VChip_Data[1] = data2;
 148   4                              }//else SetDisplayNormal();
 149   3                              if ( (SS&0x40) == 0x40 ) { // Data is available to be read out..
 150   4                                      if ( (SS&0x20) == 0x20 ){  // Check.. number of bytes available for output..
 151   5                                              Read_Z86229_3Byte(Z86229_SLAVE,&data1,&data2);
 152   5                                              data1 &= 0x7F; data2 &= 0x7F;
 153   5                                              if ( CheckSum_Z86229(data1,data2) == 0x01 ){
 154   6                                              //      printf("data1=%x,data1=%x\r\n",(unsigned short)data1,(unsigned short)data2);
 155   6                                                      if(Decision_VChip(VChip_Data[0],VChip_Data[1]) == 0x01){
 156   7                                                              Acquisition_VChipData(VChip_Data[0],VChip_Data[1]);
 157   7                                                             ForceToBackground(0,0,0);
 158   7                                                              
 159   7                                                      }else{
 160   7                                                              if(VChip_Block == 1){
 161   8                                                                      WriteIIC563(0x080,0);
 162   8                                                                      OsdInit();
 163   8                                                              }
 164   7                                                              SetDisplayNormal_Video();
 165   7                                                              VChip_Block =0;
 166   7                                                              Non_VChip_Count =0;
 167   7                                                      }
 168   6                                              }
 169   5                                      }
 170   4                              }
 171   3      
 172   3      
 173   3                      } else {
 174   3                              Read_Z86229_2Byte(Z86229_SLAVE,&data1);
 175   3                      }
 176   2              }
 177   1              else{
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 4   

 178   2                              Non_VChip_Count++;
 179   2                      }
 180   1              //return ucReturn ;
 181   1      }
 182          
 183          // Return Value : Serial Status(SS) Register 
 184          unsigned char Read_Z86229_1Byte(unsigned char device)
 185          {
 186   1      unsigned char value;
 187   1      
 188   1              IIC_Start();
 189   1              WriteByte(device+1);
 190   1              IIC_ACK();
 191   1              value=ReadByte();
 192   1              MasterNACK();
 193   1              IIC_Stop();
 194   1              return(value);
 195   1      
 196   1      //printf("Z86229=%x\r\n",(unsigned short)value);
 197   1      
 198   1      }
 199          
 200          // Return Value : Serial Status(SS) Register 
 201          unsigned char Read_Z86229_2Byte(unsigned char device,unsigned char *pData)
 202          {
 203   1      unsigned char value;
 204   1      
 205   1              IIC_Start();
 206   1              WriteByte(device+1);
 207   1              IIC_ACK();
 208   1              value=ReadByte();
 209   1              MasterACK();
 210   1              *pData=ReadByte();
 211   1              MasterNACK();
 212   1              IIC_Stop();
 213   1              return(value);
 214   1      }
 215          
 216          // Return Value : Serial Status(SS) Register 
 217          unsigned char Read_Z86229_3Byte(unsigned char device,unsigned char *pData1,unsigned char *pData2)
 218          {
 219   1      unsigned char value;
 220   1      
 221   1              IIC_Start();
 222   1              WriteByte(device+1);
 223   1              IIC_ACK();
 224   1              
 225   1              value=ReadByte();
 226   1              MasterACK();
 227   1      
 228   1              *pData1=ReadByte();
 229   1              MasterACK();
 230   1      
 231   1              *pData2=ReadByte();
 232   1              MasterNACK();
 233   1      
 234   1              IIC_Stop();
 235   1      
 236   1              return(value);
 237   1      }
 238          
 239          unsigned char CheckSum_Z86229(unsigned char data1,unsigned char data2)
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 5   

 240          {
 241   1              unsigned char Value = 0x00; // FALSE..
 242   1              unsigned int Data = 0x00;
 243   1              data1 &= 0x7F;
 244   1              data2 &= 0x7F;
 245   1                              // Checksum Validity Check..
 246   1                              Data = 0x01 + 0x05 + VChip_Data[0] + VChip_Data[1] + data1 + data2 ;
 247   1                              if ( (Data & 0x7F) == 0x00 ) Value = 0x01 ;
 248   1                              else Value = 0;
 249   1              return Value;   
 250   1      }
 251          
 252          // Return Value : 
 253          //      0x00 : Block is not necessary.
 254          //      0x01 : Block is necessary.
 255          unsigned char Decision_VChip(unsigned char data1,unsigned char data2)
 256          {
 257   1              if ( (data1 & 0x40) == 0x00 ) return 0x00; 
 258   1              switch ( data1 & 0x18 )
 259   1              {
 260   2                      case 0x00 : // MPAA
 261   2                      case 0x10 : // MPAA with EIA-608 compatibility
 262   2                              switch ( data1 & 0x07){
 263   3                                      case 0x00://N/A(Not Applicable)
 264   3                                              return 0x00; // Blocking is not necessary..
 265   3                                              break;
 266   3                                      case 0x01://MPAA_G
 267   3                                              if((Read24C16(0x7f8)&BIT_0) ==BIT_0){//MPAA_G
 268   4                                                      return 0x01;
 269   4                                              }
 270   3                                              break;
 271   3                                      case 0x02://MPAA_PG
 272   3                                              if((Read24C16(0x7f8)&BIT_1) ==BIT_1){//MPAA_PG
 273   4                                                      return 0x01;
 274   4                                              }
 275   3                                              break;
 276   3                                      case 0x03://MPAA_PG13
 277   3                                              if((Read24C16(0x7f8)&BIT_2) ==BIT_2){//MPAA_PG13
 278   4                                                      return 0x01;
 279   4                                              }
 280   3                                              break;
 281   3                                      case 0x04://MPAA_R
 282   3                                              if((Read24C16(0x7f8)&BIT_3) ==BIT_3){//MPAA_R
 283   4                                                      return 0x01;
 284   4                                              }
 285   3                                              break;
 286   3                                      case 0x05://MPAA_NC17
 287   3                                              if((Read24C16(0x7f8)&BIT_4) ==BIT_4){//MPAA_NC17
 288   4                                                      return 0x01;
 289   4                                              }
 290   3                                              break;
 291   3                                      case 0x06://MPAA_X
 292   3                                              if((Read24C16(0x7f8)&BIT_5) ==BIT_5){//MPAA_X
 293   4                                                      return 0x01;
 294   4                                              }
 295   3                                              break;
 296   3                                      case 0x07://MPAA_NR
 297   3                                              if((Read24C16(0x7f8)&BIT_6) ==BIT_6){//MPAA_NR
 298   4                                                      return 0x01;
 299   4                                              }
 300   3                                              break;
 301   3                              }
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 6   

 302   2                              break;
 303   2              }
 304   1              switch ( data1 & 0x18 )
 305   1              {
 306   2                      case 0x08 : // TV Parental Guidelines
 307   2                              switch ( data2 & 0x07){
 308   3                                      case 0x00:
 309   3                                      case 0x07:
 310   3                                              return 0x00; // Blocking is not necessary..
 311   3                                              break;
 312   3                                      case 0x01://TV-Y
 313   3                                              if((Read24C16(0x7f9)&BIT_0) ==BIT_0){//TV-Y
 314   4                                                      return 0x01;
 315   4                                              }
 316   3                                              break;
 317   3                                      case 0x02://TV-Y7
 318   3                                              if((Read24C16(0x7f9)&BIT_1) ==BIT_1){//TV-Y7
 319   4                                                      return 0x01;
 320   4                                              }
 321   3                                              if ( (data2 & 0x20) == 0x20) { // (F)V
 322   4                                                      if((Read24C16(0x7f9)&BIT_2) ==BIT_2){//TV-Y7-FV
 323   5                                                              return 0x01;
 324   5                                                      }
 325   4                                              }
 326   3                                              break;
 327   3                                      case 0x03://TV-G
 328   3                                              if((Read24C16(0x7f9)&BIT_4) ==BIT_4){//TV-G
 329   4                                                      return 0x01;
 330   4                                              }
 331   3                                              break;
 332   3                                      case 0x04://TV-PG
 333   3                                              if((Read24C16(0x7f9)&BIT_5) ==BIT_5){//TV-PG
 334   4                                                      return 0x01;
 335   4                                              }
 336   3                                              if ( (data2 & 0x20) == 0x20) { //TV-PG-V
 337   4                                                      if((Read24C16(0x7fa)&BIT_0) ==BIT_0){//TV-PG-V
 338   5                                                              return 0x01;
 339   5                                                      }
 340   4                                              }
 341   3                                              if ( (data2 & 0x10) == 0x10) { //TV-PG-S
 342   4                                                      if((Read24C16(0x7fa)&BIT_4) ==BIT_4){//TV-PG-S
 343   5                                                              return 0x01;
 344   5                                                      }
 345   4                                              }
 346   3                                              if ( (data2 & 0x08) == 0x08) { //TV-PG-L
 347   4                                                      if((Read24C16(0x7fb)&BIT_0) ==BIT_0){//TV-PG-L
 348   5                                                              return 0x01;
 349   5                                                      }
 350   4                                              }
 351   3                                              if ( (data1 & 0x20) == 0x20) { //TV-PG-D
 352   4                                                      if((Read24C16(0x7fb)&BIT_4) ==BIT_4){//TV-PG-D
 353   5                                                              return 0x01;
 354   5                                                      }
 355   4                                              }
 356   3                                              break;
 357   3                                      case 0x05://TV-14
 358   3                                              if((Read24C16(0x7f9)&BIT_6) ==BIT_6){//TV-14
 359   4                                                      return 0x01;
 360   4                                              }
 361   3                                              if ( (data2 & 0x20) == 0x20) { //TV-14-V
 362   4                                                      if((Read24C16(0x7fa)&BIT_1) ==BIT_1){//TV-14-V
 363   5                                                              return 0x01;
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 7   

 364   5                                                      }
 365   4                                              }
 366   3                                              if ( (data2 & 0x10) == 0x10) { //TV-14-S
 367   4                                                      if((Read24C16(0x7fa)&BIT_5) ==BIT_5){//TV-14-S
 368   5                                                              return 0x01;
 369   5                                                      }
 370   4                                              }
 371   3                                              if ( (data2 & 0x08) == 0x08) { //TV-14-L
 372   4                                                      if((Read24C16(0x7fb)&BIT_1) ==BIT_1){//TV-14-L
 373   5                                                              return 0x01;
 374   5                                                      }
 375   4                                              }
 376   3                                              if ( (data1 & 0x20) == 0x20) { //TV-14-D
 377   4                                                      if((Read24C16(0x7fb)&BIT_5) ==BIT_5){//TV-14-D
 378   5                                                              return 0x01;
 379   5                                                      }
 380   4                                              }
 381   3                                              break;
 382   3                                      case 0x06://TV-MA
 383   3                                              if((Read24C16(0x7f9)&BIT_7) ==BIT_7){//TV-MA
 384   4                                                      return 0x01;
 385   4                                              }
 386   3                                              if ( (data2 & 0x20) == 0x20) { //TV-MA-V
 387   4                                                      if((Read24C16(0x7fa)&BIT_2) ==BIT_2){//TV-MA-V
 388   5                                                              return 0x01;
 389   5                                                      }
 390   4                                              }
 391   3                                              if ( (data2 & 0x10) == 0x10) { //TV-MA-S
 392   4                                                      if((Read24C16(0x7fa)&BIT_6) ==BIT_6){//TV-MA-S
 393   5                                                              return 0x01;
 394   5                                                      }
 395   4                                              }
 396   3                                              if ( (data2 & 0x08) == 0x08) { //TV-MA-L
 397   4                                                      if((Read24C16(0x7fb)&BIT_2) ==BIT_2){//TV-MA-L
 398   5                                                              return 0x01;
 399   5                                                      }
 400   4                                              }
 401   3                                              break;
 402   3                              }
 403   2                              break;
 404   2              }
 405   1              return 0x00;
 406   1      }
 407          
 408          unsigned char Acquisition_VChipData(unsigned char data1,unsigned char data2)
 409          {
 410   1              if ( (data1 & 0x40) == 0x00 ) return 0x00; 
 411   1              switch ( data1 & 0x18 )
 412   1              {
 413   2                      case 0x00 : // MPAA
 414   2                      case 0x10 : // MPAA with EIA-608 compatibility
 415   2                              switch ( data1 & 0x07){
 416   3                                      case 0x00://N/A(Not Applicable)
 417   3                                              break;
 418   3                                      case 0x01://MPAA_G
 419   3                                              //if((Read24C16(0x728)&BIT_0) ==BIT_0){//MPAA_G
 420   3                                                      VChip_AcquisitionMPAA = 0x01;
 421   3                                              //}
 422   3                                              break;
 423   3                                      case 0x02://MPAA_PG
 424   3                                              //if((Read24C16(0x728)&BIT_1) ==BIT_1){//MPAA_PG
 425   3                                                      VChip_AcquisitionMPAA = 0x02;
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 8   

 426   3                                              //}
 427   3                                              break;
 428   3                                      case 0x03://MPAA_PG13
 429   3                                              //if((Read24C16(0x728)&BIT_2) ==BIT_2){//MPAA_PG13
 430   3                                                      VChip_AcquisitionMPAA = 0x03;
 431   3                                              //}
 432   3                                              break;
 433   3                                      case 0x04://MPAA_R
 434   3                                              //if((Read24C16(0x728)&BIT_3) ==BIT_3){//MPAA_R
 435   3                                                      VChip_AcquisitionMPAA = 0x04;
 436   3                                              //}
 437   3                                              break;
 438   3                                      case 0x05://MPAA_NC17
 439   3                                              //if((Read24C16(0x728)&BIT_4) ==BIT_4){//MPAA_NC17
 440   3                                                      VChip_AcquisitionMPAA = 0x05;
 441   3                                              //}
 442   3                                              break;
 443   3                                      case 0x06://MPAA_X
 444   3                                              //if((Read24C16(0x728)&BIT_5) ==BIT_5){//MPAA_X
 445   3                                                      VChip_AcquisitionMPAA = 0x06;
 446   3                                              //}
 447   3                                              break;
 448   3                                      case 0x07://MPAA_NR
 449   3                                              //if((Read24C16(0x728)&BIT_6) ==BIT_6){//MPAA_NR
 450   3                                                      VChip_AcquisitionMPAA = 0x07;
 451   3                                              //}
 452   3                                              break;
 453   3                              }
 454   2                              break;
 455   2              }
 456   1              switch ( data1 & 0x18 )
 457   1              {
 458   2                      case 0x08 : // TV Parental Guidelines
 459   2                              switch ( data2 & 0x07){
 460   3                                      case 0x00:
 461   3                                      case 0x07:
 462   3                                              return 0x00; // Blocking is not necessary..
 463   3                                              break;
 464   3                                      case 0x01://TV-Y
 465   3                                              //if((Read24C16(0x729)&BIT_0) ==BIT_0){//TV-Y
 466   3                                                      VChip_AcquisitionTV = 0x01;
 467   3                                              //}
 468   3                                              break;
 469   3                                      case 0x02://TV-Y7
 470   3                                              //if((Read24C16(0x729)&BIT_1) ==BIT_1){//TV-Y7
 471   3                                                      VChip_AcquisitionTV = 0x02;
 472   3                                              //}
 473   3                                              if ( (data2 & 0x20) == 0x20) { // (F)V
 474   4                                                      //if((Read24C16(0x729)&BIT_2) ==BIT_2){//TV-Y7-FV
 475   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_0;
 476   4                                                      //}
 477   4                                              }
 478   3                                              break;
 479   3                                      case 0x03://TV-G
 480   3                                              //if((Read24C16(0x729)&BIT_4) ==BIT_4){//TV-G
 481   3                                                      VChip_AcquisitionTV = 0x03;
 482   3                                              //}
 483   3                                              break;
 484   3                                      case 0x04://TV-PG
 485   3                                              //if((Read24C16(0x729)&BIT_5) ==BIT_5){//TV-PG
 486   3                                                      VChip_AcquisitionTV = 0x04;
 487   3                                              //}
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 9   

 488   3                                              if ( (data2 & 0x20) == 0x20) { //TV-PG-V
 489   4                                                      //if((Read24C16(0x72a)&BIT_0) ==BIT_0){//TV-PG-V
 490   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_1;
 491   4                                                      //}
 492   4                                              }
 493   3                                              if ( (data2 & 0x10) == 0x10) { //TV-PG-S
 494   4                                                      //if((Read24C16(0x72a)&BIT_4) ==BIT_4){//TV-PG-S
 495   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_2;
 496   4                                                      //}
 497   4                                              }
 498   3                                              if ( (data2 & 0x08) == 0x08) { //TV-PG-L
 499   4                                                      //if((Read24C16(0x72b)&BIT_0) ==BIT_0){//TV-PG-L
 500   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_3;
 501   4                                                      //}
 502   4                                              }
 503   3                                              if ( (data1 & 0x20) == 0x20) { //TV-PG-D
 504   4                                                      //if((Read24C16(0x72b)&BIT_4) ==BIT_4){//TV-PG-D
 505   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_4;
 506   4                                                      //}
 507   4                                              }
 508   3                                              break;
 509   3                                      case 0x05://TV-14
 510   3                                              //if((Read24C16(0x729)&BIT_6) ==BIT_6){//TV-14
 511   3                                                      VChip_AcquisitionTV = 0x05;
 512   3                                              //}
 513   3                                              if ( (data2 & 0x20) == 0x20) { //TV-14-V
 514   4                                                      //if((Read24C16(0x72a)&BIT_1) ==BIT_1){//TV-14-V
 515   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_1;
 516   4                                                      //}
 517   4                                              }
 518   3                                              if ( (data2 & 0x10) == 0x10) { //TV-14-S
 519   4                                                      //if((Read24C16(0x72a)&BIT_5) ==BIT_5){//TV-14-S
 520   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_2;
 521   4                                                      //}
 522   4                                              }
 523   3                                              if ( (data2 & 0x08) == 0x08) { //TV-14-L
 524   4                                                      //if((Read24C16(0x72b)&BIT_1) ==BIT_1){//TV-14-L
 525   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_3;
 526   4                                                      //}
 527   4                                              }
 528   3                                              if ( (data1 & 0x20) == 0x20) { //TV-14-D
 529   4                                                      //if((Read24C16(0x72b)&BIT_5) ==BIT_5){//TV-14-D
 530   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_4;
 531   4                                                      //}
 532   4                                              }
 533   3                                              break;
 534   3                                      case 0x06://TV-MA
 535   3                                              //if((Read24C16(0x729)&BIT_7) ==BIT_7){//TV-MA
 536   3                                                      VChip_AcquisitionTV = 0x06;
 537   3                                              //}
 538   3                                              if ( (data2 & 0x20) == 0x20) { //TV-MA-V
 539   4                                                      //if((Read24C16(0x72a)&BIT_2) ==BIT_2){//TV-MA-V
 540   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_1;
 541   4                                                      //}
 542   4                                              }
 543   3                                              if ( (data2 & 0x10) == 0x10) { //TV-MA-S
 544   4                                                      //if((Read24C16(0x72a)&BIT_6) ==BIT_6){//TV-MA-S
 545   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_2;
 546   4                                                      //}
 547   4                                              }
 548   3                                              if ( (data2 & 0x08) == 0x08) { //TV-MA-L
 549   4                                                      //if((Read24C16(0x72b)&BIT_2) ==BIT_2){//TV-MA-L
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 10  

 550   4                                                              VChip_AcquisitionTVFVVSLD |= BIT_3;
 551   4                                                      //}
 552   4                                              }
 553   3                                              break;
 554   3                              }
 555   2                              break;
 556   2              }
 557   1              return 0x00;
 558   1      }
 559          
 560          void Write_Z86229_2Byte(unsigned char device, unsigned char ucCommand, unsigned char wrData)
 561          {
 562   1              unsigned char i,SS;
 563   1              for ( i = 0; i < 10; i++) {
 564   2      
 565   2                      SS = Read_Z86229_1Byte(Z86229_SLAVE);
 566   2                      if ( (SS&0x80) == 0x80 ) { // RDY is Set ???
 567   3                              IIC_Delay();
 568   3                              // start bit   
 569   3                              IIC_Start();
 570   3                              // transmit data   
 571   3                              WriteByte(device);
 572   3                              IIC_ACK();
 573   3                              WriteByte(ucCommand);
 574   3                              IIC_ACK();
 575   3                              WriteByte(wrData);
 576   3                              IIC_ACK();
 577   3                              // stop bit   
 578   3                              IIC_Stop();
 579   3      //printf("write2 Z86229\r\n");
 580   3                              break;
 581   3                      }
 582   2                      //Sleep(10);//delay_10ms(1);
 583   2              }
 584   1      
 585   1      }
 586          
 587          
 588          void    GetRating(void)
 589          {
 590   1              unsigned char temp2,temp3;
 591   1              RatingMAPP = Read24C16(0x7F8);
 592   1              RatingTV = Read24C16(0x7F9);
 593   1      
 594   1              temp2 =  Read24C16(0x7FA);
 595   1              temp3 =  Read24C16(0x7FB);
 596   1              Violence = 0;
 597   1              Sexual= 0;
 598   1              Lang= 0;
 599   1              Dialogue= 0;
 600   1      
 601   1              if(RatingTV == cTV_PG){ //3 //TV-PG
 602   2                      if(temp2 & BIT_0) Violence =1;
 603   2                      if(temp2 & BIT_4) Sexual= 1;
 604   2                      if(temp3 & BIT_0) Lang= 1;
 605   2                      if(temp3 & BIT_4)       Dialogue= 1;
 606   2              }
 607   1              if(RatingTV == cTV_14){ //RatingTV = 5  //3//TV-14
 608   2                      if(temp2 & BIT_1) Violence =1;
 609   2                      if(temp2 & BIT_5) Sexual= 1;
 610   2                      if(temp3 & BIT_1) Lang= 1;
 611   2                      if(temp3 & BIT_5) Dialogue= 1;
C51 COMPILER V7.03   Z86229                                                                12/21/2006 18:12:28 PAGE 11  

 612   2              }
 613   1              if(RatingTV == cTV_MA){ //              RatingTV = 6    //3//TV-MA
 614   2                      if(temp2 & BIT_2) Violence =1;
 615   2                      if(temp2 & BIT_6) Sexual= 1;
 616   2                      if(temp3 & BIT_2) Lang= 1;
 617   2              }
 618   1              RatingTVFVVSLD= RatingTV; // make same data..
 619   1      }
 620          
 621          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1773    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

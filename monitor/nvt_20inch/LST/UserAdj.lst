C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 1   


C51 COMPILER V7.03, COMPILATION OF MODULE USERADJ
OBJECT MODULE PLACED IN .\BIN\UserAdj.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE SRC\UserAdj.C OPTIMIZE(9,SPEED) DEFINE(X21) DEBUG OBJECTEXTEND PRINT(.\LST\
                    -UserAdj.lst) OBJECT(.\BIN\UserAdj.obj)

stmt level    source

   1          #include "MATH.H"
   2          #include "F63XDEF.H"
   3          #include "UserAdj.H"
   4          #include "RAM.H"
   5          #include "IIC.H"
   6          #include "MyDef.H"
   7          #include "stdio.h"
   8          #include "Scaler.H"
   9          #include "F63XREG.H"
  10          #include "IIC.H"
  11          #include "Rom_map.H"
  12          #include "OSD_TAB.H"
  13          #include "OSD_TAB2.H"
  14          #include "sRGB.H"
  15          #include "AUTOADJ.H"
  16          #include "MODEHANDLE.H"
  17          #include "PANEL.H"
  18          #include "MCU.H"
  19          #include "TW990x.h"
  20          #include "tuner.h"
  21          //#include "SAA7114.H"
  22          
  23          //code unsigned char TDA7440D_Tab[]={
  24          //      0,1,2,3,4,5,6,7,0x0e,0x0d,0x0c,0x0b,0x0a,0x09,0x08
  25          //};
  26          
  27          void AdjustProcess(void)
  28          {
  29   1              Bit SaveFlag;
  30   1              Byte Temp,Temp1,i;
  31   1              if(MenuPtr.Op == 0)
  32   1                      return;
  33   1      //Main Menu ----------------------------------------------------------------
  34   1              SaveFlag = 0;
  35   1              if(MenuPtr.Menu == 1|| MenuPtr.Menu == 3|| MenuPtr.Menu == 5 || MenuPtr.Menu == 6)      // +jwshin 050802
  36   1                      {
  37   2                      if(MenuPtr.Level == 1|| MenuPtr.Level == 2)
  38   2                              {
  39   3                              switch(MenuPtr.Page)
  40   3                                      {
  41   4                                      case 0:
  42   4                                              if(FuncBuf[pVIDEOSOURCE]==cANALOG){
  43   5                                                      FuncPtr = Page0Item[MenuPtr.Ptr];
  44   5                                                      BackItem = Page0Item[BackPtr];
  45   5                                              }
  46   4                                              else if(FuncBuf[pVIDEOSOURCE]==cDVI){
  47   5                                                      FuncPtr = Page0ItemD[MenuPtr.Ptr];
  48   5                                                      BackItem = Page0ItemD[BackPtr];
  49   5                                              }
  50   4                                              else if(FuncBuf[pVIDEOSOURCE]==cYPbPr){
  51   5                                                      FuncPtr = Page0ItemY[MenuPtr.Ptr];
  52   5                                                      BackItem = Page0ItemY[BackPtr];
  53   5                                              }
  54   4                                              else if(FuncBuf[pVIDEOSOURCE] > cYPbPr){
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 2   

  55   5                                                      FuncPtr = Page0ItemV[MenuPtr.Ptr];
  56   5                                                      BackItem = Page0ItemV[BackPtr];
  57   5                                              }
  58   4                                              break;          
  59   4                                      case 1:
  60   4                                              FuncPtr = Page1Item[MenuPtr.Ptr];
  61   4                                              BackItem = Page1Item[BackPtr];
  62   4                                              break;          
  63   4                                      case 2:
  64   4                                              if(FuncBuf[pVIDEOSOURCE] != cTV){
  65   5                                                      FuncPtr = Page2Item[MenuPtr.Ptr];
  66   5                                                      BackItem = Page2Item[BackPtr];
  67   5                                              }
  68   4                                              else{ // TV case
  69   5                                                      FuncPtr = Page7Item[MenuPtr.Ptr];
  70   5                                                      BackItem = Page7Item[BackPtr];
  71   5                                              }
  72   4                                              break;          
  73   4                                      case 3:
  74   4                                              FuncPtr = Page3Item[MenuPtr.Ptr];
  75   4                                              BackItem = Page3Item[BackPtr];
  76   4                                              break;          
  77   4                                      case 4:
  78   4                                              FuncPtr = Page4Item[MenuPtr.Ptr];
  79   4                                              BackItem = Page4Item[BackPtr];
  80   4                                              break;          
  81   4                                      case 5:
  82   4                                              FuncPtr = Page5Item[MenuPtr.Ptr];
  83   4                                              BackItem = Page5Item[BackPtr];
  84   4                                              break;          
  85   4                                      case 6:
  86   4                                              FuncPtr = Page6Item[MenuPtr.Ptr];
  87   4                                              BackItem = Page6Item[BackPtr];
  88   4                                              break;          
  89   4                                      };
  90   3      //                      printf("FuncPtr=%d\r\n",(Word)FuncPtr);
  91   3                              }
  92   2      
  93   2                      if(BackItem == pCOLORTEMP && FuncBuf[pCOLORTEMP] == 3)  //enter RGB adjust menu
  94   2                              if(MenuPtr.Level == 2)
  95   2                                      {
  96   3      //                              BackPtr = MenuPtr.Ptr;
  97   3                                      switch(MenuPtr.Page)
  98   3                                              {
  99   4                                              case 2:
 100   4                                                      //FuncPtr = RGBmenuItem[MenuPtr.Ptr];
 101   4                                                      FuncPtr = Page2Item[MenuPtr.Ptr];
 102   4                                                      break;          
 103   4                                              };
 104   3                                      }
 105   2      
 106   2      //Digital Control
 107   2                      if(FuncPtr >= pFACTMENU)                //digital control
 108   2                              {
 109   3                              if(MenuPtr.Op == oINCVAL || MenuPtr.Op == oDECVAL)
 110   3                                      {
 111   4                                      switch(FuncPtr)
 112   4                                              {
 113   5                                              case pRECALL:
 114   5                                                      ShowYesNo(1);
 115   5                                                      Osd_Off();
 116   5                                                      Recall(1);
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 3   

 117   5                                                      //MenuPtr.Menu = 0;
 118   5                                                      //MenuPtr.Level = 0;
 119   5                                                      //MenuPtr.Ptr = 0;
 120   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG){
 121   6                                                              ShowMessage(MSG_AUTOTUNE);
 122   6                                                              AutoTune();
 123   6                                                      }
 124   5                                                              //TunePositionOnly();
 125   5                                                      break;
 126   5                                              case pMUTE:
 127   5                                                              AudioMute= ~AudioMute;
 128   5                                                              SetAudioMute();
 129   5                                                              Write24C16(ep_Status,StatusFlag);
 130   5                                                      break;
 131   5                                              case pAUTOSETTING:
 132   5                                                              AutoSetting= ~AutoSetting; 
 133   5                                                              Write24C16(ep_Status,StatusFlag);
 134   5                                                      break;
 135   5                                              case pLIGHTEN:
 136   5                                                              LightEn = ~LightEn; 
 137   5                                                              WriteIIC563(0x130, LightEn);
 138   5                                                      break;
 139   5                                              case pSCALERMODE:
 140   5                                                      ScalerMode= ~ScalerMode; 
 141   5                                                      if(FuncBuf[pVIDEOSOURCE] < cSVIDEO){
 142   6                                                              Temp1 = ReadIIC563(0x080);
 143   6                                                              WriteIIC563(0x080,Temp&(~BIT_0));
 144   6                                                              
 145   6                                                              Temp = ReadIIC563(0x16e);
 146   6                                                              WriteIIC563(0x16e,Temp&(~BIT_0));
 147   6                                                              SetScalerMode();
 148   6                                                              WaitSetup(20);
 149   6                                                              WriteIIC563(0x16e,Temp);
 150   6                                                              WriteIIC563(0x080,Temp1);
 151   6                                                      }
 152   5                                                      break;
 153   5                                              case pCHSEARCH:
 154   5      //                                                      printf("case pCHSEARCH:\r\n");
 155   5                                                              ScanChannel();
 156   5                                                              ClearLine(4);
 157   5                                                              Sleep(50);
 158   5                                                              ShowSubMenu(MenuPtr.Page,MenuPtr.Ptr);
 159   5                                                      break;
 160   5                                                      
 161   5                                              case pCHEDIT:
 162   5                                                      if(ChAdd_Del) ChAdd_Del = 0;
 163   5                                                      else ChAdd_Del = 1;
 164   5                                              
 165   5                                                      ChannelMask(ChAdd_Del);
 166   5                                                      ShowAddDel(ChAdd_Del);
 167   5      
 168   5                                                      break;
 169   5                              
 170   5                                              case pINPUT:
 171   5                                                              i = Read24C16(ep_Input_CH_Sys);
 172   5                                                              i ^= 0x80;
 173   5                                                              Write24C16(ep_Input_CH_Sys,i);
 174   5                                                              Osd_Off();
 175   5                                                              ForceToBackground(0,0,0);
 176   5                                                              Sleep(100);
 177   5                                                              ChannelSel(ChBuffer);
 178   5                                                              SetDisplayNormal_Video();
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 4   

 179   5      //                                                      printf("case pINPUT:i=%x\r\n",(Word)i);
 180   5                                                      break;
 181   5                                              case pCAPTION:
 182   5      //                                                      printf("case pCAPTION:\r\n");
 183   5                                                                      CaptionFlag= Read24C16(0x7f0);
 184   5                                                                      ShowOnOff(CaptionFlag);
 185   5                                                      //              ShowYesNo(CaptionFlag);
 186   5                                                      //              DisplayCaption(CaptionFlag);
 187   5                                                      break;  
 188   5                                              };
 189   4                                      }
 190   3                              }
 191   2      //Analog Control
 192   2                      else
 193   2                              {
 194   3                              GetFuncRange(FuncPtr);
 195   3      //                      printf("MenuPtr.Op=%d",(Word)MenuPtr.Op);
 196   3                              if(MenuPtr.Op == oDECVAL || MenuPtr.Op == oINCVAL || MenuPtr.Op == oUPDATE)
 197   3                                      {
 198   4                                      //if(FuncPtr != pVIDEOSOURCE)
 199   4                                              SetFuncMaxMin();
 200   4                                      switch(FuncPtr)
 201   4                                              {
 202   5                                              case pBRIGHTNESS:
 203   5      //                                              printf("pBRIGHTNESS\r\n");
 204   5      
 205   5                                                      if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
 206   5                                                              SetBrightness();
 207   5                                                      else
 208   5                                                              SetDecoder_Brightness();
 209   5      //                                              SaveFlag = 1;
 210   5                                                      break;
 211   5                                              case pCONTRAST:
 212   5                                                      if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
 213   5                                                              SetContrast();
 214   5                                                      else
 215   5              
 216   5                                                      SetDecoder_Contrast();
 217   5                                                      //SaveFlag = 1;
 218   5                                                      break;
 219   5                                              case pPHASE:
 220   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG)
 221   5                                                              {
 222   6                                                              SetADC_Phase();
 223   6                                                              //SaveFlag = 1;
 224   6                                                              }
 225   5                                                      break;
 226   5                                              case pCLOCK:
 227   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG)
 228   5                                                              {
 229   6                                                              SetADC_PLL();
 230   6                                                              //SaveFlag = 1;
 231   6                                                              }
 232   5                                                      break;
 233   5                                              case pBACKLIGHT:
 234   5                                                      SetInverter();
 235   5                                                      //SaveFlag = 1;
 236   5                                                      break;
 237   5                                              case pHPOSITION:
 238   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG)
 239   5                                                              {
 240   6                                                              SetHP();
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 5   

 241   6                                                              //SaveFlag = 1;
 242   6                                                              }
 243   5                                                      break;
 244   5                                              case pVPOSITION:
 245   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG)
 246   5                                                              {
 247   6                                                              SetVP();
 248   6                                                              //SaveFlag = 1;
 249   6                                                              }
 250   5                                                      break;
 251   5                                              case pOSDHPOSITION:
 252   5                                                      OsdPosition();
 253   5                                                      //SaveFlag = 1;
 254   5                                                      break;
 255   5                                              case pOSDTIMER:
 256   5                                                      //SaveFlag = 1;
 257   5                                                      break;
 258   5                                              case pSATURATION:
 259   5                                                      if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
 260   5                                                              #if ContrastBlock == BackEndGain
                                                                      sRGB((Byte)FuncBuf[pCONTRAST],(Byte)FuncBuf[pRCOLOR],(Byte)FuncBuf[pGCOLOR],(Byte)FuncBuf[pBCOLOR])
             -;
                                                                      #else
 263   5                                                              SetContrast();
 264   5                                                              #endif
 265   5                                                      else
 266   5                                                              SetDecoder_Saturation();
 267   5                                                      //SaveFlag = 1;
 268   5      //                                                      printf("pSATURATION\r\n");
 269   5      
 270   5                                                      break;
 271   5                                              case pTINT:
 272   5                                                      if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
 273   5                                                              #if ContrastBlock == BackEndGain
                                                                      sRGB((Byte)FuncBuf[pCONTRAST],(Byte)FuncBuf[pRCOLOR],(Byte)FuncBuf[pGCOLOR],(Byte)FuncBuf[pBCOLOR])
             -;
                                                                      #else
 276   5                                                              SetContrast();
 277   5                                                              #endif
 278   5                                                      else
 279   5                                                              SetDecoder_Tint();
 280   5      //                                                      printf("pTINT\r\n");
 281   5                                                      //SaveFlag = 1;
 282   5                                                      break;
 283   5                                              case pRCOLOR:
 284   5                                              case pGCOLOR:
 285   5                                              case pBCOLOR:
 286   5                                                      if(FuncBuf[pCOLORTEMP] == 3)
 287   5                                                              SetContrast();
 288   5                                                      //SaveFlag = 1;
 289   5                                                      break;
 290   5                                              case pCOLORTEMP:
 291   5                                                      LoadColor(FuncBuf[pCOLORTEMP]);
 292   5                                                      SetContrast();
 293   5                                                      SetInverter();
 294   5                                                      //SaveFlag = 1;
 295   5                                                      break;
 296   5                                              case pLANGUAGE:
 297   5                                                      if(FuncBuf[pLANGUAGE]== 5){
 298   6                                                              WriteSeqIndexPort(0xd0,tySRAM_1BIT,OneBitFontJP,45*27);
 299   6                                                              WriteSeqIndexPort(0x90,tySRAM_1BIT,OneBitFontJP2,7*27);
 300   6                                                      }
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 6   

 301   5                                                      else if((FuncBuf[pLANGUAGE] == 7)||(FuncBuf[pLANGUAGE] == 8)){
 302   6                                                              WriteSeqIndexPort(0xd0,tySRAM_1BIT,OneBitFontCH2,48*27);
 303   6                                                              WriteSeqIndexPort(0x90,tySRAM_1BIT,OneBitFontCH3,6*27);
 304   6                                                      }
 305   5                                                      else
 306   5                                                              WriteSeqIndexPort(0x90,tySRAM_1BIT,OneBitFontPY,7*27);
 307   5                                                      //SaveFlag = 1;
 308   5                                                      break;
 309   5                                              case pSHARPNESS:
 310   5                                                      if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
 311   5                                                              SetSharpness();
 312   5                                                      else
 313   5                                                              SetDecoder_Sharpness();
 314   5                                                      //SaveFlag = 1;
 315   5                                                      break;
 316   5                                              case pTRANSOSD:
 317   5                                                      SetOsdTrans();
 318   5                                                      //SaveFlag = 1;
 319   5                                                      break;
 320   5                                              case pVIDEOSOURCE:
 321   5                                                      if(MenuPtr.Level == 1)// && MenuPtr.Ptr != FuncBuf[pVIDEOSOURCE])
 322   5                                                              {
 323   6                                                              FuncBuf[pVIDEOSOURCE] = MenuPtr.Ptr;
 324   6      //                                                      printf("Video source %d\n",FuncBuf[pVIDEOSOURCE]);
 325   6                                                              Write24C16(ep_Sync_Source,FuncBuf[pVIDEOSOURCE]);
 326   6                                                              AUDIO_MUTE();
 327   6                                                              Osd_Off();
 328   6                                                              FastMuteEnable = 0;
 329   6                                                              ForceToBack = 0;
 330   6                                                              ForceToBackground(0,0,0);
 331   6                                                              BackLightOff();
 332   6      //                                                      Sleep(200);
 333   6      //                                                      printf("pVIDEOSOURCE\r\n");
 334   6                                                              //FastMuteOn();
 335   6                                                              SetSource();
 336   6                                                              MessageShow = 0;        //show msg if Video sync off
 337   6                                                              }
 338   5                                                      else
 339   5                                                              Osd_Off();
 340   5                                                      //MenuPtr.Level = 1;
 341   5                                                      break;
 342   5                                              case pVOLUME:
 343   5                                                      AudioMute = 0;
 344   5                                                      SetAudioMute();
 345   5                                                      Write24C16(ep_Status,StatusFlag);
 346   5                                                      SetAudioVolume();
 347   5                                                      //SaveFlag = 1;
 348   5                                                      break;
 349   5                                              case pLIGHTBRIGHT:
 350   5                                                      SetLightBrightness();
 351   5                                                      break;
 352   5                                              case pLIGHTCONTRAST:
 353   5                                                      SetLightContrast();
 354   5                                                      break;
 355   5                                              case pLIGHTHSTART:
 356   5                                                      SetLightHS();
 357   5                                                      break;
 358   5                                              case pLIGHTHWIDTH:
 359   5                                                      SetLightHW();
 360   5                                                      break;
 361   5                                              case pLIGHTVSTART:
 362   5                                                      SetLightVS();
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 7   

 363   5                                                      break;
 364   5                                              case pLIGHTVHIGHT:
 365   5                                                      SetLightVH();
 366   5                                                      break;
 367   5      
 368   5                                              case pCHFINETUNE:
 369   5      //                                                      printf("case pCHFINETUNE:\r\n");
 370   5      //                                                      SetFuncMaxMin();
 371   5      //      printf("FuncBuf[pCHFINETUNE]3=0x%x\r\n",FuncBuf[pCHFINETUNE]);
 372   5                                                              SetFineTune();
 373   5                                                      break;
 374   5                                              case pBass:
 375   5                                                              SetBass();
 376   5                                                      break;
 377   5                                              case pTreble:
 378   5                                                              SetTreble();
 379   5      //                                              AudioMute = 0;
 380   5      //                                              SetAudioMute();
 381   5      //                                              Write24C16(ep_Status,StatusFlag);
 382   5      //                                              SetAudioVolume();
 383   5                                                      break;
 384   5              
 385   5      
 386   5                                              };
 387   4                                      SaveFlag = 1;
 388   4                                      }
 389   3                              else
 390   3                                      if(MenuPtr.Op == oINCFUNC || MenuPtr.Op == oDECFUNC)
 391   3                                              {
 392   4                                              switch(FuncPtr)
 393   4                                                      {
 394   5                                                      case pVIDEOSOURCE:
 395   5                                                              GetFuncRange(FuncPtr);
 396   5                                                              SetFuncMaxMin();
 397   5                                                              break;
 398   5                                                      };
 399   4                                              }
 400   3                              }
 401   2                      if(SaveFlag)
 402   2                              {
 403   3                              SavePointer = FuncPtr;
 404   3                              SaveTimer = SAVE_FUNC_TIME;
 405   3                              }
 406   2                      }
 407   1      //Factory Menu -----------------------------------------------------------
 408   1              if(MenuPtr.Menu == 2)   //fact menu
 409   1                      {
 410   2                      //if(MenuPtr.Level == 1)
 411   2                              //FuncPtr = FactmenuItem[MenuPtr.Ptr];
 412   2                              FuncPtr = FactItem[MenuPtr.Ptr].Index;
 413   2                      if(FuncPtr >= pFACTMENU)                //digital control
 414   2                              {
 415   3                              if(/*MenuPtr.Op == oINCVAL || MenuPtr.Op == oDECVAL || */MenuPtr.Op == oENTER)
 416   3                                      {
 417   4                                      switch(FuncPtr)
 418   4                                              {
 419   5                                              case pAUTOCOLOR:
 420   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG)
 421   5                                                              {
 422   6                                                              Osd_Off();
 423   6                                                              ShowMessage(MSG_AUTOCOLOR);
 424   6                                                              AutoColor();
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 8   

 425   6                                                              Osd_Off();
 426   6                                                              MenuPtr.Menu = 2;
 427   6                                                              MenuPtr.Ptr = 0;
 428   6                                                              MenuPtr.Page = 0;
 429   6                                                              MenuPtr.Level = 0;
 430   6                                                              MenuPtr.Op = oUPDATEALL;
 431   6                                                              }
 432   5                                                      break;
 433   5                                              case pEEPROMINIT:
 434   5                                                      Osd_Off();
 435   5                                                      ShowMessage(MSG_EEPROMINIT);
 436   5                                                      InitEEPROM();
 437   5                                                      Recall(1);
 438   5                                                      LoadADC_Gain();
 439   5                                                      Osd_Off();
 440   5                                                      MenuPtr.Menu = 2;
 441   5                                                      MenuPtr.Ptr = 1;
 442   5                                                      MenuPtr.Page = 0;
 443   5                                                      MenuPtr.Level = 0;
 444   5                                                      MenuPtr.Op = oUPDATEALL;
 445   5                                                      break;
 446   5                                              case pAUTOADJUST:       //lo_cs
 447   5                                                      if(FuncBuf[pVIDEOSOURCE] == cANALOG)
 448   5                                                              {
 449   6                                                              Osd_Off();
 450   6                                                              ShowMessage(MSG_AUTOTUNE);
 451   6                                                              AutoTune();     
 452   6                                                              Osd_Off();
 453   6                                                              MenuPtr.Menu = 2;
 454   6                                                              MenuPtr.Ptr = 0;
 455   6                                                              MenuPtr.Page = 0;
 456   6                                                              MenuPtr.Level = 0;
 457   6                                                              MenuPtr.Op = oUPDATEALL;
 458   6                                                              }
 459   5                                                      break;
 460   5                                              };
 461   4                                      }
 462   3                              }
 463   2                      else
 464   2                              {
 465   3                              GetFuncRange(FuncPtr);
 466   3                              if(MenuPtr.Op == oDECVAL || MenuPtr.Op == oINCVAL)
 467   3                                      {
 468   4                                      SetFuncMaxMin();
 469   4                                      switch(FuncPtr)
 470   4                                              {
 471   5                                              case pBRIGHTNESS:
 472   5                                                      SetBrightness();
 473   5                                                      //SaveFlag = 1;
 474   5                                                      break;
 475   5                                              case pRCOLOR:
 476   5                                              case pGCOLOR:
 477   5                                              case pBCOLOR:
 478   5                                                      //FuncBuf[pCOLORTEMP] = (MenuPtr.Ptr - 9)/3;
 479   5                                                      //LoadColor(FuncBuf[pCOLORTEMP]);
 480   5                                                      //GetFuncRange(FuncPtr);
 481   5                                                      SetContrast();
 482   5                                                      //SaveFlag = 1;
 483   5                                                      break;
 484   5                                              case pBACKLIGHT:
 485   5                                                      SetInverter();
 486   5                                                      //SaveFlag = 1;
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 9   

 487   5                                                      break;
 488   5                                              case pRADC:
 489   5                                                      SetADCGain(pRADC);
 490   5                                                      //SaveFlag = 1;
 491   5                                                      break;
 492   5                                              case pGADC:
 493   5                                                      SetADCGain(pGADC);
 494   5                                                      //SaveFlag = 1;
 495   5                                                      break;
 496   5                                              case pBADC:
 497   5                                                      SetADCGain(pBADC);
 498   5                                                      //SaveFlag = 1;
 499   5                                                      break;
 500   5                                              case pROFFSET:
 501   5                                                      SetADCOffset(pROFFSET);
 502   5                                                      //SaveFlag = 1;
 503   5                                                      break;
 504   5                                              case pGOFFSET:
 505   5                                                      SetADCOffset(pGOFFSET);
 506   5                                                      //SaveFlag = 1;
 507   5                                                      break;
 508   5                                              case pBOFFSET:
 509   5                                                      SetADCOffset(pBOFFSET);
 510   5                                                      //SaveFlag = 1;
 511   5                                                      break;
 512   5                                              case pVCMVOL:
 513   5                                                      SetVCM_Vol();
 514   5                                                      //SaveFlag = 1;
 515   5                                                      break;
 516   5                                              case pCONTRAST:
 517   5                                                      SetContrast();
 518   5                                                      //SaveFlag = 1;
 519   5                                                      break;
 520   5                                              case pContMax:
 521   5                                              case pContMin:
 522   5                                              case pBrigMax:
 523   5                                              case pBrigMin:
 524   5                                                      //SaveFlag = 1;
 525   5                                                      break;
 526   5                                              };
 527   4                                      SaveFlag = 1;
 528   4                                      SavePointer = FuncPtr;
 529   4                                      SaveTimer = SAVE_FUNC_TIME;
 530   4                                      }
 531   3                              else
 532   3                                      if(MenuPtr.Op == oINCFUNC || MenuPtr.Op == oDECFUNC)
 533   3                                      {
 534   4                                              switch(FuncPtr)
 535   4                                              {
 536   5                                                      case pRCOLOR:
 537   5                                                      case pGCOLOR:
 538   5                                                      case pBCOLOR:
 539   5                                                              FuncBuf[pCOLORTEMP] = (MenuPtr.Ptr - 11)/3;
 540   5                                                              LoadColor(FuncBuf[pCOLORTEMP]);
 541   5                                                              SetContrast();
 542   5                                                              break;
 543   5                                                      default:
 544   5                                                              FuncBuf[pCOLORTEMP] = 3;
 545   5                                                              LoadColor(FuncBuf[pCOLORTEMP]);
 546   5                                                              SetContrast();
 547   5                                                              break;
 548   5                                              };
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 10  

 549   4                                      }
 550   3                              }
 551   2                      }
 552   1              //Trubo Menu -----------------------------------------------------------
 553   1                      if(MenuPtr.Menu == 4 && MenuPtr.Level == 1)     //fact menu
 554   1                              {
 555   2                              if(EconomyMode){
 556   3                                      TextMode = 0; 
 557   3                                      EconomyMode =~EconomyMode;
 558   3                                      FuncBuf[pBACKLIGHT] = 0x7f;
 559   3                              }
 560   2                              else
 561   2                              {
 562   3                                      if(TextMode)
 563   3                                      {
 564   4                                              EconomyMode = 1;
 565   4                                              FuncBuf[pBACKLIGHT] = 0x2e;
 566   4                                      }
 567   3                                      else{
 568   4                                              EconomyMode = 0;
 569   4                                              TextMode = ~TextMode; 
 570   4                                              FuncBuf[pBACKLIGHT] = 0x49;
 571   4                                      }
 572   3                              }
 573   2                              SetInverter();
 574   2                              Write24C16(ep_Status,StatusFlag);
 575   2                              Write24C16(ep_BackLight,(Byte)FuncBuf[pBACKLIGHT]);
 576   2                              }
 577   1              
 578   1      }
 579          
 580          void SetFuncMaxMin()
 581          {
 582   1              Byte code PolTab[7]={oINCVAL,oDECVAL,oDECVAL,oINCVAL,oINCFUNC,oDECFUNC,oUPDATE};
 583   1              Byte Polary,Units;
 584   1              bit Type;
 585   1              Word Min,Max;
 586   1              if((FuncPtr >= pFACTMENU)&&(FuncPtr != pCHSEARCH)&&(FuncPtr != pCHEDIT)&&
 587   1                         (FuncPtr != pCHFINETUNE)&&(FuncPtr != pINPUT))
 588   1                      return;
 589   1              Type = 0;
 590   1              switch(FuncPtr)
 591   1                      {
 592   2                      case pHPOSITION:
 593   2      // Jacky 0201 removed
 594   2      //              case pOSDVPOSITION:
 595   2                              Max = FuncMax;  //limited
 596   2                              Min = FuncMin;
 597   2                              Polary = 2;
 598   2                              Units = 1;
 599   2                              break;
 600   2                      case pVIDEOSOURCE:      //cycle
 601   2                              Type = 1;
 602   2                              Max = FuncMax;
 603   2                              Min = FuncMin;
 604   2                              Polary = 6;
 605   2                              Units = 1;
 606   2                              break;
 607   2                      case pCOLORTEMP:
 608   2                      case pOSDHPOSITION:
 609   2                      case pLANGUAGE:
 610   2                      //case pSHARPNESS:
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 11  

 611   2                      //case pVCMVOL:
 612   2                              Max = FuncMin;
 613   2                              Min = FuncMax;
 614   2                              Polary = 0;
 615   2                              Units = 1;
 616   2                              break;
 617   2      //              case pVOLUME:
 618   2      //              case pBass:
 619   2      //              case pTreble:   
 620   2                      case pOSDTIMER:
 621   2                              Max = FuncMax;
 622   2                              Min = FuncMin;
 623   2                              Polary = 0;
 624   2                              Units = 5;
 625   2                              break;
 626   2                      case pCHFINETUNE:
 627   2                              Type = 0;
 628   2                              Max = 100;
 629   2                              Min = 0;
 630   2                              Polary = 0;
 631   2                              Units = 1;
 632   2                              break;
 633   2                      default:
 634   2                              Max = FuncMax;
 635   2                              Min = FuncMin;
 636   2                              Polary = 0;
 637   2                              Units = 1;
 638   2                              break;
 639   2                      };
 640   1              if(!Type)
 641   1                      {
 642   2      //              printf("Adjust1!!!!\r\n");
 643   2                      if(MenuPtr.Op == PolTab[Polary])
 644   2                              {
 645   3      //              printf("Adjust3!FuncMax=0x%x,FuncBuf[FuncPtr]=0x%x\r\n",FuncMax,FuncBuf[FuncPtr]);
 646   3                              if(FuncBuf[FuncPtr] < FuncMax && (FuncBuf[FuncPtr] + Units) <= FuncMax)
 647   3                                      FuncBuf[FuncPtr] = FuncBuf[FuncPtr] + Units;
 648   3                                      //FuncBuf[FuncPtr]++;
 649   3                              else
 650   3                                      FuncBuf[FuncPtr] = Max;
 651   3                              }
 652   2                      if(MenuPtr.Op == PolTab[Polary+1])
 653   2                              {
 654   3      //              printf("Adjust4!!!!\r\n");
 655   3                              if(FuncBuf[FuncPtr] > FuncMin && FuncBuf[FuncPtr] >= Units)
 656   3                                      FuncBuf[FuncPtr] = FuncBuf[FuncPtr] - Units;
 657   3                                      //FuncBuf[FuncPtr]--;
 658   3                              else
 659   3                                      FuncBuf[FuncPtr] = Min;
 660   3                              }
 661   2      //                      printf("FuncBuf[FuncPtr]=0x%x\r\n",FuncBuf[FuncPtr]);
 662   2                      
 663   2                      }
 664   1              else
 665   1              {
 666   2      //              printf("Adjust2!!!\r\n");
 667   2                      if(MenuPtr.Op == PolTab[Polary])
 668   2                              {
 669   3                              if(VideoSourcePtr< FuncMax)
 670   3                                      VideoSourcePtr++;
 671   3                              else
 672   3                                      VideoSourcePtr = Max;
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 12  

 673   3                              }
 674   2                      if(MenuPtr.Op == PolTab[Polary+1])
 675   2                              {
 676   3                              if(VideoSourcePtr > FuncMin)
 677   3                                      VideoSourcePtr--;
 678   3                              else
 679   3                                      VideoSourcePtr = Min;
 680   3                              }
 681   2      
 682   2                      if((MenuPtr.Op == PolTab[Polary]))
 683   2                      {
 684   3                              if(FuncBuf[FuncPtr] > FuncMax)
 685   3                                      FuncBuf[FuncPtr] = Max;
 686   3                      }
 687   2              }
 688   1      }
 689          
 690          void GetFuncRange(Byte Ptr)
 691          {
 692   1              FuncMin = 0;
 693   1              switch(Ptr)
 694   1                      {
 695   2                      case pBRIGHTNESS:
 696   2                              FuncMax = 100;
 697   2                              //FuncMax = 255;
 698   2                              break;
 699   2                      case pCONTRAST:
 700   2                              FuncMax = FuncBuf[pContMax];
 701   2                              FuncMin= FuncBuf[pContMin];
 702   2                              //FuncMin = 20;
 703   2                              //FuncMax = 80;
 704   2                              break;
 705   2                      case pPHASE:
 706   2                              FuncMax = 0x3f;
 707   2                              break;
 708   2                      case pCLOCK:
 709   2                              FuncMax = ClockBase + 50;
 710   2                              FuncMin = ClockBase - 50;
 711   2                              //FuncMax = ClockBase / 10 * 11;                ///10%
 712   2                              //FuncMin = ClockBase / 10 * 9;
 713   2                              break;
 714   2                      case pBACKLIGHT:
 715   2                      case pBACKLIGHT2:
 716   2                              FuncMax = FuncBuf[pBrigMax];
 717   2                              FuncMin= FuncBuf[pBrigMin];
 718   2                              //FuncMax = 0x7f;
 719   2                              break;
 720   2                      case pHPOSITION:
 721   2      /*                      if(ModePoint >= UserModeSt){
 722   2                              // Set Minimum and Maximum
 723   2                                      FuncMin = 1;
 724   2                                      FuncMax = ClockBase - Hresolution - 2;
 725   2                              }
 726   2                              else{
 727   2                              // Set Minimum and Maximum
 728   2                                      FuncMin = HPositionBase - (ClockBase - Hresolution)/2;
 729   2                                      FuncMax = HPositionBase + (ClockBase - Hresolution)/2;
 730   2                              }
 731   2                              //if(FuncBuf[pHPOSITION] > (ClockBase - Hresolution)){
 732   2                              //      FuncMax = ClockBase - Hresolution - 2;
 733   2                              //}
 734   2                              
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 13  

 735   2                              //FuncMin = 1;
 736   2                              //FuncMax = ClockBase - Hresolution - 2;
 737   2                              //FuncMax = FuncBuf[pCLOCK] - H_Act - 2;
 738   2                              break; */
 739   2                              //------------------------------ -jwshin 061115
 740   2                              if(ModePoint >= UserModeSt){
 741   3                              // Set Minimum and Maximum
 742   3                                      FuncMin = 1;
 743   3                                      FuncMax = ClockBase - Hresolution - 2;
 744   3                              }
 745   2                              else{
 746   3                              // Set Minimum and Maximum
 747   3                              // Set Minimum and Maximum
 748   3                                      if(HPositionBase > (ClockBase - Hresolution)/4)
 749   3                                              FuncMin = HPositionBase - (ClockBase - Hresolution)/4;
 750   3                                      else
 751   3                                              FuncMin = 1;
 752   3                                      FuncMax = HPositionBase + (ClockBase - Hresolution)/4;
 753   3                                      //FuncMin = HPositionBase - (ClockBase - Hresolution)/2;
 754   3                                      //FuncMax = HPositionBase + (ClockBase - Hresolution)/2;
 755   3                              }
 756   2                              //if(FuncBuf[pHPOSITION] > (ClockBase - Hresolution)){
 757   2                              //      FuncMax = ClockBase - Hresolution - 2;
 758   2                              //}
 759   2                              
 760   2                              //FuncMin = 1;
 761   2                              //FuncMax = ClockBase - Hresolution - 2;
 762   2                              //FuncMax = FuncBuf[pCLOCK] - H_Act - 2;
 763   2                              break;
 764   2                      case pVPOSITION:
 765   2                              if(FuncBuf[pVPOSITION] < 2)
 766   2                                      FuncMin = FuncBuf[pVPOSITION]-1;
 767   2                              else
 768   2                                      FuncMin = 2;
 769   2                              FuncMax = VTotal - Vresolution + 20;
 770   2                              break;
 771   2                      case pOSDHPOSITION:
 772   2                              FuncMax = 4;
 773   2                              //FuncMax = (PanelWidth-OSD_WIDTH*12)/5;
 774   2                              break;
 775   2      // Jacky 0201 removed
 776   2      //              case pOSDVPOSITION:
 777   2      //                      FuncMax = (PanelHeight-OSD_HIGH*18)/5;
 778   2      //                      break;
 779   2                      case pOSDTIMER:
 780   2                              FuncMin = 5;
 781   2                              FuncMax = 60;
 782   2                              break;
 783   2                      case pSATURATION:
 784   2                              FuncMax = 100;
 785   2                              break;
 786   2                      case pTINT:
 787   2                              FuncMax = 100;
 788   2                              break;
 789   2                      case pRCOLOR:
 790   2                      case pGCOLOR:
 791   2                      case pBCOLOR:
 792   2                              FuncMax = 255;
 793   2                              break;
 794   2                      case pCOLORTEMP:
 795   2                              FuncMax = MAX_COLOR_TEMP-1;
 796   2                              break;
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 14  

 797   2                      case pLANGUAGE:
 798   2                              FuncMax = MAX_LANGUAGE-1;
 799   2                              break;
 800   2                      case pSHARPNESS:
 801   2                              if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
 802   2                              //      FuncMax = 7; //Jason Choi ?
 803   2                                      FuncMax = 4;
 804   2                              else
 805   2                                      FuncMax = 7;
 806   2                              break;
 807   2                      case pTRANSOSD:
 808   2                              FuncMax = 0x05;
 809   2                              break;
 810   2                      case pVIDEOSOURCE:
 811   2                              if(DecoderICEn)
 812   2                                      FuncMax = 6;    //+jwshin 060905
 813   2                              else
 814   2                                      FuncMax = 1;  //?
 815   2                              break;
 816   2                      case pVOLUME:
 817   2                              FuncMax = 100;
 818   2                              break;
 819   2                      case pVCMVOL:
 820   2                              FuncMax = 0x28;
 821   2                              FuncMin = 0x0;
 822   2                              break;
 823   2                      case pRADC:
 824   2                      case pGADC:
 825   2                      case pBADC:
 826   2                              FuncMax = 255;
 827   2                              break;
 828   2                      case pROFFSET:
 829   2                      case pGOFFSET:
 830   2                      case pBOFFSET:
 831   2                              FuncMax = 255;
 832   2                              break;
 833   2                      case pContMax:
 834   2                              FuncMax = 100;
 835   2                              FuncMin = 0;
 836   2                              break;
 837   2                      case pContMin:
 838   2                              FuncMax = 50;
 839   2                              FuncMin = 0;
 840   2                              break;
 841   2                      case pBrigMax:
 842   2                              FuncMax = 127;
 843   2                              FuncMin = 0;
 844   2                              break;
 845   2                      case pBrigMin:
 846   2                              FuncMax = 50;
 847   2                              FuncMin = 0;
 848   2                              break;
 849   2                      case pLIGHTBRIGHT:
 850   2                              FuncMax = 100;
 851   2                              //FuncMax = 255;
 852   2                              break;
 853   2                      case pLIGHTCONTRAST:
 854   2                              //FuncMin = 20;
 855   2                              FuncMax = 100;
 856   2                              break;
 857   2                      case pLIGHTHSTART:
 858   2                      case pLIGHTHWIDTH:
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 15  

 859   2                              FuncMin = 0;
 860   2                              FuncMax = 100;
 861   2                              break;
 862   2                      case pLIGHTVSTART:
 863   2                      case pLIGHTVHIGHT:
 864   2                              FuncMin = 0;
 865   2                              FuncMax = 100;
 866   2                              break;
 867   2                      case pCHFINETUNE:
 868   2                              FuncMin = 0;
 869   2                              FuncMax = 100;
 870   2                              break;
 871   2                      case pTreble:
 872   2                      case pBass:
 873   2                              FuncMin = 0;
 874   2                              FuncMax =14;
 875   2                              break;
 876   2                              
 877   2                      };
 878   1      }
 879          
 880          void Recall(bit All)
 881          {
 882   1              Word addr;
 883   1              Byte i;
 884   1              if(FuncBuf[pVIDEOSOURCE] == cANALOG||FuncBuf[pVIDEOSOURCE] == cYPbPr)
 885   1                      {
 886   2                      if(ModePoint < UserModeSt)
 887   2                              {
 888   3                              addr = ModePoint * 8;
 889   3                              for(i=0; i<6; i++)
 890   3                                      {
 891   4                                      Write24C16(addr+ep_Sync_Data,EEP_SyncMap[addr]);
 892   4                                      addr++;
 893   4                                      }
 894   3                              addr++;
 895   3                              Write24C16(addr+ep_Sync_Data,EEP_SyncMap[addr]);
 896   3                              }
 897   2                      if(All)
 898   2                              {
 899   3                              Write24C16(ep_Brightness,EEP_GeoMap[ep_Brightness-0x200]);      
 900   3                              Write24C16(ep_Contrast,EEP_GeoMap[ep_Contrast-0x200]);  
 901   3                              }
 902   2                      LoadModeIndependentSettings();
 903   2                      LoadModeDependentSettings();
 904   2                      //Write24C16(ep_Color_Ptr,EEP_GeoMap[ep_Color_Ptr-0x200]);      
 905   2                      //FuncBuf[pCOLORTEMP] = Read24C16(ep_Color_Ptr);
 906   2                      //LoadColor(FuncBuf[pCOLORTEMP]);
 907   2                      SetADC_PLL();
 908   2                      SetADC_Phase();
 909   2                      
 910   2                      if(SyncMode != 3)
 911   2                              {
 912   3                              SetHP();
 913   3                              SetVP();
 914   3                              }
 915   2                      if(Interlance){
 916   3                              WriteWordIIC563(0x032,Vresolution);             // Capture V_Active
 917   3                      }
 918   2                      else{
 919   3                              WriteWordIIC563(0x032,Vresolution);     // Capture V_Active
 920   3                      }
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 16  

 921   2                      WriteWordIIC563(0x036,Hresolution);     // Capture H_Active
 922   2                      //WriteWordIIC563(0x036,Hresolution + H_ActErrTab[ResolutionPtr]);      // Capture H_Active
 923   2                      //SetScaler();
 924   2                      SetSharpness();
 925   2                      //SetBrightness();
 926   2                      //SetContrast();
 927   2                      //sRGB();
 928   2                      }
 929   1              if(FuncBuf[pVIDEOSOURCE] == cDVI)
 930   1                      {
 931   2                      //Write24C16(ep_DVI_Contrast,EEP_GeoMap[ep_DVI_Contrast-0x200]);        
 932   2                      Write24C16(ep_Contrast,EEP_GeoMap[ep_Contrast-0x200]);  
 933   2                      Write24C16(ep_Brightness,EEP_GeoMap[ep_Brightness-0x200]);      
 934   2                      Write24C16(ep_Color_Ptr,EEP_GeoMap[ep_Color_Ptr-0x200]);        
 935   2                      //FuncBuf[pCONTRAST] = Read24C16(ep_DVI_Contrast);
 936   2                      FuncBuf[pCONTRAST] = Read24C16(ep_Contrast);
 937   2                      FuncBuf[pBRIGHTNESS] = Read24C16(ep_Brightness);
 938   2                      FuncBuf[pCOLORTEMP] = Read24C16(ep_Color_Ptr);
 939   2                      SetBrightness();
 940   2                      LoadColor(FuncBuf[pCOLORTEMP]);
 941   2                      SetContrast();
 942   2                      addr = ModePoint * 8;
 943   2                              Write24C16(addr+ep_Sync_Data,EEP_SyncMap[addr]);
 944   2                      FuncBuf[pSHARPNESS] = EEP_SyncMap[addr];
 945   2                      //addr = ep_Shape_Offset + (ModePoint * 8);
 946   2                      //FuncBuf[pSHARPNESS] = Read24C16(addr);
 947   2                      SetSharpness();
 948   2                      }
 949   1              if(FuncBuf[pVIDEOSOURCE] > cYPbPr)
 950   1                      {
 951   2                      Write24C16(ep_Video_Contrast,EEP_GeoMap[ep_Video_Contrast-0x200]);      
 952   2                      Write24C16(ep_Video_Brightness,EEP_GeoMap[ep_Video_Brightness-0x200]);  
 953   2                      Write24C16(ep_Video_Tint,EEP_GeoMap[ep_Video_Tint-0x200]);      
 954   2                      Write24C16(ep_Video_Saturation,EEP_GeoMap[ep_Video_Saturation-0x200]);  
 955   2                      Write24C16(ep_Video_Shapness,EEP_GeoMap[ep_Video_Shapness-0x200]);      
 956   2                      FuncBuf[pBRIGHTNESS] = Read24C16(ep_Video_Brightness);
 957   2                      FuncBuf[pCONTRAST] = Read24C16(ep_Video_Contrast);
 958   2                      FuncBuf[pSATURATION] = Read24C16(ep_Video_Saturation);
 959   2                      FuncBuf[pSHARPNESS] = Read24C16(ep_Video_Shapness);
 960   2                      FuncBuf[pTINT] = Read24C16(ep_Video_Tint);
 961   2      //              SetVideoBrightness();
 962   2      //              SetVideoContrast();
 963   2      //              SetVideoSaturation();
 964   2      //              SetVideoSharpness();
 965   2      //              SetVideoTint();
 966   2                      SetDecoder_Brightness();
 967   2                      SetDecoder_Contrast();
 968   2                      SetDecoder_Saturation();
 969   2                      SetDecoder_Sharpness();
 970   2                      SetDecoder_Tint();
 971   2      
 972   2                      sRGB(50,(Byte)FuncBuf[pRCOLOR],(Byte)FuncBuf[pGCOLOR],(Byte)FuncBuf[pBCOLOR]);
 973   2                      }
 974   1              //common area
 975   1              //---user color
 976   1              Write24C16(ep_Color4_R,Read24C16(ep_Color6_R)); //R Gain
 977   1              Write24C16(ep_Color4_G,Read24C16(ep_Color6_G)); //G Gain
 978   1              Write24C16(ep_Color4_B,Read24C16(ep_Color6_B)); //B Gain
 979   1              //---Color tempeture
 980   1              Write24C16(ep_Color_Ptr,EEP_GeoMap[ep_Color_Ptr-0x200]); //Reset Color  
 981   1              //---Osd Timer
 982   1              Write24C16(ep_Osd_Timer,EEP_GeoMap[ep_Osd_Timer-0x200]);
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 17  

 983   1              //---Osd Position
 984   1              Write24C16(ep_OsdH_Pos,EEP_GeoMap[ep_OsdH_Pos-0x200]);  
 985   1              //Write24C16(ep_OsdV_Pos,EEP_GeoMap[ep_OsdV_Pos-0x200]);        
 986   1              //---Osd Effect
 987   1              Write24C16(ep_Osd_Effect,EEP_GeoMap[ep_Osd_Effect-0x200]);      
 988   1              //---Back light
 989   1              Write24C16(ep_BackLight,EEP_GeoMap[ep_BackLight-0x200]);        
 990   1              //---Audio Volume
 991   1              Write24C16(ep_Volume,EEP_GeoMap[ep_Volume-0x200]);      
 992   1              //---Color tempeture
 993   1              FuncBuf[pCOLORTEMP] = Read24C16(ep_Color_Ptr);
 994   1              //---Osd Timer
 995   1              FuncBuf[pOSDTIMER] = Read24C16(ep_Osd_Timer);
 996   1              //---Osd Position
 997   1              FuncBuf[pOSDHPOSITION] = Read24C16(ep_OsdH_Pos);
 998   1              //FuncBuf[pOSDVPOSITION] = Read24C16(ep_OsdV_Pos);
 999   1              //---Osd Effect
1000   1              FuncBuf[pTRANSOSD] = Read24C16(ep_Osd_Effect);
1001   1              //---Back light
1002   1              FuncBuf[pBACKLIGHT] = Read24C16(ep_BackLight);
1003   1              //---Audio Volume
1004   1              FuncBuf[pVOLUME] = Read24C16(ep_Volume);
1005   1              //---Audio Treble/Bass
1006   1              FuncBuf[pTreble]=Read24C16(ep_Treble);
1007   1              FuncBuf[pBass]=Read24C16(ep_Bass);
1008   1              
1009   1              LoadColor(FuncBuf[pCOLORTEMP]);
1010   1              SetBrightness();
1011   1              SetContrast();
1012   1              SetOsdTrans();
1013   1              OsdPosition();
1014   1              SetInverter();
1015   1              SetAudioVolume();
1016   1              AudioMute = 0;
1017   1              SetAudioMute();
1018   1              AutoSetting = 1;
1019   1              Write24C16(ep_Status,StatusFlag);
1020   1      //      Write24C16(ep_Language,EEP_GeoMap[ep_Language-0x200]);
1021   1      }
1022          
1023          void LoadModeIndependentSettings(void)
1024          {
1025   1              Word Addr;
1026   1              FuncBuf[pBRIGHTNESS] = Read24C16(ep_Brightness);        //0xd0 = FuncBuf[pBRIGHTNESS]
1027   1      //      if(FuncBuf[pVIDEOSOURCE] == 0)
1028   1                      FuncBuf[pCONTRAST] = Read24C16(ep_Contrast);            //0xd1 = FuncBuf[pCONTRAST]
1029   1      //      else
1030   1      //              FuncBuf[pCONTRAST] = Read24C16(ep_DVI_Contrast);                //0xd1 = FuncBuf[pCONTRAST]
1031   1              FuncBuf[pSATURATION] = Read24C16(ep_sRGB_Saturation);   //0xc8 = FuncBuf[pSATURATION]
1032   1              FuncBuf[pTINT] = Read24C16(ep_sRGB_Tint);                       //0xc9 = FuncBuf[pTINT]
1033   1              FuncBuf[pOSDHPOSITION] = Read24C16(ep_OsdH_Pos);                //0xdd = osd position x
1034   1      // Jacky 0201 removed
1035   1      //      FuncBuf[pOSDVPOSITION] = Read24C16(ep_OsdV_Pos);                //0xdd = osd position y
1036   1              FuncBuf[pOSDTIMER] = Read24C16(ep_Osd_Timer);   //0xcf = osd timer
1037   1              FuncBuf[pLANGUAGE] = Read24C16(ep_Language);            //0xe0 = Language
1038   1              FuncBuf[pBACKLIGHT2] = Read24C16(ep_sRGB_Backlight);
1039   1              FuncBuf[pTRANSOSD] = Read24C16(ep_Osd_Effect);
1040   1              if(FuncBuf[pTRANSOSD] > 5)
1041   1                      FuncBuf[pTRANSOSD] = 0;
1042   1              FuncBuf[pCOLORTEMP] = Read24C16(ep_Color_Ptr);
1043   1              if(FuncBuf[pCOLORTEMP] >= MAX_COLOR_TEMP)
1044   1                      FuncBuf[pCOLORTEMP] = 0;
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 18  

1045   1              Addr = FuncBuf[pCOLORTEMP] * 3 + ep_Color1_R;                   //Select color temperature
1046   1              FuncBuf[pRCOLOR] = Read24C16(Addr++);
1047   1              FuncBuf[pGCOLOR] = Read24C16(Addr++);
1048   1              FuncBuf[pBCOLOR] = Read24C16(Addr);
1049   1              FuncBuf[pBACKLIGHT] = Read24C16(ep_BackLight);          //0xd5 = FuncBuf[pBACKLIGHT]
1050   1              FuncBuf[pVCMVOL] = Read24C16(ep_VCMVol);        //0x0f = vcom vol
1051   1              FuncBuf[pVOLUME] = Read24C16(ep_Volume);        //0xcf = volume
1052   1              FuncBuf[pTreble]=Read24C16(ep_Treble); //Treble
1053   1              FuncBuf[pBass]=Read24C16(ep_Bass); //Bass
1054   1              FuncBuf[pContMax] = Read24C16(ep_ContMax);
1055   1              FuncBuf[pContMin] = Read24C16(ep_ContMin);
1056   1              FuncBuf[pBrigMax] = Read24C16(ep_BrigMax);
1057   1              FuncBuf[pBrigMin] = Read24C16(ep_BrigMin);
1058   1      
1059   1              FuncBuf[pLIGHTCONTRAST] = Read24C16(ep_Light_Contrast);
1060   1              FuncBuf[pLIGHTBRIGHT] = Read24C16(ep_Light_Bright);
1061   1      
1062   1              FuncBuf[pLIGHTHSTART] = Read24C16(ep_Light_HSMSB);
1063   1              FuncBuf[pLIGHTHSTART] <<= 8;
1064   1              FuncBuf[pLIGHTHSTART] |= Read24C16(ep_Light_HSLSB);
1065   1              FuncBuf[pLIGHTHWIDTH] = Read24C16(ep_Light_HWMSB);
1066   1              FuncBuf[pLIGHTHWIDTH] <<= 8;
1067   1              FuncBuf[pLIGHTHWIDTH] |= Read24C16(ep_Light_HWLSB);
1068   1              FuncBuf[pLIGHTVSTART] = Read24C16(ep_Light_VSMSB);
1069   1              FuncBuf[pLIGHTVSTART] <<= 8;
1070   1              FuncBuf[pLIGHTVSTART] |= Read24C16(ep_Light_VSLSB);
1071   1              FuncBuf[pLIGHTVHIGHT] = Read24C16(ep_Light_VHMSB);
1072   1              FuncBuf[pLIGHTVHIGHT] <<= 8;
1073   1              FuncBuf[pLIGHTVHIGHT] |= Read24C16(ep_Light_VHLSB);
1074   1      
1075   1              BackLightTimer = Read24C16(ep_BkLightTime_Offset+3);
1076   1              BackLightTimer <<= 8;
1077   1              BackLightTimer |= Read24C16(ep_BkLightTime_Offset+2);
1078   1              BackLightTimer <<= 8;
1079   1              BackLightTimer |= Read24C16(ep_BkLightTime_Offset+1);
1080   1              BackLightTimer <<= 8;
1081   1              BackLightTimer |= Read24C16(ep_BkLightTime_Offset);
1082   1      
1083   1      }
1084          
1085          void LoadColor(Word Ptr)
1086          {
1087   1              Word Addr;
1088   1              Addr = Ptr * 3 + ep_Color1_R;                   //Select color temperature
1089   1              FuncBuf[pRCOLOR] = Read24C16(Addr++);
1090   1              FuncBuf[pGCOLOR] = Read24C16(Addr++);
1091   1              FuncBuf[pBCOLOR] = Read24C16(Addr);
1092   1      }
1093          
1094          void LoadModeDependentSettings(void)
1095          {
1096   1      //      Sharp,V_BP,H_BP,H_Tatol,Phase
1097   1      unsigned short addr;
1098   1              addr = ep_Sync_Data + (ModePoint * 8);
1099   1              FuncBuf[pSHARPNESS] = Read24C16(addr++);
1100   1              FuncBuf[pVPOSITION] = Read24C16(addr++);
1101   1              FuncBuf[pHPOSITION] = Read24C16(addr++);
1102   1              FuncBuf[pHPOSITION] <<= 8;
1103   1              FuncBuf[pHPOSITION] |= Read24C16(addr++);
1104   1              FuncBuf[pCLOCK] = Read24C16(addr++);
1105   1              FuncBuf[pCLOCK] <<= 8;
1106   1              FuncBuf[pCLOCK] |= Read24C16(addr++);
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 19  

1107   1              addr++;
1108   1              FuncBuf[pPHASE] = Read24C16(addr);      
1109   1      }
1110          
1111          void SaveModeDependentSettings(void)
1112          {
1113   1      unsigned short addr;
1114   1              addr = ep_Shape_Offset + (ModePoint * 8);
1115   1              Write24C16(addr++,(Byte)FuncBuf[pSHARPNESS]);
1116   1              Write24C16(addr++,(Byte)FuncBuf[pVPOSITION]);
1117   1              Write24C16(addr++,(Byte)(FuncBuf[pHPOSITION] >> 8));
1118   1              Write24C16(addr++,(Byte)FuncBuf[pHPOSITION]);
1119   1              Write24C16(addr++,(Byte)(FuncBuf[pCLOCK] >> 8));
1120   1              Write24C16(addr++,(Byte)FuncBuf[pCLOCK]);
1121   1              addr++;
1122   1              Write24C16(addr,(Byte)FuncBuf[pPHASE]); 
1123   1      }
1124          
1125          void SaveData(void)
1126          {
1127   1      unsigned short addr;
1128   1              switch(SavePointer)
1129   1                      {
1130   2                      case pBRIGHTNESS:
1131   2                              if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
1132   2                                      //Write24C16(ep_BackLight,FuncBuf[pBACKLIGHT]);
1133   2                                      Write24C16(ep_Brightness,FuncBuf[pBRIGHTNESS]);
1134   2                              else
1135   2                                      Write24C16(ep_Video_Brightness,FuncBuf[pBRIGHTNESS]);
1136   2                              break;
1137   2                      case pCONTRAST:
1138   2                              switch(FuncBuf[pVIDEOSOURCE])
1139   2                                      {
1140   3                                      case cANALOG:
1141   3                                      case cDVI:
1142   3                                      case cYPbPr:
1143   3                                              Write24C16(ep_Contrast,(Byte)FuncBuf[pCONTRAST]);
1144   3                                              break;                          
1145   3                                      case cSVIDEO:
1146   3                                      case cCOMPOSIT:
1147   3                                      case cTV:
1148   3      //                              case 5:
1149   3                                              Write24C16(ep_Video_Contrast,(Byte)FuncBuf[pCONTRAST]);
1150   3                                              break;                          
1151   3                                      };
1152   2                              break;
1153   2                      case pCLOCK:
1154   2                              addr = ep_Clock_Offset + (ModePoint * 8);
1155   2                              Write24C16(addr++,(Byte)(FuncBuf[pCLOCK] >> 8));
1156   2                              Write24C16(addr,(Byte)FuncBuf[pCLOCK]);
1157   2                              break;
1158   2                      case pPHASE:
1159   2                              addr = ep_Phase_Offset + (ModePoint * 8);
1160   2                              Write24C16(addr,(Byte)FuncBuf[pPHASE]);
1161   2                              break;
1162   2                      case pHPOSITION:
1163   2                              addr = ep_Hpos_Offset + (ModePoint * 8);
1164   2                              Write24C16(addr++,(Byte)(FuncBuf[pHPOSITION] >> 8));
1165   2                              Write24C16(addr,(Byte)FuncBuf[pHPOSITION]);
1166   2                              break;
1167   2                      case pVPOSITION:
1168   2                              addr = ep_Vpos_Offset + (ModePoint * 8);
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 20  

1169   2                              Write24C16(addr,(Byte)FuncBuf[pVPOSITION]);
1170   2                              break;
1171   2                      case pRCOLOR:
1172   2                              addr = FuncBuf[pCOLORTEMP] * 3 + ep_Color1_R;
1173   2                              Write24C16(addr,(Byte)FuncBuf[pRCOLOR]);
1174   2                              break;
1175   2                      case pGCOLOR:
1176   2                              addr = FuncBuf[pCOLORTEMP] * 3 + ep_Color1_G;
1177   2                              Write24C16(addr,(Byte)FuncBuf[pGCOLOR]);
1178   2                              break;
1179   2                      case pBCOLOR:
1180   2                              addr = FuncBuf[pCOLORTEMP] * 3 + ep_Color1_B;
1181   2                              Write24C16(addr,(Byte)FuncBuf[pBCOLOR]);
1182   2                              break;
1183   2                      case pOSDHPOSITION:
1184   2                              Write24C16(ep_OsdH_Pos,(Byte)FuncBuf[pOSDHPOSITION]);
1185   2                              break;
1186   2      // Jacky 0201 removed
1187   2      //              case pOSDVPOSITION:
1188   2      //                      Write24C16(ep_OsdV_Pos,(Byte)FuncBuf[pOSDVPOSITION]);
1189   2      //                      break;
1190   2                      case pOSDTIMER:
1191   2                              Write24C16(ep_Osd_Timer,(Byte)FuncBuf[pOSDTIMER]);
1192   2                              break;
1193   2                      case pSATURATION:
1194   2                              if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
1195   2                                      Write24C16(ep_sRGB_Saturation,(Byte)FuncBuf[pSATURATION]);
1196   2                              else
1197   2                                      Write24C16(ep_Video_Saturation,(Byte)FuncBuf[pSATURATION]);
1198   2                              break;
1199   2                      case pTINT:
1200   2                              if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
1201   2                                      Write24C16(ep_sRGB_Tint,(Byte)FuncBuf[pTINT]);
1202   2                              else
1203   2                                      Write24C16(ep_Video_Tint,(Byte)FuncBuf[pTINT]);
1204   2                              break;
1205   2                      case pSHARPNESS:
1206   2                              if(FuncBuf[pVIDEOSOURCE] < cSVIDEO)
1207   2                                      {
1208   3                                      addr = ep_Shape_Offset + (ModePoint * 8);
1209   3                                      Write24C16(addr,(Byte)FuncBuf[pSHARPNESS]);
1210   3                                      }
1211   2                              else
1212   2                                      Write24C16(ep_Video_Shapness,(Byte)FuncBuf[pSHARPNESS]);
1213   2                              break;
1214   2                      case pBACKLIGHT:
1215   2                              Write24C16(ep_BackLight,(Byte)FuncBuf[pBACKLIGHT]);
1216   2                              break;
1217   2                      case pLANGUAGE:
1218   2                              Write24C16(ep_Language,FuncBuf[pLANGUAGE]);
1219   2      //                      if(FuncBuf[pLANGUAGE]== 5){
1220   2      //                              WriteSeqIndexPort(0xd0,tySRAM_1BIT,OneBitFontJP,45*27);
1221   2      //                              WriteSeqIndexPort(0x90,tySRAM_1BIT,OneBitFontJP2,7*27);
1222   2      //                      }
1223   2      //                      else if((FuncBuf[pLANGUAGE] == 7)||(FuncBuf[pLANGUAGE] == 8)){
1224   2      //                              WriteSeqIndexPort(0xd0,tySRAM_1BIT,OneBitFontCH2,48*27);
1225   2      //                              WriteSeqIndexPort(0x90,tySRAM_1BIT,OneBitFontCH3,6*27);
1226   2      //                      }
1227   2      //                      else
1228   2      //                              WriteSeqIndexPort(0x90,tySRAM_1BIT,OneBitFontPY,7*27);
1229   2                              break;
1230   2                      case pCOLORTEMP:
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 21  

1231   2                              Write24C16(ep_Color_Ptr,FuncBuf[pCOLORTEMP]);
1232   2                              break;
1233   2                      case pTRANSOSD:
1234   2                              Write24C16(ep_Osd_Effect,FuncBuf[pTRANSOSD]);
1235   2                              break;
1236   2                      case pBACKLIGHT2:
1237   2                              Write24C16(ep_sRGB_Backlight,FuncBuf[pBACKLIGHT2]);
1238   2                              break;                  
1239   2                      case pVCMVOL:
1240   2                              Write24C16(ep_VCMVol,(Byte)FuncBuf[pVCMVOL]);
1241   2                              break;
1242   2                      case pVOLUME:
1243   2                              Write24C16(ep_Volume,(Byte)FuncBuf[pVOLUME]);
1244   2                              break;
1245   2                      case pTreble:
1246   2      //                      printf("pTreble save=%d\r\n",(unsigned short)FuncBuf[pTreble]);
1247   2                              Write24C16(ep_Treble,(Byte)FuncBuf[pTreble]);
1248   2                              break;
1249   2                      case pBass:
1250   2      //                      printf("pBass save=%d\r\n",(unsigned short)FuncBuf[pBass]);
1251   2                              Write24C16(ep_Bass,(Byte)FuncBuf[pBass]);
1252   2                              break;
1253   2                      case pRADC:
1254   2                              if(FuncBuf[pVIDEOSOURCE] == cANALOG)
1255   2                                      Write24C16(ep_ADC_R_Gain,FuncBuf[pRADC]);
1256   2                              break;
1257   2                      case pGADC:
1258   2                              if(FuncBuf[pVIDEOSOURCE] == cANALOG)
1259   2                                      Write24C16(ep_ADC_G_Gain,FuncBuf[pGADC]);
1260   2                              break;
1261   2                      case pBADC:
1262   2                              if(FuncBuf[pVIDEOSOURCE] == cANALOG)
1263   2                                      Write24C16(ep_ADC_B_Gain,FuncBuf[pBADC]);
1264   2                              break;
1265   2                      case pROFFSET:
1266   2                              if(FuncBuf[pVIDEOSOURCE] == cANALOG)
1267   2                                      Write24C16(ep_ADC_R_Offset,FuncBuf[pROFFSET]);
1268   2                              else if(FuncBuf[pVIDEOSOURCE] == cYPbPr)
1269   2                                      Write24C16(ep_YPbPr_R_Offset,FuncBuf[pROFFSET]);
1270   2                              break;
1271   2                      case pGOFFSET:
1272   2                              if(FuncBuf[pVIDEOSOURCE] == cANALOG)
1273   2                                      Write24C16(ep_ADC_G_Offset,FuncBuf[pGOFFSET]);
1274   2                              else if(FuncBuf[pVIDEOSOURCE] == cYPbPr)
1275   2                                      Write24C16(ep_YPbPr_G_Offset,FuncBuf[pGOFFSET]);
1276   2                              break;
1277   2                      case pBOFFSET:
1278   2                              if(FuncBuf[pVIDEOSOURCE] == cANALOG)
1279   2                                      Write24C16(ep_ADC_B_Offset,FuncBuf[pBOFFSET]);
1280   2                              else if(FuncBuf[pVIDEOSOURCE] == cYPbPr)
1281   2                                      Write24C16(ep_YPbPr_B_Offset,FuncBuf[pBOFFSET]);
1282   2                              break;
1283   2                      case pContMax:
1284   2                              Write24C16(ep_ContMax,FuncBuf[pContMax]);
1285   2                              break;
1286   2                      case pContMin:
1287   2                              Write24C16(ep_ContMin,FuncBuf[pContMin]);
1288   2                              break;
1289   2                      case pBrigMax:
1290   2                              Write24C16(ep_BrigMax,FuncBuf[pBrigMax]);
1291   2                              break;
1292   2                      case pBrigMin:
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 22  

1293   2                              Write24C16(ep_BrigMin,FuncBuf[pBrigMin]);
1294   2                              break;
1295   2                      case pLIGHTCONTRAST:
1296   2                              Write24C16(ep_Light_Contrast,FuncBuf[pLIGHTCONTRAST]);
1297   2                              break;
1298   2                      case pLIGHTBRIGHT:
1299   2                              Write24C16(ep_Light_Bright,FuncBuf[pLIGHTBRIGHT]);
1300   2                              break;
1301   2                      case pLIGHTHSTART:
1302   2                              Write24C16(ep_Light_HSMSB,(Byte)(FuncBuf[pLIGHTHSTART] >> 8));
1303   2                              Write24C16(ep_Light_HSLSB,(Byte)FuncBuf[pLIGHTHSTART]);
1304   2                              break;
1305   2                      case pLIGHTHWIDTH:
1306   2                              Write24C16(ep_Light_HWMSB,(Byte)(FuncBuf[pLIGHTHWIDTH] >> 8));
1307   2                              Write24C16(ep_Light_HWLSB,(Byte)FuncBuf[pLIGHTHWIDTH]);
1308   2                              break;
1309   2                      case pLIGHTVSTART:
1310   2                              Write24C16(ep_Light_VSMSB,(Byte)(FuncBuf[pLIGHTVSTART] >> 8));
1311   2                              Write24C16(ep_Light_VSLSB,(Byte)FuncBuf[pLIGHTVSTART]);
1312   2                              break;
1313   2                      case pLIGHTVHIGHT:
1314   2                              Write24C16(ep_Light_VHMSB,(Byte)(FuncBuf[pLIGHTVHIGHT] >> 8));
1315   2                              Write24C16(ep_Light_VHLSB,(Byte)FuncBuf[pLIGHTVHIGHT]);
1316   2                              break;
1317   2                      }
1318   1              #if PRINT_MESSAGE       
1319   1                      printf("SavePointer = %x\r\n",(unsigned short)SavePointer);
1320   1              #endif
1321   1              SavePointer = 0xff;
1322   1      }
1323          
1324          void SetSource()
1325          {
1326   1              if(FuncBuf[pVIDEOSOURCE] > cYPbPr&& !DecoderICEn)
1327   1                      FuncBuf[pVIDEOSOURCE] = cANALOG;
1328   1              
1329   1              switch(FuncBuf[pVIDEOSOURCE])
1330   1                      {
1331   2                      case cANALOG:
1332   2                              SyncMode = 0;
1333   2                              SourceSelect();
1334   2                              AVDecoderSleep();
1335   2                              break;
1336   2      
1337   2                      case cDVI:
1338   2                              SyncMode = 3;
1339   2                              SourceSelect();
1340   2                              AVDecoderSleep();
1341   2                              break;
1342   2      
1343   2                      case cYPbPr:
1344   2                              SyncMode = 4;                   // +jwshin 060926
1345   2                              SourceSelect();
1346   2                              AVDecoderSleep();
1347   2                              break;
1348   2      
1349   2                      case cSVIDEO:
1350   2      //                      SyncMode = 4;
1351   2      //                      SourceSelect();
1352   2      //                      AVDecoderSleep();
1353   2      //                      break;
1354   2                      case cCOMPOSIT:
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 23  

1355   2                      case cTV:
1356   2      //              case 5: 
1357   2                              SourceSelect();
1358   2                              break;
1359   2                      }
1360   1              
1361   1                      }
1362          
1363          
1364          void MiscProcess(Bit DoAll)
1365          {
1366   1              if((DDC_CTL0 & UPD_DDC) && !SaveDDC0)
1367   1                      {
1368   2                      SaveDDC0 = 1;
1369   2                      DDCTimer = SAVE_DDC_TIME;
1370   2                      }
1371   1              if((DDC_CTL1 & UPD_DDC) && !SaveDDC1)
1372   1                      {
1373   2                      SaveDDC1 = 1;
1374   2                      DDCTimer = SAVE_DDC_TIME;
1375   2                      }
1376   1              if(SaveDDC0 && DDCTimer == 0)
1377   1                      SaveDDCData(0);
1378   1              if(SaveDDC1 && DDCTimer == 0)
1379   1                      SaveDDCData(1);
1380   1      //      printf("OsdTimer=%d\r\n",(unsigned short)OsdTimer);
1381   1              if(DoAll)
1382   1              {
1383   2                      if(FuncBuf[pVIDEOSOURCE]<cSVIDEO){
1384   3                              if(OsdTimer == 0 && OsdEnable && OutOfRange == 0 && FactMode == 0){
1385   4                                      Osd_Off();
1386   4      //                              printf("Osd_Off()\r\n");
1387   4                              }
1388   3                      }
1389   2                      else{
1390   3                              if((OsdTimer == 0) && OsdEnable){
1391   4                                      Osd_Off();
1392   4                              }
1393   3      //                      else if((IR_WaitTimer == 0)&&(MenuPtr.Menu ==5)&& OsdEnable){   // -jwshin 060905
1394   3      //                              Osd_Off();
1395   3      //                      }
1396   3                      }
1397   2                      
1398   2                      if(BurnInTimer == 0 && BurnInMode && NoSyncFlag){
1399   3                              ShowBurnInPattern(0);
1400   3                              //printf("Burn Test C.\n");
1401   3                      }
1402   2                      if(SavePointer != 0xff && SaveTimer == 0)       
1403   2                              SaveData();
1404   2                      if((BackLightTimer == 0) ||( ((BackLightTimer / 1800) >= 1)&&((BackLightTimer % 1800) < 60))){
1405   3                              SaveBackLightTime();
1406   3                      }
1407   2              }
1408   1      }
1409          
1410          void SaveBackLightTime(void)
1411          {
1412   1              Write24C16(ep_BkLightTime_Offset+3,(Byte)(BackLightTimer >> 24));
1413   1              Write24C16(ep_BkLightTime_Offset+2,(Byte)(BackLightTimer >> 16));
1414   1              Write24C16(ep_BkLightTime_Offset+1,(Byte)(BackLightTimer >> 8));
1415   1              Write24C16(ep_BkLightTime_Offset,(Byte)(BackLightTimer));
1416   1      }
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 24  

1417          
1418          void LoadPresetModeSettings(Byte type)
1419          {
1420   1              Word addr;
1421   1              if(ModePoint < UserModeSt)
1422   1                      addr = ModePoint * 8;
1423   1              else
1424   1                      addr = UserModeRefReso * 8;
1425   1      
1426   1              switch(type)
1427   1              {
1428   2                      case 0:
1429   2                              FuncBuf[pPHASE] = EEP_SyncMap[addr+7];  
1430   2                              FuncBuf[pCLOCK] = EEP_SyncMap[addr+4];
1431   2                              FuncBuf[pCLOCK] <<= 8;
1432   2                              FuncBuf[pCLOCK] |= EEP_SyncMap[addr+5];
1433   2                      case 1:
1434   2                              FuncBuf[pVPOSITION] = EEP_SyncMap[addr+1];
1435   2                              FuncBuf[pHPOSITION] = EEP_SyncMap[addr+2];
1436   2                              FuncBuf[pHPOSITION] <<= 8;
1437   2                              FuncBuf[pHPOSITION] |= EEP_SyncMap[addr+3];
1438   2                              break;
1439   2                      case 2:
1440   2                              FuncBuf[pCLOCK] = EEP_SyncMap[addr+4];
1441   2                              FuncBuf[pCLOCK] <<= 8;
1442   2                              FuncBuf[pCLOCK] |= EEP_SyncMap[addr+5];
1443   2                              break;
1444   2                      }
1445   1      
1446   1      }
1447          
1448          void SetFineTune(void)
1449          {
1450   1              unsigned char i;
1451   1      //      printf("FuncBuf[pCHFINETUNE]1=0x%x\r\n",FuncBuf[pCHFINETUNE]);
1452   1              if((ChSystem==CH_USA)||(ChSystem==CH_JPN))
1453   1                      i = Read24C16(0x209); // ch No
1454   1              else    {
1455   2                      i = Read24C16(0x207);//PR Channel No
1456   2                      if((Read24C16(ep_Input_CH_Sys) &0x80) == 0)
1457   2                              i = Read24C16(0x100+(i - 1));//PR TV CH NO.
1458   2                      else            i = Read24C16(0x180+(i - 1));//PR CATV CH NO.
1459   2              }
1460   1      //              printf("Read24C16(ep_Input_CH_Sys)1=0x%x\r\n",(Word)Read24C16(ep_Input_CH_Sys));
1461   1      
1462   1              if((Read24C16(ep_Input_CH_Sys) &0x80) == 0){
1463   2                      i = i - TV_Min;
1464   2                      Write24C16(0x100+i,FuncBuf[pCHFINETUNE]);
1465   2      //              printf("Write24C16(0x100+i,FuncBuf[pCHFINETUNE])=0x%x\r\n",(Word)(0x100+i));
1466   2                      ChannelSel(i+TV_Min);
1467   2      //      printf("SetFineTune1\r\n");
1468   2              }
1469   1              else{
1470   2                      i = i - CATV_Min;
1471   2                      Write24C16(0x180+i,FuncBuf[pCHFINETUNE]);
1472   2                      ChannelSel(i+CATV_Min);
1473   2      //      printf("SetFineTune2\r\n");
1474   2              }       
1475   1      //      printf("FuncBuf[pCHFINETUNE]2=0x%x\r\n",FuncBuf[pCHFINETUNE]);
1476   1      
1477   1      
1478   1              ShowBar(MAINMENU_BAR_ADDR+(OSD_WIDTH*2),BAR_COLOR,0,100,FuncBuf[pCHFINETUNE]);
C51 COMPILER V7.03   USERADJ                                                               12/21/2006 18:12:25 PAGE 25  

1479   1              ShowValue(MAINMENU_VALUE_ADDR+(OSD_WIDTH*2),BAR_COLOR,FuncBuf[pCHFINETUNE]);
1480   1      }
1481          /*      
1482          void FineTuneUp(void)
1483          {
1484                  unsigned char i;
1485          
1486                  i = Read24C16(0xdf);
1487                  if(Read24C16(0xe3) == 0){
1488                          i = i - TV_Min;
1489                          FineTune = Read24C16(0x400+i);//happyks
1490                          if(++FineTune > 100)
1491                                  FineTune = 100;
1492                          else{
1493                                  if(RepeatTimer == 0){
1494                                          if(++FineTune > 100)
1495                                                  FineTune = 100;
1496                                          else
1497                                                  ;
1498                                                  }
1499                                  Write24C16(0x400+i,FineTune);
1500                                  ChannelSel(i+TV_Min);
1501                                  ShowFineTune();
1502                          }
1503                  }
1504                  else{
1505                          i = i - CATV_Min;
1506                          FineTune = Read24C16(0x480+i);//happyks
1507                          if(++FineTune > 100)
1508                                  FineTune = 100;
1509                          else{
1510                                  if(RepeatTimer == 0){
1511                                          if(++FineTune > 100)
1512                                                  FineTune = 100;
1513                                          else
1514                                                  ;
1515                                                  }
1516                                  Write24C16(0x480+i,FineTune);
1517                                  ChannelSel(i+CATV_Min);
1518                                  ShowFineTune();
1519                          }
1520                  }       
1521          }
1522          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6451    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
